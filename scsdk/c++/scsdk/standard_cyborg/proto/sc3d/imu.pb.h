// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/imu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "standard_cyborg/proto/math/core.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class CMDeviceMotionMsg;
class CMDeviceMotionMsgDefaultTypeInternal;
extern CMDeviceMotionMsgDefaultTypeInternal _CMDeviceMotionMsg_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> ::standard_cyborg::proto::sc3d::CMDeviceMotionMsg* Arena::CreateMaybeMessage<::standard_cyborg::proto::sc3d::CMDeviceMotionMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace standard_cyborg {
namespace proto {
namespace sc3d {

// ===================================================================

class CMDeviceMotionMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.sc3d.CMDeviceMotionMsg) */ {
 public:
  CMDeviceMotionMsg();
  virtual ~CMDeviceMotionMsg();

  CMDeviceMotionMsg(const CMDeviceMotionMsg& from);
  CMDeviceMotionMsg(CMDeviceMotionMsg&& from) noexcept
    : CMDeviceMotionMsg() {
    *this = ::std::move(from);
  }

  inline CMDeviceMotionMsg& operator=(const CMDeviceMotionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMDeviceMotionMsg& operator=(CMDeviceMotionMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMDeviceMotionMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMDeviceMotionMsg* internal_default_instance() {
    return reinterpret_cast<const CMDeviceMotionMsg*>(
               &_CMDeviceMotionMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMDeviceMotionMsg& a, CMDeviceMotionMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMDeviceMotionMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMDeviceMotionMsg* New() const final {
    return CreateMaybeMessage<CMDeviceMotionMsg>(nullptr);
  }

  CMDeviceMotionMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMDeviceMotionMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMDeviceMotionMsg& from);
  void MergeFrom(const CMDeviceMotionMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMDeviceMotionMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.sc3d.CMDeviceMotionMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kRotationFieldNumber = 3,
    kGravityFieldNumber = 4,
    kAccelerationFieldNumber = 5,
    kMagneticFieldFieldNumber = 7,
    kAttitudeFieldNumber = 8,
    kMagneticFieldAccuracyFieldNumber = 6,
  };
  // string frame = 1;
  void clear_frame();
  const std::string& frame() const;
  void set_frame(const std::string& value);
  void set_frame(std::string&& value);
  void set_frame(const char* value);
  void set_frame(const char* value, size_t size);
  std::string* mutable_frame();
  std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:

  // .standard_cyborg.proto.math.Vec3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::standard_cyborg::proto::math::Vec3& rotation() const;
  ::standard_cyborg::proto::math::Vec3* release_rotation();
  ::standard_cyborg::proto::math::Vec3* mutable_rotation();
  void set_allocated_rotation(::standard_cyborg::proto::math::Vec3* rotation);
  private:
  const ::standard_cyborg::proto::math::Vec3& _internal_rotation() const;
  ::standard_cyborg::proto::math::Vec3* _internal_mutable_rotation();
  public:

  // .standard_cyborg.proto.math.Vec3 gravity = 4;
  bool has_gravity() const;
  private:
  bool _internal_has_gravity() const;
  public:
  void clear_gravity();
  const ::standard_cyborg::proto::math::Vec3& gravity() const;
  ::standard_cyborg::proto::math::Vec3* release_gravity();
  ::standard_cyborg::proto::math::Vec3* mutable_gravity();
  void set_allocated_gravity(::standard_cyborg::proto::math::Vec3* gravity);
  private:
  const ::standard_cyborg::proto::math::Vec3& _internal_gravity() const;
  ::standard_cyborg::proto::math::Vec3* _internal_mutable_gravity();
  public:

  // .standard_cyborg.proto.math.Vec3 acceleration = 5;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::standard_cyborg::proto::math::Vec3& acceleration() const;
  ::standard_cyborg::proto::math::Vec3* release_acceleration();
  ::standard_cyborg::proto::math::Vec3* mutable_acceleration();
  void set_allocated_acceleration(::standard_cyborg::proto::math::Vec3* acceleration);
  private:
  const ::standard_cyborg::proto::math::Vec3& _internal_acceleration() const;
  ::standard_cyborg::proto::math::Vec3* _internal_mutable_acceleration();
  public:

  // .standard_cyborg.proto.math.Vec3 magnetic_field = 7;
  bool has_magnetic_field() const;
  private:
  bool _internal_has_magnetic_field() const;
  public:
  void clear_magnetic_field();
  const ::standard_cyborg::proto::math::Vec3& magnetic_field() const;
  ::standard_cyborg::proto::math::Vec3* release_magnetic_field();
  ::standard_cyborg::proto::math::Vec3* mutable_magnetic_field();
  void set_allocated_magnetic_field(::standard_cyborg::proto::math::Vec3* magnetic_field);
  private:
  const ::standard_cyborg::proto::math::Vec3& _internal_magnetic_field() const;
  ::standard_cyborg::proto::math::Vec3* _internal_mutable_magnetic_field();
  public:

  // .standard_cyborg.proto.math.Quaternion attitude = 8;
  bool has_attitude() const;
  private:
  bool _internal_has_attitude() const;
  public:
  void clear_attitude();
  const ::standard_cyborg::proto::math::Quaternion& attitude() const;
  ::standard_cyborg::proto::math::Quaternion* release_attitude();
  ::standard_cyborg::proto::math::Quaternion* mutable_attitude();
  void set_allocated_attitude(::standard_cyborg::proto::math::Quaternion* attitude);
  private:
  const ::standard_cyborg::proto::math::Quaternion& _internal_attitude() const;
  ::standard_cyborg::proto::math::Quaternion* _internal_mutable_attitude();
  public:

  // double magnetic_field_accuracy = 6;
  void clear_magnetic_field_accuracy();
  double magnetic_field_accuracy() const;
  void set_magnetic_field_accuracy(double value);
  private:
  double _internal_magnetic_field_accuracy() const;
  void _internal_set_magnetic_field_accuracy(double value);
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::standard_cyborg::proto::math::Vec3* rotation_;
  ::standard_cyborg::proto::math::Vec3* gravity_;
  ::standard_cyborg::proto::math::Vec3* acceleration_;
  ::standard_cyborg::proto::math::Vec3* magnetic_field_;
  ::standard_cyborg::proto::math::Quaternion* attitude_;
  double magnetic_field_accuracy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMDeviceMotionMsg

// string frame = 1;
inline void CMDeviceMotionMsg::clear_frame() {
  frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CMDeviceMotionMsg::frame() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame)
  return _internal_frame();
}
inline void CMDeviceMotionMsg::set_frame(const std::string& value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame)
}
inline std::string* CMDeviceMotionMsg::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame)
  return _internal_mutable_frame();
}
inline const std::string& CMDeviceMotionMsg::_internal_frame() const {
  return frame_.GetNoArena();
}
inline void CMDeviceMotionMsg::_internal_set_frame(const std::string& value) {
  
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CMDeviceMotionMsg::set_frame(std::string&& value) {
  
  frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame)
}
inline void CMDeviceMotionMsg::set_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame)
}
inline void CMDeviceMotionMsg::set_frame(const char* value, size_t size) {
  
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame)
}
inline std::string* CMDeviceMotionMsg::_internal_mutable_frame() {
  
  return frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMDeviceMotionMsg::release_frame() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame)
  
  return frame_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceMotionMsg::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool CMDeviceMotionMsg::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool CMDeviceMotionMsg::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CMDeviceMotionMsg::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CMDeviceMotionMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.timestamp)
  return _internal_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CMDeviceMotionMsg::release_timestamp() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CMDeviceMotionMsg::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CMDeviceMotionMsg::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.timestamp)
  return _internal_mutable_timestamp();
}
inline void CMDeviceMotionMsg::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.timestamp)
}

// .standard_cyborg.proto.math.Vec3 rotation = 3;
inline bool CMDeviceMotionMsg::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool CMDeviceMotionMsg::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::standard_cyborg::proto::math::Vec3& CMDeviceMotionMsg::_internal_rotation() const {
  const ::standard_cyborg::proto::math::Vec3* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::Vec3*>(
      &::standard_cyborg::proto::math::_Vec3_default_instance_);
}
inline const ::standard_cyborg::proto::math::Vec3& CMDeviceMotionMsg::rotation() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.rotation)
  return _internal_rotation();
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::release_rotation() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.rotation)
  
  ::standard_cyborg::proto::math::Vec3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::Vec3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.rotation)
  return _internal_mutable_rotation();
}
inline void CMDeviceMotionMsg::set_allocated_rotation(::standard_cyborg::proto::math::Vec3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.rotation)
}

// .standard_cyborg.proto.math.Vec3 gravity = 4;
inline bool CMDeviceMotionMsg::_internal_has_gravity() const {
  return this != internal_default_instance() && gravity_ != nullptr;
}
inline bool CMDeviceMotionMsg::has_gravity() const {
  return _internal_has_gravity();
}
inline const ::standard_cyborg::proto::math::Vec3& CMDeviceMotionMsg::_internal_gravity() const {
  const ::standard_cyborg::proto::math::Vec3* p = gravity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::Vec3*>(
      &::standard_cyborg::proto::math::_Vec3_default_instance_);
}
inline const ::standard_cyborg::proto::math::Vec3& CMDeviceMotionMsg::gravity() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.gravity)
  return _internal_gravity();
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::release_gravity() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.gravity)
  
  ::standard_cyborg::proto::math::Vec3* temp = gravity_;
  gravity_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::_internal_mutable_gravity() {
  
  if (gravity_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::Vec3>(GetArenaNoVirtual());
    gravity_ = p;
  }
  return gravity_;
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::mutable_gravity() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.gravity)
  return _internal_mutable_gravity();
}
inline void CMDeviceMotionMsg::set_allocated_gravity(::standard_cyborg::proto::math::Vec3* gravity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gravity_);
  }
  if (gravity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gravity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gravity, submessage_arena);
    }
    
  } else {
    
  }
  gravity_ = gravity;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.gravity)
}

// .standard_cyborg.proto.math.Vec3 acceleration = 5;
inline bool CMDeviceMotionMsg::_internal_has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline bool CMDeviceMotionMsg::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::standard_cyborg::proto::math::Vec3& CMDeviceMotionMsg::_internal_acceleration() const {
  const ::standard_cyborg::proto::math::Vec3* p = acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::Vec3*>(
      &::standard_cyborg::proto::math::_Vec3_default_instance_);
}
inline const ::standard_cyborg::proto::math::Vec3& CMDeviceMotionMsg::acceleration() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.acceleration)
  return _internal_acceleration();
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::release_acceleration() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.acceleration)
  
  ::standard_cyborg::proto::math::Vec3* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::_internal_mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::Vec3>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  return acceleration_;
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.acceleration)
  return _internal_mutable_acceleration();
}
inline void CMDeviceMotionMsg::set_allocated_acceleration(::standard_cyborg::proto::math::Vec3* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.acceleration)
}

// double magnetic_field_accuracy = 6;
inline void CMDeviceMotionMsg::clear_magnetic_field_accuracy() {
  magnetic_field_accuracy_ = 0;
}
inline double CMDeviceMotionMsg::_internal_magnetic_field_accuracy() const {
  return magnetic_field_accuracy_;
}
inline double CMDeviceMotionMsg::magnetic_field_accuracy() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.magnetic_field_accuracy)
  return _internal_magnetic_field_accuracy();
}
inline void CMDeviceMotionMsg::_internal_set_magnetic_field_accuracy(double value) {
  
  magnetic_field_accuracy_ = value;
}
inline void CMDeviceMotionMsg::set_magnetic_field_accuracy(double value) {
  _internal_set_magnetic_field_accuracy(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.magnetic_field_accuracy)
}

// .standard_cyborg.proto.math.Vec3 magnetic_field = 7;
inline bool CMDeviceMotionMsg::_internal_has_magnetic_field() const {
  return this != internal_default_instance() && magnetic_field_ != nullptr;
}
inline bool CMDeviceMotionMsg::has_magnetic_field() const {
  return _internal_has_magnetic_field();
}
inline const ::standard_cyborg::proto::math::Vec3& CMDeviceMotionMsg::_internal_magnetic_field() const {
  const ::standard_cyborg::proto::math::Vec3* p = magnetic_field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::Vec3*>(
      &::standard_cyborg::proto::math::_Vec3_default_instance_);
}
inline const ::standard_cyborg::proto::math::Vec3& CMDeviceMotionMsg::magnetic_field() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.magnetic_field)
  return _internal_magnetic_field();
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::release_magnetic_field() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.magnetic_field)
  
  ::standard_cyborg::proto::math::Vec3* temp = magnetic_field_;
  magnetic_field_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::_internal_mutable_magnetic_field() {
  
  if (magnetic_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::Vec3>(GetArenaNoVirtual());
    magnetic_field_ = p;
  }
  return magnetic_field_;
}
inline ::standard_cyborg::proto::math::Vec3* CMDeviceMotionMsg::mutable_magnetic_field() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.magnetic_field)
  return _internal_mutable_magnetic_field();
}
inline void CMDeviceMotionMsg::set_allocated_magnetic_field(::standard_cyborg::proto::math::Vec3* magnetic_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(magnetic_field_);
  }
  if (magnetic_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      magnetic_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, magnetic_field, submessage_arena);
    }
    
  } else {
    
  }
  magnetic_field_ = magnetic_field;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.magnetic_field)
}

// .standard_cyborg.proto.math.Quaternion attitude = 8;
inline bool CMDeviceMotionMsg::_internal_has_attitude() const {
  return this != internal_default_instance() && attitude_ != nullptr;
}
inline bool CMDeviceMotionMsg::has_attitude() const {
  return _internal_has_attitude();
}
inline const ::standard_cyborg::proto::math::Quaternion& CMDeviceMotionMsg::_internal_attitude() const {
  const ::standard_cyborg::proto::math::Quaternion* p = attitude_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::Quaternion*>(
      &::standard_cyborg::proto::math::_Quaternion_default_instance_);
}
inline const ::standard_cyborg::proto::math::Quaternion& CMDeviceMotionMsg::attitude() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.attitude)
  return _internal_attitude();
}
inline ::standard_cyborg::proto::math::Quaternion* CMDeviceMotionMsg::release_attitude() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.attitude)
  
  ::standard_cyborg::proto::math::Quaternion* temp = attitude_;
  attitude_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::Quaternion* CMDeviceMotionMsg::_internal_mutable_attitude() {
  
  if (attitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::Quaternion>(GetArenaNoVirtual());
    attitude_ = p;
  }
  return attitude_;
}
inline ::standard_cyborg::proto::math::Quaternion* CMDeviceMotionMsg::mutable_attitude() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.attitude)
  return _internal_mutable_attitude();
}
inline void CMDeviceMotionMsg::set_allocated_attitude(::standard_cyborg::proto::math::Quaternion* attitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attitude_);
  }
  if (attitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude, submessage_arena);
    }
    
  } else {
    
  }
  attitude_ = attitude;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.CMDeviceMotionMsg.attitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto
