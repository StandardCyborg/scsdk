// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/image.proto

#include "standard_cyborg/proto/sc3d/image.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tensor_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
static void InitDefaultsscc_info_Image_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::sc3d::_Image_default_instance_;
    new (ptr) ::standard_cyborg::proto::sc3d::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::sc3d::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Image_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Image_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto}, {
      &scc_info_Tensor_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::Image, frame_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::Image, pixels_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::Image, color_space_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::standard_cyborg::proto::sc3d::Image)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::sc3d::_Image_default_instance_),
};

const char descriptor_table_protodef_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&standard_cyborg/proto/sc3d/image.proto"
  "\022\032standard_cyborg.proto.sc3d\032\'standard_c"
  "yborg/proto/math/tensor.proto\"\371\001\n\005Image\022"
  "\r\n\005frame\030\001 \001(\t\0222\n\006pixels\030\002 \001(\0132\".standar"
  "d_cyborg.proto.math.Tensor\022A\n\013color_spac"
  "e\030\n \001(\0162,.standard_cyborg.proto.sc3d.Ima"
  "ge.ColorSpace\"j\n\nColorSpace\022\027\n\023COLOR_SPA"
  "CE_UNKNOWN\020\000\022\026\n\022COLOR_SPACE_LINEAR\020\001\022\024\n\020"
  "COLOR_SPACE_SRGB\020\002\022\025\n\021COLOR_SPACE_DEPTH\020"
  "db\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto_deps[1] = {
  &::descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto_sccs[1] = {
  &scc_info_Image_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto_once;
static bool descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto = {
  &descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto_initialized, descriptor_table_protodef_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto, "standard_cyborg/proto/sc3d/image.proto", 369,
  &descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto_once, descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto_sccs, descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto::offsets,
  file_level_metadata_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto, 1, file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto, file_level_service_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto), true);
namespace standard_cyborg {
namespace proto {
namespace sc3d {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Image_ColorSpace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto);
  return file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto[0];
}
bool Image_ColorSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Image_ColorSpace Image::COLOR_SPACE_UNKNOWN;
constexpr Image_ColorSpace Image::COLOR_SPACE_LINEAR;
constexpr Image_ColorSpace Image::COLOR_SPACE_SRGB;
constexpr Image_ColorSpace Image::COLOR_SPACE_DEPTH;
constexpr Image_ColorSpace Image::ColorSpace_MIN;
constexpr Image_ColorSpace Image::ColorSpace_MAX;
constexpr int Image::ColorSpace_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Image::InitAsDefaultInstance() {
  ::standard_cyborg::proto::sc3d::_Image_default_instance_._instance.get_mutable()->pixels_ = const_cast< ::standard_cyborg::proto::math::Tensor*>(
      ::standard_cyborg::proto::math::Tensor::internal_default_instance());
}
class Image::_Internal {
 public:
  static const ::standard_cyborg::proto::math::Tensor& pixels(const Image* msg);
};

const ::standard_cyborg::proto::math::Tensor&
Image::_Internal::pixels(const Image* msg) {
  return *msg->pixels_;
}
void Image::clear_pixels() {
  if (GetArenaNoVirtual() == nullptr && pixels_ != nullptr) {
    delete pixels_;
  }
  pixels_ = nullptr;
}
Image::Image()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.sc3d.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame().empty()) {
    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from._internal_has_pixels()) {
    pixels_ = new ::standard_cyborg::proto::math::Tensor(*from.pixels_);
  } else {
    pixels_ = nullptr;
  }
  color_space_ = from.color_space_;
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.sc3d.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto.base);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pixels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_space_) -
      reinterpret_cast<char*>(&pixels_)) + sizeof(color_space_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.sc3d.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pixels_;
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.sc3d.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pixels_ != nullptr) {
    delete pixels_;
  }
  pixels_ = nullptr;
  color_space_ = 0;
  _internal_metadata_.Clear();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "standard_cyborg.proto.sc3d.Image.frame"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Tensor pixels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pixels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.Image.ColorSpace color_space = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_color_space(static_cast<::standard_cyborg::proto::sc3d::Image_ColorSpace>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.sc3d.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string frame = 1;
  if (this->frame().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame().data(), static_cast<int>(this->_internal_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "standard_cyborg.proto.sc3d.Image.frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame(), target);
  }

  // .standard_cyborg.proto.math.Tensor pixels = 2;
  if (this->has_pixels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pixels(this), target, stream);
  }

  // .standard_cyborg.proto.sc3d.Image.ColorSpace color_space = 10;
  if (this->color_space() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_color_space(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.sc3d.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.sc3d.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame = 1;
  if (this->frame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame());
  }

  // .standard_cyborg.proto.math.Tensor pixels = 2;
  if (this->has_pixels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pixels_);
  }

  // .standard_cyborg.proto.sc3d.Image.ColorSpace color_space = 10;
  if (this->color_space() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color_space());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.sc3d.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.sc3d.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.sc3d.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.sc3d.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame().size() > 0) {

    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from.has_pixels()) {
    _internal_mutable_pixels()->::standard_cyborg::proto::math::Tensor::MergeFrom(from._internal_pixels());
  }
  if (from.color_space() != 0) {
    _internal_set_color_space(from._internal_color_space());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.sc3d.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.sc3d.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frame_.Swap(&other->frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pixels_, other->pixels_);
  swap(color_space_, other->color_space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::sc3d::Image* Arena::CreateMaybeMessage< ::standard_cyborg::proto::sc3d::Image >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::sc3d::Image >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
