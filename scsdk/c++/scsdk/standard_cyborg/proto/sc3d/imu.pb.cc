// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/imu.proto

#include "standard_cyborg/proto/sc3d/imu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class CMDeviceMotionMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMDeviceMotionMsg> _instance;
} _CMDeviceMotionMsg_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
static void InitDefaultsscc_info_CMDeviceMotionMsg_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::sc3d::_CMDeviceMotionMsg_default_instance_;
    new (ptr) ::standard_cyborg::proto::sc3d::CMDeviceMotionMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::sc3d::CMDeviceMotionMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CMDeviceMotionMsg_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CMDeviceMotionMsg_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Vec3_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto.base,
      &scc_info_Quaternion_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, frame_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, timestamp_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, rotation_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, gravity_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, acceleration_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, magnetic_field_accuracy_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, magnetic_field_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg, attitude_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::standard_cyborg::proto::sc3d::CMDeviceMotionMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::sc3d::_CMDeviceMotionMsg_default_instance_),
};

const char descriptor_table_protodef_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$standard_cyborg/proto/sc3d/imu.proto\022\032"
  "standard_cyborg.proto.sc3d\032\037google/proto"
  "buf/timestamp.proto\032%standard_cyborg/pro"
  "to/math/core.proto\"\205\003\n\021CMDeviceMotionMsg"
  "\022\r\n\005frame\030\001 \001(\t\022-\n\ttimestamp\030\002 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\0222\n\010rotation\030\003 \001(\013"
  "2 .standard_cyborg.proto.math.Vec3\0221\n\007gr"
  "avity\030\004 \001(\0132 .standard_cyborg.proto.math"
  ".Vec3\0226\n\014acceleration\030\005 \001(\0132 .standard_c"
  "yborg.proto.math.Vec3\022\037\n\027magnetic_field_"
  "accuracy\030\006 \001(\001\0228\n\016magnetic_field\030\007 \001(\0132 "
  ".standard_cyborg.proto.math.Vec3\0228\n\010atti"
  "tude\030\010 \001(\0132&.standard_cyborg.proto.math."
  "Quaternionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto_sccs[1] = {
  &scc_info_CMDeviceMotionMsg_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto_once;
static bool descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto = {
  &descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto_initialized, descriptor_table_protodef_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto, "standard_cyborg/proto/sc3d/imu.proto", 538,
  &descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto_once, descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto_sccs, descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto::offsets,
  file_level_metadata_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto, 1, file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto, file_level_service_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto), true);
namespace standard_cyborg {
namespace proto {
namespace sc3d {

// ===================================================================

void CMDeviceMotionMsg::InitAsDefaultInstance() {
  ::standard_cyborg::proto::sc3d::_CMDeviceMotionMsg_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::standard_cyborg::proto::sc3d::_CMDeviceMotionMsg_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::standard_cyborg::proto::math::Vec3*>(
      ::standard_cyborg::proto::math::Vec3::internal_default_instance());
  ::standard_cyborg::proto::sc3d::_CMDeviceMotionMsg_default_instance_._instance.get_mutable()->gravity_ = const_cast< ::standard_cyborg::proto::math::Vec3*>(
      ::standard_cyborg::proto::math::Vec3::internal_default_instance());
  ::standard_cyborg::proto::sc3d::_CMDeviceMotionMsg_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::standard_cyborg::proto::math::Vec3*>(
      ::standard_cyborg::proto::math::Vec3::internal_default_instance());
  ::standard_cyborg::proto::sc3d::_CMDeviceMotionMsg_default_instance_._instance.get_mutable()->magnetic_field_ = const_cast< ::standard_cyborg::proto::math::Vec3*>(
      ::standard_cyborg::proto::math::Vec3::internal_default_instance());
  ::standard_cyborg::proto::sc3d::_CMDeviceMotionMsg_default_instance_._instance.get_mutable()->attitude_ = const_cast< ::standard_cyborg::proto::math::Quaternion*>(
      ::standard_cyborg::proto::math::Quaternion::internal_default_instance());
}
class CMDeviceMotionMsg::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CMDeviceMotionMsg* msg);
  static const ::standard_cyborg::proto::math::Vec3& rotation(const CMDeviceMotionMsg* msg);
  static const ::standard_cyborg::proto::math::Vec3& gravity(const CMDeviceMotionMsg* msg);
  static const ::standard_cyborg::proto::math::Vec3& acceleration(const CMDeviceMotionMsg* msg);
  static const ::standard_cyborg::proto::math::Vec3& magnetic_field(const CMDeviceMotionMsg* msg);
  static const ::standard_cyborg::proto::math::Quaternion& attitude(const CMDeviceMotionMsg* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CMDeviceMotionMsg::_Internal::timestamp(const CMDeviceMotionMsg* msg) {
  return *msg->timestamp_;
}
const ::standard_cyborg::proto::math::Vec3&
CMDeviceMotionMsg::_Internal::rotation(const CMDeviceMotionMsg* msg) {
  return *msg->rotation_;
}
const ::standard_cyborg::proto::math::Vec3&
CMDeviceMotionMsg::_Internal::gravity(const CMDeviceMotionMsg* msg) {
  return *msg->gravity_;
}
const ::standard_cyborg::proto::math::Vec3&
CMDeviceMotionMsg::_Internal::acceleration(const CMDeviceMotionMsg* msg) {
  return *msg->acceleration_;
}
const ::standard_cyborg::proto::math::Vec3&
CMDeviceMotionMsg::_Internal::magnetic_field(const CMDeviceMotionMsg* msg) {
  return *msg->magnetic_field_;
}
const ::standard_cyborg::proto::math::Quaternion&
CMDeviceMotionMsg::_Internal::attitude(const CMDeviceMotionMsg* msg) {
  return *msg->attitude_;
}
void CMDeviceMotionMsg::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void CMDeviceMotionMsg::clear_rotation() {
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
void CMDeviceMotionMsg::clear_gravity() {
  if (GetArenaNoVirtual() == nullptr && gravity_ != nullptr) {
    delete gravity_;
  }
  gravity_ = nullptr;
}
void CMDeviceMotionMsg::clear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
void CMDeviceMotionMsg::clear_magnetic_field() {
  if (GetArenaNoVirtual() == nullptr && magnetic_field_ != nullptr) {
    delete magnetic_field_;
  }
  magnetic_field_ = nullptr;
}
void CMDeviceMotionMsg::clear_attitude() {
  if (GetArenaNoVirtual() == nullptr && attitude_ != nullptr) {
    delete attitude_;
  }
  attitude_ = nullptr;
}
CMDeviceMotionMsg::CMDeviceMotionMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
}
CMDeviceMotionMsg::CMDeviceMotionMsg(const CMDeviceMotionMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame().empty()) {
    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::standard_cyborg::proto::math::Vec3(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_gravity()) {
    gravity_ = new ::standard_cyborg::proto::math::Vec3(*from.gravity_);
  } else {
    gravity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::standard_cyborg::proto::math::Vec3(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_magnetic_field()) {
    magnetic_field_ = new ::standard_cyborg::proto::math::Vec3(*from.magnetic_field_);
  } else {
    magnetic_field_ = nullptr;
  }
  if (from._internal_has_attitude()) {
    attitude_ = new ::standard_cyborg::proto::math::Quaternion(*from.attitude_);
  } else {
    attitude_ = nullptr;
  }
  magnetic_field_accuracy_ = from.magnetic_field_accuracy_;
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
}

void CMDeviceMotionMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMDeviceMotionMsg_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto.base);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magnetic_field_accuracy_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(magnetic_field_accuracy_));
}

CMDeviceMotionMsg::~CMDeviceMotionMsg() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  SharedDtor();
}

void CMDeviceMotionMsg::SharedDtor() {
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete gravity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete magnetic_field_;
  if (this != internal_default_instance()) delete attitude_;
}

void CMDeviceMotionMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMDeviceMotionMsg& CMDeviceMotionMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMDeviceMotionMsg_standard_5fcyborg_2fproto_2fsc3d_2fimu_2eproto.base);
  return *internal_default_instance();
}


void CMDeviceMotionMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gravity_ != nullptr) {
    delete gravity_;
  }
  gravity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && magnetic_field_ != nullptr) {
    delete magnetic_field_;
  }
  magnetic_field_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attitude_ != nullptr) {
    delete attitude_;
  }
  attitude_ = nullptr;
  magnetic_field_accuracy_ = 0;
  _internal_metadata_.Clear();
}

const char* CMDeviceMotionMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Vec3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Vec3 gravity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gravity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Vec3 acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double magnetic_field_accuracy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          magnetic_field_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Vec3 magnetic_field = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnetic_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Quaternion attitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMDeviceMotionMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string frame = 1;
  if (this->frame().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame().data(), static_cast<int>(this->_internal_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "standard_cyborg.proto.sc3d.CMDeviceMotionMsg.frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // .standard_cyborg.proto.math.Vec3 rotation = 3;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rotation(this), target, stream);
  }

  // .standard_cyborg.proto.math.Vec3 gravity = 4;
  if (this->has_gravity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gravity(this), target, stream);
  }

  // .standard_cyborg.proto.math.Vec3 acceleration = 5;
  if (this->has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::acceleration(this), target, stream);
  }

  // double magnetic_field_accuracy = 6;
  if (!(this->magnetic_field_accuracy() <= 0 && this->magnetic_field_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_magnetic_field_accuracy(), target);
  }

  // .standard_cyborg.proto.math.Vec3 magnetic_field = 7;
  if (this->has_magnetic_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::magnetic_field(this), target, stream);
  }

  // .standard_cyborg.proto.math.Quaternion attitude = 8;
  if (this->has_attitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::attitude(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  return target;
}

size_t CMDeviceMotionMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame = 1;
  if (this->frame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .standard_cyborg.proto.math.Vec3 rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  // .standard_cyborg.proto.math.Vec3 gravity = 4;
  if (this->has_gravity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gravity_);
  }

  // .standard_cyborg.proto.math.Vec3 acceleration = 5;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .standard_cyborg.proto.math.Vec3 magnetic_field = 7;
  if (this->has_magnetic_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *magnetic_field_);
  }

  // .standard_cyborg.proto.math.Quaternion attitude = 8;
  if (this->has_attitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_);
  }

  // double magnetic_field_accuracy = 6;
  if (!(this->magnetic_field_accuracy() <= 0 && this->magnetic_field_accuracy() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMDeviceMotionMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMDeviceMotionMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMDeviceMotionMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
    MergeFrom(*source);
  }
}

void CMDeviceMotionMsg::MergeFrom(const CMDeviceMotionMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame().size() > 0) {

    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::standard_cyborg::proto::math::Vec3::MergeFrom(from._internal_rotation());
  }
  if (from.has_gravity()) {
    _internal_mutable_gravity()->::standard_cyborg::proto::math::Vec3::MergeFrom(from._internal_gravity());
  }
  if (from.has_acceleration()) {
    _internal_mutable_acceleration()->::standard_cyborg::proto::math::Vec3::MergeFrom(from._internal_acceleration());
  }
  if (from.has_magnetic_field()) {
    _internal_mutable_magnetic_field()->::standard_cyborg::proto::math::Vec3::MergeFrom(from._internal_magnetic_field());
  }
  if (from.has_attitude()) {
    _internal_mutable_attitude()->::standard_cyborg::proto::math::Quaternion::MergeFrom(from._internal_attitude());
  }
  if (!(from.magnetic_field_accuracy() <= 0 && from.magnetic_field_accuracy() >= 0)) {
    _internal_set_magnetic_field_accuracy(from._internal_magnetic_field_accuracy());
  }
}

void CMDeviceMotionMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMDeviceMotionMsg::CopyFrom(const CMDeviceMotionMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.sc3d.CMDeviceMotionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMDeviceMotionMsg::IsInitialized() const {
  return true;
}

void CMDeviceMotionMsg::InternalSwap(CMDeviceMotionMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frame_.Swap(&other->frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(rotation_, other->rotation_);
  swap(gravity_, other->gravity_);
  swap(acceleration_, other->acceleration_);
  swap(magnetic_field_, other->magnetic_field_);
  swap(attitude_, other->attitude_);
  swap(magnetic_field_accuracy_, other->magnetic_field_accuracy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMDeviceMotionMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::sc3d::CMDeviceMotionMsg* Arena::CreateMaybeMessage< ::standard_cyborg::proto::sc3d::CMDeviceMotionMsg >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::sc3d::CMDeviceMotionMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
