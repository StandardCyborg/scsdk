// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "standard_cyborg/proto/math/tensor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> ::standard_cyborg::proto::sc3d::Image* Arena::CreateMaybeMessage<::standard_cyborg::proto::sc3d::Image>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace standard_cyborg {
namespace proto {
namespace sc3d {

enum Image_ColorSpace : int {
  Image_ColorSpace_COLOR_SPACE_UNKNOWN = 0,
  Image_ColorSpace_COLOR_SPACE_LINEAR = 1,
  Image_ColorSpace_COLOR_SPACE_SRGB = 2,
  Image_ColorSpace_COLOR_SPACE_DEPTH = 100,
  Image_ColorSpace_Image_ColorSpace_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Image_ColorSpace_Image_ColorSpace_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Image_ColorSpace_IsValid(int value);
constexpr Image_ColorSpace Image_ColorSpace_ColorSpace_MIN = Image_ColorSpace_COLOR_SPACE_UNKNOWN;
constexpr Image_ColorSpace Image_ColorSpace_ColorSpace_MAX = Image_ColorSpace_COLOR_SPACE_DEPTH;
constexpr int Image_ColorSpace_ColorSpace_ARRAYSIZE = Image_ColorSpace_ColorSpace_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Image_ColorSpace_descriptor();
template<typename T>
inline const std::string& Image_ColorSpace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Image_ColorSpace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Image_ColorSpace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Image_ColorSpace_descriptor(), enum_t_value);
}
inline bool Image_ColorSpace_Parse(
    const std::string& name, Image_ColorSpace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Image_ColorSpace>(
    Image_ColorSpace_descriptor(), name, value);
}
// ===================================================================

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.sc3d.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.sc3d.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Image_ColorSpace ColorSpace;
  static constexpr ColorSpace COLOR_SPACE_UNKNOWN =
    Image_ColorSpace_COLOR_SPACE_UNKNOWN;
  static constexpr ColorSpace COLOR_SPACE_LINEAR =
    Image_ColorSpace_COLOR_SPACE_LINEAR;
  static constexpr ColorSpace COLOR_SPACE_SRGB =
    Image_ColorSpace_COLOR_SPACE_SRGB;
  static constexpr ColorSpace COLOR_SPACE_DEPTH =
    Image_ColorSpace_COLOR_SPACE_DEPTH;
  static inline bool ColorSpace_IsValid(int value) {
    return Image_ColorSpace_IsValid(value);
  }
  static constexpr ColorSpace ColorSpace_MIN =
    Image_ColorSpace_ColorSpace_MIN;
  static constexpr ColorSpace ColorSpace_MAX =
    Image_ColorSpace_ColorSpace_MAX;
  static constexpr int ColorSpace_ARRAYSIZE =
    Image_ColorSpace_ColorSpace_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ColorSpace_descriptor() {
    return Image_ColorSpace_descriptor();
  }
  template<typename T>
  static inline const std::string& ColorSpace_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColorSpace>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColorSpace_Name.");
    return Image_ColorSpace_Name(enum_t_value);
  }
  static inline bool ColorSpace_Parse(const std::string& name,
      ColorSpace* value) {
    return Image_ColorSpace_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
    kPixelsFieldNumber = 2,
    kColorSpaceFieldNumber = 10,
  };
  // string frame = 1;
  void clear_frame();
  const std::string& frame() const;
  void set_frame(const std::string& value);
  void set_frame(std::string&& value);
  void set_frame(const char* value);
  void set_frame(const char* value, size_t size);
  std::string* mutable_frame();
  std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // .standard_cyborg.proto.math.Tensor pixels = 2;
  bool has_pixels() const;
  private:
  bool _internal_has_pixels() const;
  public:
  void clear_pixels();
  const ::standard_cyborg::proto::math::Tensor& pixels() const;
  ::standard_cyborg::proto::math::Tensor* release_pixels();
  ::standard_cyborg::proto::math::Tensor* mutable_pixels();
  void set_allocated_pixels(::standard_cyborg::proto::math::Tensor* pixels);
  private:
  const ::standard_cyborg::proto::math::Tensor& _internal_pixels() const;
  ::standard_cyborg::proto::math::Tensor* _internal_mutable_pixels();
  public:

  // .standard_cyborg.proto.sc3d.Image.ColorSpace color_space = 10;
  void clear_color_space();
  ::standard_cyborg::proto::sc3d::Image_ColorSpace color_space() const;
  void set_color_space(::standard_cyborg::proto::sc3d::Image_ColorSpace value);
  private:
  ::standard_cyborg::proto::sc3d::Image_ColorSpace _internal_color_space() const;
  void _internal_set_color_space(::standard_cyborg::proto::sc3d::Image_ColorSpace value);
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.sc3d.Image)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::standard_cyborg::proto::math::Tensor* pixels_;
  int color_space_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// string frame = 1;
inline void Image::clear_frame() {
  frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::frame() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.Image.frame)
  return _internal_frame();
}
inline void Image::set_frame(const std::string& value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.Image.frame)
}
inline std::string* Image::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.Image.frame)
  return _internal_mutable_frame();
}
inline const std::string& Image::_internal_frame() const {
  return frame_.GetNoArena();
}
inline void Image::_internal_set_frame(const std::string& value) {
  
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_frame(std::string&& value) {
  
  frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.sc3d.Image.frame)
}
inline void Image::set_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.sc3d.Image.frame)
}
inline void Image::set_frame(const char* value, size_t size) {
  
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.sc3d.Image.frame)
}
inline std::string* Image::_internal_mutable_frame() {
  
  return frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_frame() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.Image.frame)
  
  return frame_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.Image.frame)
}

// .standard_cyborg.proto.math.Tensor pixels = 2;
inline bool Image::_internal_has_pixels() const {
  return this != internal_default_instance() && pixels_ != nullptr;
}
inline bool Image::has_pixels() const {
  return _internal_has_pixels();
}
inline const ::standard_cyborg::proto::math::Tensor& Image::_internal_pixels() const {
  const ::standard_cyborg::proto::math::Tensor* p = pixels_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::Tensor*>(
      &::standard_cyborg::proto::math::_Tensor_default_instance_);
}
inline const ::standard_cyborg::proto::math::Tensor& Image::pixels() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.Image.pixels)
  return _internal_pixels();
}
inline ::standard_cyborg::proto::math::Tensor* Image::release_pixels() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.sc3d.Image.pixels)
  
  ::standard_cyborg::proto::math::Tensor* temp = pixels_;
  pixels_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::Tensor* Image::_internal_mutable_pixels() {
  
  if (pixels_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::Tensor>(GetArenaNoVirtual());
    pixels_ = p;
  }
  return pixels_;
}
inline ::standard_cyborg::proto::math::Tensor* Image::mutable_pixels() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.sc3d.Image.pixels)
  return _internal_mutable_pixels();
}
inline void Image::set_allocated_pixels(::standard_cyborg::proto::math::Tensor* pixels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pixels_);
  }
  if (pixels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pixels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pixels, submessage_arena);
    }
    
  } else {
    
  }
  pixels_ = pixels;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.sc3d.Image.pixels)
}

// .standard_cyborg.proto.sc3d.Image.ColorSpace color_space = 10;
inline void Image::clear_color_space() {
  color_space_ = 0;
}
inline ::standard_cyborg::proto::sc3d::Image_ColorSpace Image::_internal_color_space() const {
  return static_cast< ::standard_cyborg::proto::sc3d::Image_ColorSpace >(color_space_);
}
inline ::standard_cyborg::proto::sc3d::Image_ColorSpace Image::color_space() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.sc3d.Image.color_space)
  return _internal_color_space();
}
inline void Image::_internal_set_color_space(::standard_cyborg::proto::sc3d::Image_ColorSpace value) {
  
  color_space_ = value;
}
inline void Image::set_color_space(::standard_cyborg::proto::sc3d::Image_ColorSpace value) {
  _internal_set_color_space(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.sc3d.Image.color_space)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::standard_cyborg::proto::sc3d::Image_ColorSpace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::standard_cyborg::proto::sc3d::Image_ColorSpace>() {
  return ::standard_cyborg::proto::sc3d::Image_ColorSpace_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto
