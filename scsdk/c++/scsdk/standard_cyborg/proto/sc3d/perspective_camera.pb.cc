// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/sc3d/perspective_camera.proto

#include "standard_cyborg/proto/sc3d/perspective_camera.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2ftransform_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_standard_5fcyborg_2fproto_2fmath_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto;
namespace standard_cyborg {
namespace proto {
namespace sc3d {
class PinholeCameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PinholeCamera> _instance;
} _PinholeCamera_default_instance_;
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
static void InitDefaultsscc_info_PinholeCamera_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::sc3d::_PinholeCamera_default_instance_;
    new (ptr) ::standard_cyborg::proto::sc3d::PinholeCamera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::sc3d::PinholeCamera::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PinholeCamera_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PinholeCamera_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto}, {
      &scc_info_Vec2_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto.base,
      &scc_info_Transform_standard_5fcyborg_2fproto_2fmath_2ftransform_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, frame_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, focal_length_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, principal_point_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, sensor_skew_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, image_height_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, image_width_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, sensor_transform_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, pixel_pitch_width_mm_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, pixel_pitch_height_mm_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::sc3d::PinholeCamera, radial_distortion_coefficients_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::standard_cyborg::proto::sc3d::PinholeCamera)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::sc3d::_PinholeCamera_default_instance_),
};

const char descriptor_table_protodef_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3standard_cyborg/proto/sc3d/perspective"
  "_camera.proto\022\032standard_cyborg.proto.sc3"
  "d\032%standard_cyborg/proto/math/core.proto"
  "\032*standard_cyborg/proto/math/transform.p"
  "roto\"\367\002\n\rPinholeCamera\022\r\n\005frame\030\001 \001(\t\0226\n"
  "\014focal_length\030\n \001(\0132 .standard_cyborg.pr"
  "oto.math.Vec2\0229\n\017principal_point\030\013 \001(\0132 "
  ".standard_cyborg.proto.math.Vec2\022\023\n\013sens"
  "or_skew\030\014 \001(\002\022\024\n\014image_height\030\r \001(\003\022\023\n\013i"
  "mage_width\030\016 \001(\003\022\?\n\020sensor_transform\030\024 \001"
  "(\0132%.standard_cyborg.proto.math.Transfor"
  "m\022\034\n\024pixel_pitch_width_mm\030\036 \001(\001\022\035\n\025pixel"
  "_pitch_height_mm\030\037 \001(\001\022&\n\036radial_distort"
  "ion_coefficients\030  \003(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto_deps[2] = {
  &::descriptor_table_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftransform_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto_sccs[1] = {
  &scc_info_PinholeCamera_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto_once;
static bool descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto = {
  &descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto_initialized, descriptor_table_protodef_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto, "standard_cyborg/proto/sc3d/perspective_camera.proto", 550,
  &descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto_once, descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto_sccs, descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto::offsets,
  file_level_metadata_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto, 1, file_level_enum_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto, file_level_service_descriptors_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto), true);
namespace standard_cyborg {
namespace proto {
namespace sc3d {

// ===================================================================

void PinholeCamera::InitAsDefaultInstance() {
  ::standard_cyborg::proto::sc3d::_PinholeCamera_default_instance_._instance.get_mutable()->focal_length_ = const_cast< ::standard_cyborg::proto::math::Vec2*>(
      ::standard_cyborg::proto::math::Vec2::internal_default_instance());
  ::standard_cyborg::proto::sc3d::_PinholeCamera_default_instance_._instance.get_mutable()->principal_point_ = const_cast< ::standard_cyborg::proto::math::Vec2*>(
      ::standard_cyborg::proto::math::Vec2::internal_default_instance());
  ::standard_cyborg::proto::sc3d::_PinholeCamera_default_instance_._instance.get_mutable()->sensor_transform_ = const_cast< ::standard_cyborg::proto::math::Transform*>(
      ::standard_cyborg::proto::math::Transform::internal_default_instance());
}
class PinholeCamera::_Internal {
 public:
  static const ::standard_cyborg::proto::math::Vec2& focal_length(const PinholeCamera* msg);
  static const ::standard_cyborg::proto::math::Vec2& principal_point(const PinholeCamera* msg);
  static const ::standard_cyborg::proto::math::Transform& sensor_transform(const PinholeCamera* msg);
};

const ::standard_cyborg::proto::math::Vec2&
PinholeCamera::_Internal::focal_length(const PinholeCamera* msg) {
  return *msg->focal_length_;
}
const ::standard_cyborg::proto::math::Vec2&
PinholeCamera::_Internal::principal_point(const PinholeCamera* msg) {
  return *msg->principal_point_;
}
const ::standard_cyborg::proto::math::Transform&
PinholeCamera::_Internal::sensor_transform(const PinholeCamera* msg) {
  return *msg->sensor_transform_;
}
void PinholeCamera::clear_focal_length() {
  if (GetArenaNoVirtual() == nullptr && focal_length_ != nullptr) {
    delete focal_length_;
  }
  focal_length_ = nullptr;
}
void PinholeCamera::clear_principal_point() {
  if (GetArenaNoVirtual() == nullptr && principal_point_ != nullptr) {
    delete principal_point_;
  }
  principal_point_ = nullptr;
}
void PinholeCamera::clear_sensor_transform() {
  if (GetArenaNoVirtual() == nullptr && sensor_transform_ != nullptr) {
    delete sensor_transform_;
  }
  sensor_transform_ = nullptr;
}
PinholeCamera::PinholeCamera()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.sc3d.PinholeCamera)
}
PinholeCamera::PinholeCamera(const PinholeCamera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      radial_distortion_coefficients_(from.radial_distortion_coefficients_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame().empty()) {
    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from._internal_has_focal_length()) {
    focal_length_ = new ::standard_cyborg::proto::math::Vec2(*from.focal_length_);
  } else {
    focal_length_ = nullptr;
  }
  if (from._internal_has_principal_point()) {
    principal_point_ = new ::standard_cyborg::proto::math::Vec2(*from.principal_point_);
  } else {
    principal_point_ = nullptr;
  }
  if (from._internal_has_sensor_transform()) {
    sensor_transform_ = new ::standard_cyborg::proto::math::Transform(*from.sensor_transform_);
  } else {
    sensor_transform_ = nullptr;
  }
  ::memcpy(&sensor_skew_, &from.sensor_skew_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_pitch_height_mm_) -
    reinterpret_cast<char*>(&sensor_skew_)) + sizeof(pixel_pitch_height_mm_));
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.sc3d.PinholeCamera)
}

void PinholeCamera::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PinholeCamera_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto.base);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&focal_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_pitch_height_mm_) -
      reinterpret_cast<char*>(&focal_length_)) + sizeof(pixel_pitch_height_mm_));
}

PinholeCamera::~PinholeCamera() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.sc3d.PinholeCamera)
  SharedDtor();
}

void PinholeCamera::SharedDtor() {
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete focal_length_;
  if (this != internal_default_instance()) delete principal_point_;
  if (this != internal_default_instance()) delete sensor_transform_;
}

void PinholeCamera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PinholeCamera& PinholeCamera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PinholeCamera_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void PinholeCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.sc3d.PinholeCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radial_distortion_coefficients_.Clear();
  frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && focal_length_ != nullptr) {
    delete focal_length_;
  }
  focal_length_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && principal_point_ != nullptr) {
    delete principal_point_;
  }
  principal_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensor_transform_ != nullptr) {
    delete sensor_transform_;
  }
  sensor_transform_ = nullptr;
  ::memset(&sensor_skew_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_pitch_height_mm_) -
      reinterpret_cast<char*>(&sensor_skew_)) + sizeof(pixel_pitch_height_mm_));
  _internal_metadata_.Clear();
}

const char* PinholeCamera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "standard_cyborg.proto.sc3d.PinholeCamera.frame"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Vec2 focal_length = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_focal_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Vec2 principal_point = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_principal_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sensor_skew = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          sensor_skew_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 image_height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 image_width = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Transform sensor_transform = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pixel_pitch_width_mm = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          pixel_pitch_width_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pixel_pitch_height_mm = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          pixel_pitch_height_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float radial_distortion_coefficients = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_radial_distortion_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5) {
          _internal_add_radial_distortion_coefficients(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PinholeCamera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.sc3d.PinholeCamera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string frame = 1;
  if (this->frame().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame().data(), static_cast<int>(this->_internal_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "standard_cyborg.proto.sc3d.PinholeCamera.frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame(), target);
  }

  // .standard_cyborg.proto.math.Vec2 focal_length = 10;
  if (this->has_focal_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::focal_length(this), target, stream);
  }

  // .standard_cyborg.proto.math.Vec2 principal_point = 11;
  if (this->has_principal_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::principal_point(this), target, stream);
  }

  // float sensor_skew = 12;
  if (!(this->sensor_skew() <= 0 && this->sensor_skew() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_sensor_skew(), target);
  }

  // int64 image_height = 13;
  if (this->image_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_image_height(), target);
  }

  // int64 image_width = 14;
  if (this->image_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_image_width(), target);
  }

  // .standard_cyborg.proto.math.Transform sensor_transform = 20;
  if (this->has_sensor_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::sensor_transform(this), target, stream);
  }

  // double pixel_pitch_width_mm = 30;
  if (!(this->pixel_pitch_width_mm() <= 0 && this->pixel_pitch_width_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_pixel_pitch_width_mm(), target);
  }

  // double pixel_pitch_height_mm = 31;
  if (!(this->pixel_pitch_height_mm() <= 0 && this->pixel_pitch_height_mm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_pixel_pitch_height_mm(), target);
  }

  // repeated float radial_distortion_coefficients = 32;
  if (this->_internal_radial_distortion_coefficients_size() > 0) {
    target = stream->WriteFixedPacked(32, _internal_radial_distortion_coefficients(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.sc3d.PinholeCamera)
  return target;
}

size_t PinholeCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.sc3d.PinholeCamera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float radial_distortion_coefficients = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_radial_distortion_coefficients_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _radial_distortion_coefficients_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string frame = 1;
  if (this->frame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame());
  }

  // .standard_cyborg.proto.math.Vec2 focal_length = 10;
  if (this->has_focal_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *focal_length_);
  }

  // .standard_cyborg.proto.math.Vec2 principal_point = 11;
  if (this->has_principal_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *principal_point_);
  }

  // .standard_cyborg.proto.math.Transform sensor_transform = 20;
  if (this->has_sensor_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_transform_);
  }

  // float sensor_skew = 12;
  if (!(this->sensor_skew() <= 0 && this->sensor_skew() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 image_height = 13;
  if (this->image_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_image_height());
  }

  // int64 image_width = 14;
  if (this->image_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_image_width());
  }

  // double pixel_pitch_width_mm = 30;
  if (!(this->pixel_pitch_width_mm() <= 0 && this->pixel_pitch_width_mm() >= 0)) {
    total_size += 2 + 8;
  }

  // double pixel_pitch_height_mm = 31;
  if (!(this->pixel_pitch_height_mm() <= 0 && this->pixel_pitch_height_mm() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinholeCamera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.sc3d.PinholeCamera)
  GOOGLE_DCHECK_NE(&from, this);
  const PinholeCamera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PinholeCamera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.sc3d.PinholeCamera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.sc3d.PinholeCamera)
    MergeFrom(*source);
  }
}

void PinholeCamera::MergeFrom(const PinholeCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.sc3d.PinholeCamera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radial_distortion_coefficients_.MergeFrom(from.radial_distortion_coefficients_);
  if (from.frame().size() > 0) {

    frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from.has_focal_length()) {
    _internal_mutable_focal_length()->::standard_cyborg::proto::math::Vec2::MergeFrom(from._internal_focal_length());
  }
  if (from.has_principal_point()) {
    _internal_mutable_principal_point()->::standard_cyborg::proto::math::Vec2::MergeFrom(from._internal_principal_point());
  }
  if (from.has_sensor_transform()) {
    _internal_mutable_sensor_transform()->::standard_cyborg::proto::math::Transform::MergeFrom(from._internal_sensor_transform());
  }
  if (!(from.sensor_skew() <= 0 && from.sensor_skew() >= 0)) {
    _internal_set_sensor_skew(from._internal_sensor_skew());
  }
  if (from.image_height() != 0) {
    _internal_set_image_height(from._internal_image_height());
  }
  if (from.image_width() != 0) {
    _internal_set_image_width(from._internal_image_width());
  }
  if (!(from.pixel_pitch_width_mm() <= 0 && from.pixel_pitch_width_mm() >= 0)) {
    _internal_set_pixel_pitch_width_mm(from._internal_pixel_pitch_width_mm());
  }
  if (!(from.pixel_pitch_height_mm() <= 0 && from.pixel_pitch_height_mm() >= 0)) {
    _internal_set_pixel_pitch_height_mm(from._internal_pixel_pitch_height_mm());
  }
}

void PinholeCamera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.sc3d.PinholeCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinholeCamera::CopyFrom(const PinholeCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.sc3d.PinholeCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinholeCamera::IsInitialized() const {
  return true;
}

void PinholeCamera::InternalSwap(PinholeCamera* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  radial_distortion_coefficients_.InternalSwap(&other->radial_distortion_coefficients_);
  frame_.Swap(&other->frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(focal_length_, other->focal_length_);
  swap(principal_point_, other->principal_point_);
  swap(sensor_transform_, other->sensor_transform_);
  swap(sensor_skew_, other->sensor_skew_);
  swap(image_height_, other->image_height_);
  swap(image_width_, other->image_width_);
  swap(pixel_pitch_width_mm_, other->pixel_pitch_width_mm_);
  swap(pixel_pitch_height_mm_, other->pixel_pitch_height_mm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PinholeCamera::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sc3d
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::sc3d::PinholeCamera* Arena::CreateMaybeMessage< ::standard_cyborg::proto::sc3d::PinholeCamera >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::sc3d::PinholeCamera >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
