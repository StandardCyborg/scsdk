// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/math/tensor.proto

#include "standard_cyborg/proto/math/tensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dimension_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorProperties_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto;
namespace standard_cyborg {
namespace proto {
namespace math {
class DimensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dimension> _instance;
} _Dimension_default_instance_;
class TensorPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorProperties> _instance;
} _TensorProperties_default_instance_;
class TensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tensor> _instance;
} _Tensor_default_instance_;
}  // namespace math
}  // namespace proto
}  // namespace standard_cyborg
static void InitDefaultsscc_info_Dimension_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::math::_Dimension_default_instance_;
    new (ptr) ::standard_cyborg::proto::math::Dimension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::math::Dimension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dimension_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dimension_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto}, {}};

static void InitDefaultsscc_info_Tensor_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::math::_Tensor_default_instance_;
    new (ptr) ::standard_cyborg::proto::math::Tensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::math::Tensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tensor_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tensor_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto}, {
      &scc_info_TensorProperties_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_TensorProperties_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::math::_TensorProperties_default_instance_;
    new (ptr) ::standard_cyborg::proto::math::TensorProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::math::TensorProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorProperties_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TensorProperties_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto}, {
      &scc_info_Dimension_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Dimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Dimension, size_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Dimension, name_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Dimension, field_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::TensorProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::TensorProperties, numeric_type_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::TensorProperties, shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, properties_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, uint32_values_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, uint64_values_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, int32_values_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, int64_values_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, float_values_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, double_values_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, uint8_bytes_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, uint32_little_endian_bytes_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, uint64_little_endian_bytes_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, int32_little_endian_bytes_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, int64_little_endian_bytes_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, float_ieee754_little_endian_bytes_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, double_ieee754_little_endian_bytes_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, jpeg_bytes_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::math::Tensor, png_bytes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::standard_cyborg::proto::math::Dimension)},
  { 8, -1, sizeof(::standard_cyborg::proto::math::TensorProperties)},
  { 15, -1, sizeof(::standard_cyborg::proto::math::Tensor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::math::_Dimension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::math::_TensorProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::math::_Tensor_default_instance_),
};

const char descriptor_table_protodef_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'standard_cyborg/proto/math/tensor.prot"
  "o\022\032standard_cyborg.proto.math\"<\n\tDimensi"
  "on\022\014\n\004size\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\023\n\013field_"
  "names\030\003 \003(\t\"\207\001\n\020TensorProperties\022=\n\014nume"
  "ric_type\030\001 \001(\0162\'.standard_cyborg.proto.m"
  "ath.NumericType\0224\n\005shape\030\003 \003(\0132%.standar"
  "d_cyborg.proto.math.Dimension\"\362\003\n\006Tensor"
  "\022@\n\nproperties\030\001 \001(\0132,.standard_cyborg.p"
  "roto.math.TensorProperties\022\025\n\ruint32_val"
  "ues\030\003 \003(\r\022\025\n\ruint64_values\030\004 \003(\004\022\024\n\014int3"
  "2_values\030\005 \003(\005\022\024\n\014int64_values\030\006 \003(\003\022\024\n\014"
  "float_values\030\007 \003(\002\022\025\n\rdouble_values\030\010 \003("
  "\001\022\023\n\013uint8_bytes\030\024 \001(\014\022\"\n\032uint32_little_"
  "endian_bytes\030\025 \001(\014\022\"\n\032uint64_little_endi"
  "an_bytes\030\026 \001(\014\022!\n\031int32_little_endian_by"
  "tes\030\027 \001(\014\022!\n\031int64_little_endian_bytes\030\030"
  " \001(\014\022)\n!float_ieee754_little_endian_byte"
  "s\030\031 \001(\014\022*\n\"double_ieee754_little_endian_"
  "bytes\030\032 \001(\014\022\022\n\njpeg_bytes\030\036 \001(\014\022\021\n\tpng_b"
  "ytes\030\037 \001(\014*\304\004\n\013NumericType\022\030\n\024NUMERIC_TY"
  "PE_UNKNOWN\020\000\022\026\n\022NUMERIC_TYPE_UINT8\020\002\022\027\n\023"
  "NUMERIC_TYPE_UINT32\020\003\022\027\n\023NUMERIC_TYPE_UI"
  "NT64\020\004\022\026\n\022NUMERIC_TYPE_INT32\020\005\022\026\n\022NUMERI"
  "C_TYPE_INT64\020\006\022\026\n\022NUMERIC_TYPE_FLOAT\020\007\022\027"
  "\n\023NUMERIC_TYPE_DOUBLE\020\010\022\034\n\030NUMERIC_TYPE_"
  "UINT8_BYTES\020\024\022+\n\'NUMERIC_TYPE_UINT32_LIT"
  "TLE_ENDIAN_BYTES\020\025\022+\n\'NUMERIC_TYPE_UINT6"
  "4_LITTLE_ENDIAN_BYTES\020\026\022*\n&NUMERIC_TYPE_"
  "INT32_LITTLE_ENDIAN_BYTES\020\027\022*\n&NUMERIC_T"
  "YPE_INT64_LITTLE_ENDIAN_BYTES\020\030\0222\n.NUMER"
  "IC_TYPE_FLOAT_IEEE754_LITTLE_ENDIAN_BYTE"
  "S\020\031\0223\n/NUMERIC_TYPE_DOUBLE_IEEE754_LITTL"
  "E_ENDIAN_BYTES\020\032\022\033\n\027NUMERIC_TYPE_JPEG_BY"
  "TES\020\036\022\032\n\026NUMERIC_TYPE_PNG_BYTES\020\037b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto_sccs[3] = {
  &scc_info_Dimension_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base,
  &scc_info_Tensor_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base,
  &scc_info_TensorProperties_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto_once;
static bool descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto = {
  &descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto_initialized, descriptor_table_protodef_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto, "standard_cyborg/proto/math/tensor.proto", 1361,
  &descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto_once, descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto_sccs, descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto::offsets,
  file_level_metadata_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto, 3, file_level_enum_descriptors_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto, file_level_service_descriptors_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto), true);
namespace standard_cyborg {
namespace proto {
namespace math {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NumericType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto);
  return file_level_enum_descriptors_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto[0];
}
bool NumericType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Dimension::InitAsDefaultInstance() {
}
class Dimension::_Internal {
 public:
};

Dimension::Dimension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.math.Dimension)
}
Dimension::Dimension(const Dimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      field_names_(from.field_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.math.Dimension)
}

void Dimension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dimension_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_ULONGLONG(0);
}

Dimension::~Dimension() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.math.Dimension)
  SharedDtor();
}

void Dimension::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Dimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dimension& Dimension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dimension_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base);
  return *internal_default_instance();
}


void Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.math.Dimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_names_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Dimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "standard_cyborg.proto.math.Dimension.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "standard_cyborg.proto.math.Dimension.field_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dimension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.math.Dimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "standard_cyborg.proto.math.Dimension.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string field_names = 3;
  for (int i = 0, n = this->_internal_field_names_size(); i < n; i++) {
    const auto& s = this->_internal_field_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "standard_cyborg.proto.math.Dimension.field_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.math.Dimension)
  return target;
}

size_t Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.math.Dimension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_names_.size());
  for (int i = 0, n = field_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_names_.Get(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dimension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.math.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  const Dimension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dimension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.math.Dimension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.math.Dimension)
    MergeFrom(*source);
  }
}

void Dimension::MergeFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.math.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_names_.MergeFrom(from.field_names_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void Dimension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.math.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dimension::CopyFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.math.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension::IsInitialized() const {
  return true;
}

void Dimension::InternalSwap(Dimension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_names_.InternalSwap(&other->field_names_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dimension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorProperties::InitAsDefaultInstance() {
}
class TensorProperties::_Internal {
 public:
};

TensorProperties::TensorProperties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.math.TensorProperties)
}
TensorProperties::TensorProperties(const TensorProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  numeric_type_ = from.numeric_type_;
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.math.TensorProperties)
}

void TensorProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorProperties_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base);
  numeric_type_ = 0;
}

TensorProperties::~TensorProperties() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.math.TensorProperties)
  SharedDtor();
}

void TensorProperties::SharedDtor() {
}

void TensorProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorProperties& TensorProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorProperties_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base);
  return *internal_default_instance();
}


void TensorProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.math.TensorProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  numeric_type_ = 0;
  _internal_metadata_.Clear();
}

const char* TensorProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .standard_cyborg.proto.math.NumericType numeric_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_numeric_type(static_cast<::standard_cyborg::proto::math::NumericType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .standard_cyborg.proto.math.Dimension shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.math.TensorProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .standard_cyborg.proto.math.NumericType numeric_type = 1;
  if (this->numeric_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_numeric_type(), target);
  }

  // repeated .standard_cyborg.proto.math.Dimension shape = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shape_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_shape(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.math.TensorProperties)
  return target;
}

size_t TensorProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.math.TensorProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .standard_cyborg.proto.math.Dimension shape = 3;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .standard_cyborg.proto.math.NumericType numeric_type = 1;
  if (this->numeric_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_numeric_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.math.TensorProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.math.TensorProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.math.TensorProperties)
    MergeFrom(*source);
  }
}

void TensorProperties::MergeFrom(const TensorProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.math.TensorProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (from.numeric_type() != 0) {
    _internal_set_numeric_type(from._internal_numeric_type());
  }
}

void TensorProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.math.TensorProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProperties::CopyFrom(const TensorProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.math.TensorProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProperties::IsInitialized() const {
  return true;
}

void TensorProperties::InternalSwap(TensorProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  swap(numeric_type_, other->numeric_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tensor::InitAsDefaultInstance() {
  ::standard_cyborg::proto::math::_Tensor_default_instance_._instance.get_mutable()->properties_ = const_cast< ::standard_cyborg::proto::math::TensorProperties*>(
      ::standard_cyborg::proto::math::TensorProperties::internal_default_instance());
}
class Tensor::_Internal {
 public:
  static const ::standard_cyborg::proto::math::TensorProperties& properties(const Tensor* msg);
};

const ::standard_cyborg::proto::math::TensorProperties&
Tensor::_Internal::properties(const Tensor* msg) {
  return *msg->properties_;
}
Tensor::Tensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.math.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uint32_values_(from.uint32_values_),
      uint64_values_(from.uint64_values_),
      int32_values_(from.int32_values_),
      int64_values_(from.int64_values_),
      float_values_(from.float_values_),
      double_values_(from.double_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uint8_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uint8_bytes().empty()) {
    uint8_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uint8_bytes_);
  }
  uint32_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uint32_little_endian_bytes().empty()) {
    uint32_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uint32_little_endian_bytes_);
  }
  uint64_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uint64_little_endian_bytes().empty()) {
    uint64_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uint64_little_endian_bytes_);
  }
  int32_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_int32_little_endian_bytes().empty()) {
    int32_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.int32_little_endian_bytes_);
  }
  int64_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_int64_little_endian_bytes().empty()) {
    int64_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.int64_little_endian_bytes_);
  }
  float_ieee754_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_float_ieee754_little_endian_bytes().empty()) {
    float_ieee754_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.float_ieee754_little_endian_bytes_);
  }
  double_ieee754_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_double_ieee754_little_endian_bytes().empty()) {
    double_ieee754_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.double_ieee754_little_endian_bytes_);
  }
  jpeg_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jpeg_bytes().empty()) {
    jpeg_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpeg_bytes_);
  }
  png_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_png_bytes().empty()) {
    png_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.png_bytes_);
  }
  if (from._internal_has_properties()) {
    properties_ = new ::standard_cyborg::proto::math::TensorProperties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.math.Tensor)
}

void Tensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tensor_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base);
  uint8_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uint32_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uint64_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int32_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int64_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  float_ieee754_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  double_ieee754_little_endian_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpeg_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  png_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  properties_ = nullptr;
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.math.Tensor)
  SharedDtor();
}

void Tensor::SharedDtor() {
  uint8_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uint32_little_endian_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uint64_little_endian_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int32_little_endian_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int64_little_endian_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  float_ieee754_little_endian_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  double_ieee754_little_endian_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpeg_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  png_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete properties_;
}

void Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tensor& Tensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tensor_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.base);
  return *internal_default_instance();
}


void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.math.Tensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uint32_values_.Clear();
  uint64_values_.Clear();
  int32_values_.Clear();
  int64_values_.Clear();
  float_values_.Clear();
  double_values_.Clear();
  uint8_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uint32_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uint64_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int32_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  int64_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  float_ieee754_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  double_ieee754_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jpeg_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  png_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Tensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .standard_cyborg.proto.math.TensorProperties properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 uint32_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uint32_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_uint32_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 uint64_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_uint64_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 int32_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_int32_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_int64_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float float_values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_float_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double double_values = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_double_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes uint8_bytes = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_uint8_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uint32_little_endian_bytes = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_uint32_little_endian_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uint64_little_endian_bytes = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_uint64_little_endian_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes int32_little_endian_bytes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_int32_little_endian_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes int64_little_endian_bytes = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_int64_little_endian_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes float_ieee754_little_endian_bytes = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_float_ieee754_little_endian_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes double_ieee754_little_endian_bytes = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_double_ieee754_little_endian_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes jpeg_bytes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_jpeg_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes png_bytes = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_png_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.math.Tensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .standard_cyborg.proto.math.TensorProperties properties = 1;
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::properties(this), target, stream);
  }

  // repeated uint32 uint32_values = 3;
  {
    int byte_size = _uint32_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_uint32_values(), byte_size, target);
    }
  }

  // repeated uint64 uint64_values = 4;
  {
    int byte_size = _uint64_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_uint64_values(), byte_size, target);
    }
  }

  // repeated int32 int32_values = 5;
  {
    int byte_size = _int32_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_int32_values(), byte_size, target);
    }
  }

  // repeated int64 int64_values = 6;
  {
    int byte_size = _int64_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_int64_values(), byte_size, target);
    }
  }

  // repeated float float_values = 7;
  if (this->_internal_float_values_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_float_values(), target);
  }

  // repeated double double_values = 8;
  if (this->_internal_double_values_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_double_values(), target);
  }

  // bytes uint8_bytes = 20;
  if (this->uint8_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_uint8_bytes(), target);
  }

  // bytes uint32_little_endian_bytes = 21;
  if (this->uint32_little_endian_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_uint32_little_endian_bytes(), target);
  }

  // bytes uint64_little_endian_bytes = 22;
  if (this->uint64_little_endian_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_uint64_little_endian_bytes(), target);
  }

  // bytes int32_little_endian_bytes = 23;
  if (this->int32_little_endian_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_int32_little_endian_bytes(), target);
  }

  // bytes int64_little_endian_bytes = 24;
  if (this->int64_little_endian_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_int64_little_endian_bytes(), target);
  }

  // bytes float_ieee754_little_endian_bytes = 25;
  if (this->float_ieee754_little_endian_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_float_ieee754_little_endian_bytes(), target);
  }

  // bytes double_ieee754_little_endian_bytes = 26;
  if (this->double_ieee754_little_endian_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_double_ieee754_little_endian_bytes(), target);
  }

  // bytes jpeg_bytes = 30;
  if (this->jpeg_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_jpeg_bytes(), target);
  }

  // bytes png_bytes = 31;
  if (this->png_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_png_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.math.Tensor)
  return target;
}

size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.math.Tensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 uint32_values = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uint32_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint32_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 uint64_values = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->uint64_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint64_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 int32_values = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int32_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64_values = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float float_values = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _float_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_values = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _double_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes uint8_bytes = 20;
  if (this->uint8_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uint8_bytes());
  }

  // bytes uint32_little_endian_bytes = 21;
  if (this->uint32_little_endian_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uint32_little_endian_bytes());
  }

  // bytes uint64_little_endian_bytes = 22;
  if (this->uint64_little_endian_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uint64_little_endian_bytes());
  }

  // bytes int32_little_endian_bytes = 23;
  if (this->int32_little_endian_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_int32_little_endian_bytes());
  }

  // bytes int64_little_endian_bytes = 24;
  if (this->int64_little_endian_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_int64_little_endian_bytes());
  }

  // bytes float_ieee754_little_endian_bytes = 25;
  if (this->float_ieee754_little_endian_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_float_ieee754_little_endian_bytes());
  }

  // bytes double_ieee754_little_endian_bytes = 26;
  if (this->double_ieee754_little_endian_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_double_ieee754_little_endian_bytes());
  }

  // bytes jpeg_bytes = 30;
  if (this->jpeg_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_jpeg_bytes());
  }

  // bytes png_bytes = 31;
  if (this->png_bytes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_png_bytes());
  }

  // .standard_cyborg.proto.math.TensorProperties properties = 1;
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.math.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Tensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.math.Tensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.math.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.math.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uint32_values_.MergeFrom(from.uint32_values_);
  uint64_values_.MergeFrom(from.uint64_values_);
  int32_values_.MergeFrom(from.int32_values_);
  int64_values_.MergeFrom(from.int64_values_);
  float_values_.MergeFrom(from.float_values_);
  double_values_.MergeFrom(from.double_values_);
  if (from.uint8_bytes().size() > 0) {

    uint8_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uint8_bytes_);
  }
  if (from.uint32_little_endian_bytes().size() > 0) {

    uint32_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uint32_little_endian_bytes_);
  }
  if (from.uint64_little_endian_bytes().size() > 0) {

    uint64_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uint64_little_endian_bytes_);
  }
  if (from.int32_little_endian_bytes().size() > 0) {

    int32_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.int32_little_endian_bytes_);
  }
  if (from.int64_little_endian_bytes().size() > 0) {

    int64_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.int64_little_endian_bytes_);
  }
  if (from.float_ieee754_little_endian_bytes().size() > 0) {

    float_ieee754_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.float_ieee754_little_endian_bytes_);
  }
  if (from.double_ieee754_little_endian_bytes().size() > 0) {

    double_ieee754_little_endian_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.double_ieee754_little_endian_bytes_);
  }
  if (from.jpeg_bytes().size() > 0) {

    jpeg_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jpeg_bytes_);
  }
  if (from.png_bytes().size() > 0) {

    png_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.png_bytes_);
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::standard_cyborg::proto::math::TensorProperties::MergeFrom(from._internal_properties());
  }
}

void Tensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.math.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.math.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  return true;
}

void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uint32_values_.InternalSwap(&other->uint32_values_);
  uint64_values_.InternalSwap(&other->uint64_values_);
  int32_values_.InternalSwap(&other->int32_values_);
  int64_values_.InternalSwap(&other->int64_values_);
  float_values_.InternalSwap(&other->float_values_);
  double_values_.InternalSwap(&other->double_values_);
  uint8_bytes_.Swap(&other->uint8_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uint32_little_endian_bytes_.Swap(&other->uint32_little_endian_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uint64_little_endian_bytes_.Swap(&other->uint64_little_endian_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  int32_little_endian_bytes_.Swap(&other->int32_little_endian_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  int64_little_endian_bytes_.Swap(&other->int64_little_endian_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  float_ieee754_little_endian_bytes_.Swap(&other->float_ieee754_little_endian_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  double_ieee754_little_endian_bytes_.Swap(&other->double_ieee754_little_endian_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jpeg_bytes_.Swap(&other->jpeg_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  png_bytes_.Swap(&other->png_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(properties_, other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tensor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace math
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::math::Dimension* Arena::CreateMaybeMessage< ::standard_cyborg::proto::math::Dimension >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::math::Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::math::TensorProperties* Arena::CreateMaybeMessage< ::standard_cyborg::proto::math::TensorProperties >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::math::TensorProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::math::Tensor* Arena::CreateMaybeMessage< ::standard_cyborg::proto::math::Tensor >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::math::Tensor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
