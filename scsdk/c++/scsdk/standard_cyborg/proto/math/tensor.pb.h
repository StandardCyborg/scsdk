// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/math/tensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto;
namespace standard_cyborg {
namespace proto {
namespace math {
class Dimension;
class DimensionDefaultTypeInternal;
extern DimensionDefaultTypeInternal _Dimension_default_instance_;
class Tensor;
class TensorDefaultTypeInternal;
extern TensorDefaultTypeInternal _Tensor_default_instance_;
class TensorProperties;
class TensorPropertiesDefaultTypeInternal;
extern TensorPropertiesDefaultTypeInternal _TensorProperties_default_instance_;
}  // namespace math
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> ::standard_cyborg::proto::math::Dimension* Arena::CreateMaybeMessage<::standard_cyborg::proto::math::Dimension>(Arena*);
template<> ::standard_cyborg::proto::math::Tensor* Arena::CreateMaybeMessage<::standard_cyborg::proto::math::Tensor>(Arena*);
template<> ::standard_cyborg::proto::math::TensorProperties* Arena::CreateMaybeMessage<::standard_cyborg::proto::math::TensorProperties>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace standard_cyborg {
namespace proto {
namespace math {

enum NumericType : int {
  NUMERIC_TYPE_UNKNOWN = 0,
  NUMERIC_TYPE_UINT8 = 2,
  NUMERIC_TYPE_UINT32 = 3,
  NUMERIC_TYPE_UINT64 = 4,
  NUMERIC_TYPE_INT32 = 5,
  NUMERIC_TYPE_INT64 = 6,
  NUMERIC_TYPE_FLOAT = 7,
  NUMERIC_TYPE_DOUBLE = 8,
  NUMERIC_TYPE_UINT8_BYTES = 20,
  NUMERIC_TYPE_UINT32_LITTLE_ENDIAN_BYTES = 21,
  NUMERIC_TYPE_UINT64_LITTLE_ENDIAN_BYTES = 22,
  NUMERIC_TYPE_INT32_LITTLE_ENDIAN_BYTES = 23,
  NUMERIC_TYPE_INT64_LITTLE_ENDIAN_BYTES = 24,
  NUMERIC_TYPE_FLOAT_IEEE754_LITTLE_ENDIAN_BYTES = 25,
  NUMERIC_TYPE_DOUBLE_IEEE754_LITTLE_ENDIAN_BYTES = 26,
  NUMERIC_TYPE_JPEG_BYTES = 30,
  NUMERIC_TYPE_PNG_BYTES = 31,
  NumericType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NumericType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NumericType_IsValid(int value);
constexpr NumericType NumericType_MIN = NUMERIC_TYPE_UNKNOWN;
constexpr NumericType NumericType_MAX = NUMERIC_TYPE_PNG_BYTES;
constexpr int NumericType_ARRAYSIZE = NumericType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NumericType_descriptor();
template<typename T>
inline const std::string& NumericType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NumericType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NumericType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NumericType_descriptor(), enum_t_value);
}
inline bool NumericType_Parse(
    const std::string& name, NumericType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NumericType>(
    NumericType_descriptor(), name, value);
}
// ===================================================================

class Dimension :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.math.Dimension) */ {
 public:
  Dimension();
  virtual ~Dimension();

  Dimension(const Dimension& from);
  Dimension(Dimension&& from) noexcept
    : Dimension() {
    *this = ::std::move(from);
  }

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimension& operator=(Dimension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dimension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dimension* internal_default_instance() {
    return reinterpret_cast<const Dimension*>(
               &_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dimension& a, Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimension* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dimension* New() const final {
    return CreateMaybeMessage<Dimension>(nullptr);
  }

  Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dimension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dimension& from);
  void MergeFrom(const Dimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.math.Dimension";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNamesFieldNumber = 3,
    kNameFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // repeated string field_names = 3;
  int field_names_size() const;
  private:
  int _internal_field_names_size() const;
  public:
  void clear_field_names();
  const std::string& field_names(int index) const;
  std::string* mutable_field_names(int index);
  void set_field_names(int index, const std::string& value);
  void set_field_names(int index, std::string&& value);
  void set_field_names(int index, const char* value);
  void set_field_names(int index, const char* value, size_t size);
  std::string* add_field_names();
  void add_field_names(const std::string& value);
  void add_field_names(std::string&& value);
  void add_field_names(const char* value);
  void add_field_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field_names();
  private:
  const std::string& _internal_field_names(int index) const;
  std::string* _internal_add_field_names();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.math.Dimension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto;
};
// -------------------------------------------------------------------

class TensorProperties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.math.TensorProperties) */ {
 public:
  TensorProperties();
  virtual ~TensorProperties();

  TensorProperties(const TensorProperties& from);
  TensorProperties(TensorProperties&& from) noexcept
    : TensorProperties() {
    *this = ::std::move(from);
  }

  inline TensorProperties& operator=(const TensorProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorProperties& operator=(TensorProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProperties* internal_default_instance() {
    return reinterpret_cast<const TensorProperties*>(
               &_TensorProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TensorProperties& a, TensorProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorProperties* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorProperties* New() const final {
    return CreateMaybeMessage<TensorProperties>(nullptr);
  }

  TensorProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorProperties& from);
  void MergeFrom(const TensorProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.math.TensorProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 3,
    kNumericTypeFieldNumber = 1,
  };
  // repeated .standard_cyborg.proto.math.Dimension shape = 3;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  ::standard_cyborg::proto::math::Dimension* mutable_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Dimension >*
      mutable_shape();
  private:
  const ::standard_cyborg::proto::math::Dimension& _internal_shape(int index) const;
  ::standard_cyborg::proto::math::Dimension* _internal_add_shape();
  public:
  const ::standard_cyborg::proto::math::Dimension& shape(int index) const;
  ::standard_cyborg::proto::math::Dimension* add_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Dimension >&
      shape() const;

  // .standard_cyborg.proto.math.NumericType numeric_type = 1;
  void clear_numeric_type();
  ::standard_cyborg::proto::math::NumericType numeric_type() const;
  void set_numeric_type(::standard_cyborg::proto::math::NumericType value);
  private:
  ::standard_cyborg::proto::math::NumericType _internal_numeric_type() const;
  void _internal_set_numeric_type(::standard_cyborg::proto::math::NumericType value);
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.math.TensorProperties)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Dimension > shape_;
  int numeric_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto;
};
// -------------------------------------------------------------------

class Tensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.math.Tensor) */ {
 public:
  Tensor();
  virtual ~Tensor();

  Tensor(const Tensor& from);
  Tensor(Tensor&& from) noexcept
    : Tensor() {
    *this = ::std::move(from);
  }

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor& operator=(Tensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tensor* internal_default_instance() {
    return reinterpret_cast<const Tensor*>(
               &_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Tensor& a, Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tensor* New() const final {
    return CreateMaybeMessage<Tensor>(nullptr);
  }

  Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tensor& from);
  void MergeFrom(const Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.math.Tensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUint32ValuesFieldNumber = 3,
    kUint64ValuesFieldNumber = 4,
    kInt32ValuesFieldNumber = 5,
    kInt64ValuesFieldNumber = 6,
    kFloatValuesFieldNumber = 7,
    kDoubleValuesFieldNumber = 8,
    kUint8BytesFieldNumber = 20,
    kUint32LittleEndianBytesFieldNumber = 21,
    kUint64LittleEndianBytesFieldNumber = 22,
    kInt32LittleEndianBytesFieldNumber = 23,
    kInt64LittleEndianBytesFieldNumber = 24,
    kFloatIeee754LittleEndianBytesFieldNumber = 25,
    kDoubleIeee754LittleEndianBytesFieldNumber = 26,
    kJpegBytesFieldNumber = 30,
    kPngBytesFieldNumber = 31,
    kPropertiesFieldNumber = 1,
  };
  // repeated uint32 uint32_values = 3;
  int uint32_values_size() const;
  private:
  int _internal_uint32_values_size() const;
  public:
  void clear_uint32_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_uint32_values() const;
  void _internal_add_uint32_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_uint32_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_values(int index) const;
  void set_uint32_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_uint32_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      uint32_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_uint32_values();

  // repeated uint64 uint64_values = 4;
  int uint64_values_size() const;
  private:
  int _internal_uint64_values_size() const;
  public:
  void clear_uint64_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_uint64_values() const;
  void _internal_add_uint64_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_uint64_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_values(int index) const;
  void set_uint64_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_values();

  // repeated int32 int32_values = 5;
  int int32_values_size() const;
  private:
  int _internal_int32_values_size() const;
  public:
  void clear_int32_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int32_values() const;
  void _internal_add_int32_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int32_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int32_values(int index) const;
  void set_int32_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int32_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int32_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int32_values();

  // repeated int64 int64_values = 6;
  int int64_values_size() const;
  private:
  int _internal_int64_values_size() const;
  public:
  void clear_int64_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64_values() const;
  void _internal_add_int64_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64_values(int index) const;
  void set_int64_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_values(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_values();

  // repeated float float_values = 7;
  int float_values_size() const;
  private:
  int _internal_float_values_size() const;
  public:
  void clear_float_values();
  private:
  float _internal_float_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_values() const;
  void _internal_add_float_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_values();
  public:
  float float_values(int index) const;
  void set_float_values(int index, float value);
  void add_float_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_values();

  // repeated double double_values = 8;
  int double_values_size() const;
  private:
  int _internal_double_values_size() const;
  public:
  void clear_double_values();
  private:
  double _internal_double_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_values() const;
  void _internal_add_double_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_values();
  public:
  double double_values(int index) const;
  void set_double_values(int index, double value);
  void add_double_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_values();

  // bytes uint8_bytes = 20;
  void clear_uint8_bytes();
  const std::string& uint8_bytes() const;
  void set_uint8_bytes(const std::string& value);
  void set_uint8_bytes(std::string&& value);
  void set_uint8_bytes(const char* value);
  void set_uint8_bytes(const void* value, size_t size);
  std::string* mutable_uint8_bytes();
  std::string* release_uint8_bytes();
  void set_allocated_uint8_bytes(std::string* uint8_bytes);
  private:
  const std::string& _internal_uint8_bytes() const;
  void _internal_set_uint8_bytes(const std::string& value);
  std::string* _internal_mutable_uint8_bytes();
  public:

  // bytes uint32_little_endian_bytes = 21;
  void clear_uint32_little_endian_bytes();
  const std::string& uint32_little_endian_bytes() const;
  void set_uint32_little_endian_bytes(const std::string& value);
  void set_uint32_little_endian_bytes(std::string&& value);
  void set_uint32_little_endian_bytes(const char* value);
  void set_uint32_little_endian_bytes(const void* value, size_t size);
  std::string* mutable_uint32_little_endian_bytes();
  std::string* release_uint32_little_endian_bytes();
  void set_allocated_uint32_little_endian_bytes(std::string* uint32_little_endian_bytes);
  private:
  const std::string& _internal_uint32_little_endian_bytes() const;
  void _internal_set_uint32_little_endian_bytes(const std::string& value);
  std::string* _internal_mutable_uint32_little_endian_bytes();
  public:

  // bytes uint64_little_endian_bytes = 22;
  void clear_uint64_little_endian_bytes();
  const std::string& uint64_little_endian_bytes() const;
  void set_uint64_little_endian_bytes(const std::string& value);
  void set_uint64_little_endian_bytes(std::string&& value);
  void set_uint64_little_endian_bytes(const char* value);
  void set_uint64_little_endian_bytes(const void* value, size_t size);
  std::string* mutable_uint64_little_endian_bytes();
  std::string* release_uint64_little_endian_bytes();
  void set_allocated_uint64_little_endian_bytes(std::string* uint64_little_endian_bytes);
  private:
  const std::string& _internal_uint64_little_endian_bytes() const;
  void _internal_set_uint64_little_endian_bytes(const std::string& value);
  std::string* _internal_mutable_uint64_little_endian_bytes();
  public:

  // bytes int32_little_endian_bytes = 23;
  void clear_int32_little_endian_bytes();
  const std::string& int32_little_endian_bytes() const;
  void set_int32_little_endian_bytes(const std::string& value);
  void set_int32_little_endian_bytes(std::string&& value);
  void set_int32_little_endian_bytes(const char* value);
  void set_int32_little_endian_bytes(const void* value, size_t size);
  std::string* mutable_int32_little_endian_bytes();
  std::string* release_int32_little_endian_bytes();
  void set_allocated_int32_little_endian_bytes(std::string* int32_little_endian_bytes);
  private:
  const std::string& _internal_int32_little_endian_bytes() const;
  void _internal_set_int32_little_endian_bytes(const std::string& value);
  std::string* _internal_mutable_int32_little_endian_bytes();
  public:

  // bytes int64_little_endian_bytes = 24;
  void clear_int64_little_endian_bytes();
  const std::string& int64_little_endian_bytes() const;
  void set_int64_little_endian_bytes(const std::string& value);
  void set_int64_little_endian_bytes(std::string&& value);
  void set_int64_little_endian_bytes(const char* value);
  void set_int64_little_endian_bytes(const void* value, size_t size);
  std::string* mutable_int64_little_endian_bytes();
  std::string* release_int64_little_endian_bytes();
  void set_allocated_int64_little_endian_bytes(std::string* int64_little_endian_bytes);
  private:
  const std::string& _internal_int64_little_endian_bytes() const;
  void _internal_set_int64_little_endian_bytes(const std::string& value);
  std::string* _internal_mutable_int64_little_endian_bytes();
  public:

  // bytes float_ieee754_little_endian_bytes = 25;
  void clear_float_ieee754_little_endian_bytes();
  const std::string& float_ieee754_little_endian_bytes() const;
  void set_float_ieee754_little_endian_bytes(const std::string& value);
  void set_float_ieee754_little_endian_bytes(std::string&& value);
  void set_float_ieee754_little_endian_bytes(const char* value);
  void set_float_ieee754_little_endian_bytes(const void* value, size_t size);
  std::string* mutable_float_ieee754_little_endian_bytes();
  std::string* release_float_ieee754_little_endian_bytes();
  void set_allocated_float_ieee754_little_endian_bytes(std::string* float_ieee754_little_endian_bytes);
  private:
  const std::string& _internal_float_ieee754_little_endian_bytes() const;
  void _internal_set_float_ieee754_little_endian_bytes(const std::string& value);
  std::string* _internal_mutable_float_ieee754_little_endian_bytes();
  public:

  // bytes double_ieee754_little_endian_bytes = 26;
  void clear_double_ieee754_little_endian_bytes();
  const std::string& double_ieee754_little_endian_bytes() const;
  void set_double_ieee754_little_endian_bytes(const std::string& value);
  void set_double_ieee754_little_endian_bytes(std::string&& value);
  void set_double_ieee754_little_endian_bytes(const char* value);
  void set_double_ieee754_little_endian_bytes(const void* value, size_t size);
  std::string* mutable_double_ieee754_little_endian_bytes();
  std::string* release_double_ieee754_little_endian_bytes();
  void set_allocated_double_ieee754_little_endian_bytes(std::string* double_ieee754_little_endian_bytes);
  private:
  const std::string& _internal_double_ieee754_little_endian_bytes() const;
  void _internal_set_double_ieee754_little_endian_bytes(const std::string& value);
  std::string* _internal_mutable_double_ieee754_little_endian_bytes();
  public:

  // bytes jpeg_bytes = 30;
  void clear_jpeg_bytes();
  const std::string& jpeg_bytes() const;
  void set_jpeg_bytes(const std::string& value);
  void set_jpeg_bytes(std::string&& value);
  void set_jpeg_bytes(const char* value);
  void set_jpeg_bytes(const void* value, size_t size);
  std::string* mutable_jpeg_bytes();
  std::string* release_jpeg_bytes();
  void set_allocated_jpeg_bytes(std::string* jpeg_bytes);
  private:
  const std::string& _internal_jpeg_bytes() const;
  void _internal_set_jpeg_bytes(const std::string& value);
  std::string* _internal_mutable_jpeg_bytes();
  public:

  // bytes png_bytes = 31;
  void clear_png_bytes();
  const std::string& png_bytes() const;
  void set_png_bytes(const std::string& value);
  void set_png_bytes(std::string&& value);
  void set_png_bytes(const char* value);
  void set_png_bytes(const void* value, size_t size);
  std::string* mutable_png_bytes();
  std::string* release_png_bytes();
  void set_allocated_png_bytes(std::string* png_bytes);
  private:
  const std::string& _internal_png_bytes() const;
  void _internal_set_png_bytes(const std::string& value);
  std::string* _internal_mutable_png_bytes();
  public:

  // .standard_cyborg.proto.math.TensorProperties properties = 1;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::standard_cyborg::proto::math::TensorProperties& properties() const;
  ::standard_cyborg::proto::math::TensorProperties* release_properties();
  ::standard_cyborg::proto::math::TensorProperties* mutable_properties();
  void set_allocated_properties(::standard_cyborg::proto::math::TensorProperties* properties);
  private:
  const ::standard_cyborg::proto::math::TensorProperties& _internal_properties() const;
  ::standard_cyborg::proto::math::TensorProperties* _internal_mutable_properties();
  public:

  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.math.Tensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > uint32_values_;
  mutable std::atomic<int> _uint32_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_values_;
  mutable std::atomic<int> _uint64_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int32_values_;
  mutable std::atomic<int> _int32_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_values_;
  mutable std::atomic<int> _int64_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_values_;
  mutable std::atomic<int> _float_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_values_;
  mutable std::atomic<int> _double_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uint8_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uint32_little_endian_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uint64_little_endian_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr int32_little_endian_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr int64_little_endian_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr float_ieee754_little_endian_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr double_ieee754_little_endian_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jpeg_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr png_bytes_;
  ::standard_cyborg::proto::math::TensorProperties* properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dimension

// uint64 size = 1;
inline void Dimension::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dimension::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dimension::size() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Dimension.size)
  return _internal_size();
}
inline void Dimension::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void Dimension::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Dimension.size)
}

// string name = 2;
inline void Dimension::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Dimension::name() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Dimension.name)
  return _internal_name();
}
inline void Dimension::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Dimension.name)
}
inline std::string* Dimension::mutable_name() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Dimension.name)
  return _internal_mutable_name();
}
inline const std::string& Dimension::_internal_name() const {
  return name_.GetNoArena();
}
inline void Dimension::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Dimension::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Dimension.name)
}
inline void Dimension::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Dimension.name)
}
inline void Dimension::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Dimension.name)
}
inline std::string* Dimension::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dimension::release_name() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Dimension.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dimension::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Dimension.name)
}

// repeated string field_names = 3;
inline int Dimension::_internal_field_names_size() const {
  return field_names_.size();
}
inline int Dimension::field_names_size() const {
  return _internal_field_names_size();
}
inline void Dimension::clear_field_names() {
  field_names_.Clear();
}
inline std::string* Dimension::add_field_names() {
  // @@protoc_insertion_point(field_add_mutable:standard_cyborg.proto.math.Dimension.field_names)
  return _internal_add_field_names();
}
inline const std::string& Dimension::_internal_field_names(int index) const {
  return field_names_.Get(index);
}
inline const std::string& Dimension::field_names(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Dimension.field_names)
  return _internal_field_names(index);
}
inline std::string* Dimension::mutable_field_names(int index) {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Dimension.field_names)
  return field_names_.Mutable(index);
}
inline void Dimension::set_field_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Dimension.field_names)
  field_names_.Mutable(index)->assign(value);
}
inline void Dimension::set_field_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Dimension.field_names)
  field_names_.Mutable(index)->assign(std::move(value));
}
inline void Dimension::set_field_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Dimension.field_names)
}
inline void Dimension::set_field_names(int index, const char* value, size_t size) {
  field_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Dimension.field_names)
}
inline std::string* Dimension::_internal_add_field_names() {
  return field_names_.Add();
}
inline void Dimension::add_field_names(const std::string& value) {
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.Dimension.field_names)
}
inline void Dimension::add_field_names(std::string&& value) {
  field_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.Dimension.field_names)
}
inline void Dimension::add_field_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:standard_cyborg.proto.math.Dimension.field_names)
}
inline void Dimension::add_field_names(const char* value, size_t size) {
  field_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:standard_cyborg.proto.math.Dimension.field_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Dimension::field_names() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.math.Dimension.field_names)
  return field_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Dimension::mutable_field_names() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.math.Dimension.field_names)
  return &field_names_;
}

// -------------------------------------------------------------------

// TensorProperties

// .standard_cyborg.proto.math.NumericType numeric_type = 1;
inline void TensorProperties::clear_numeric_type() {
  numeric_type_ = 0;
}
inline ::standard_cyborg::proto::math::NumericType TensorProperties::_internal_numeric_type() const {
  return static_cast< ::standard_cyborg::proto::math::NumericType >(numeric_type_);
}
inline ::standard_cyborg::proto::math::NumericType TensorProperties::numeric_type() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.TensorProperties.numeric_type)
  return _internal_numeric_type();
}
inline void TensorProperties::_internal_set_numeric_type(::standard_cyborg::proto::math::NumericType value) {
  
  numeric_type_ = value;
}
inline void TensorProperties::set_numeric_type(::standard_cyborg::proto::math::NumericType value) {
  _internal_set_numeric_type(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.TensorProperties.numeric_type)
}

// repeated .standard_cyborg.proto.math.Dimension shape = 3;
inline int TensorProperties::_internal_shape_size() const {
  return shape_.size();
}
inline int TensorProperties::shape_size() const {
  return _internal_shape_size();
}
inline void TensorProperties::clear_shape() {
  shape_.Clear();
}
inline ::standard_cyborg::proto::math::Dimension* TensorProperties::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.TensorProperties.shape)
  return shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Dimension >*
TensorProperties::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.math.TensorProperties.shape)
  return &shape_;
}
inline const ::standard_cyborg::proto::math::Dimension& TensorProperties::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline const ::standard_cyborg::proto::math::Dimension& TensorProperties::shape(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.TensorProperties.shape)
  return _internal_shape(index);
}
inline ::standard_cyborg::proto::math::Dimension* TensorProperties::_internal_add_shape() {
  return shape_.Add();
}
inline ::standard_cyborg::proto::math::Dimension* TensorProperties::add_shape() {
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.TensorProperties.shape)
  return _internal_add_shape();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::standard_cyborg::proto::math::Dimension >&
TensorProperties::shape() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.math.TensorProperties.shape)
  return shape_;
}

// -------------------------------------------------------------------

// Tensor

// .standard_cyborg.proto.math.TensorProperties properties = 1;
inline bool Tensor::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool Tensor::has_properties() const {
  return _internal_has_properties();
}
inline void Tensor::clear_properties() {
  if (GetArenaNoVirtual() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
inline const ::standard_cyborg::proto::math::TensorProperties& Tensor::_internal_properties() const {
  const ::standard_cyborg::proto::math::TensorProperties* p = properties_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::TensorProperties*>(
      &::standard_cyborg::proto::math::_TensorProperties_default_instance_);
}
inline const ::standard_cyborg::proto::math::TensorProperties& Tensor::properties() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.properties)
  return _internal_properties();
}
inline ::standard_cyborg::proto::math::TensorProperties* Tensor::release_properties() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.properties)
  
  ::standard_cyborg::proto::math::TensorProperties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::TensorProperties* Tensor::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::TensorProperties>(GetArenaNoVirtual());
    properties_ = p;
  }
  return properties_;
}
inline ::standard_cyborg::proto::math::TensorProperties* Tensor::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.properties)
  return _internal_mutable_properties();
}
inline void Tensor::set_allocated_properties(::standard_cyborg::proto::math::TensorProperties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete properties_;
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.properties)
}

// repeated uint32 uint32_values = 3;
inline int Tensor::_internal_uint32_values_size() const {
  return uint32_values_.size();
}
inline int Tensor::uint32_values_size() const {
  return _internal_uint32_values_size();
}
inline void Tensor::clear_uint32_values() {
  uint32_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tensor::_internal_uint32_values(int index) const {
  return uint32_values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tensor::uint32_values(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.uint32_values)
  return _internal_uint32_values(index);
}
inline void Tensor::set_uint32_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.uint32_values)
}
inline void Tensor::_internal_add_uint32_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_values_.Add(value);
}
inline void Tensor::add_uint32_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_uint32_values(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.Tensor.uint32_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Tensor::_internal_uint32_values() const {
  return uint32_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Tensor::uint32_values() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.math.Tensor.uint32_values)
  return _internal_uint32_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Tensor::_internal_mutable_uint32_values() {
  return &uint32_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Tensor::mutable_uint32_values() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.math.Tensor.uint32_values)
  return _internal_mutable_uint32_values();
}

// repeated uint64 uint64_values = 4;
inline int Tensor::_internal_uint64_values_size() const {
  return uint64_values_.size();
}
inline int Tensor::uint64_values_size() const {
  return _internal_uint64_values_size();
}
inline void Tensor::clear_uint64_values() {
  uint64_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tensor::_internal_uint64_values(int index) const {
  return uint64_values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tensor::uint64_values(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.uint64_values)
  return _internal_uint64_values(index);
}
inline void Tensor::set_uint64_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.uint64_values)
}
inline void Tensor::_internal_add_uint64_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_values_.Add(value);
}
inline void Tensor::add_uint64_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_uint64_values(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.Tensor.uint64_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Tensor::_internal_uint64_values() const {
  return uint64_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Tensor::uint64_values() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.math.Tensor.uint64_values)
  return _internal_uint64_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Tensor::_internal_mutable_uint64_values() {
  return &uint64_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Tensor::mutable_uint64_values() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.math.Tensor.uint64_values)
  return _internal_mutable_uint64_values();
}

// repeated int32 int32_values = 5;
inline int Tensor::_internal_int32_values_size() const {
  return int32_values_.size();
}
inline int Tensor::int32_values_size() const {
  return _internal_int32_values_size();
}
inline void Tensor::clear_int32_values() {
  int32_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::_internal_int32_values(int index) const {
  return int32_values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::int32_values(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.int32_values)
  return _internal_int32_values(index);
}
inline void Tensor::set_int32_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.int32_values)
}
inline void Tensor::_internal_add_int32_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_values_.Add(value);
}
inline void Tensor::add_int32_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int32_values(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.Tensor.int32_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Tensor::_internal_int32_values() const {
  return int32_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Tensor::int32_values() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.math.Tensor.int32_values)
  return _internal_int32_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Tensor::_internal_mutable_int32_values() {
  return &int32_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Tensor::mutable_int32_values() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.math.Tensor.int32_values)
  return _internal_mutable_int32_values();
}

// repeated int64 int64_values = 6;
inline int Tensor::_internal_int64_values_size() const {
  return int64_values_.size();
}
inline int Tensor::int64_values_size() const {
  return _internal_int64_values_size();
}
inline void Tensor::clear_int64_values() {
  int64_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tensor::_internal_int64_values(int index) const {
  return int64_values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tensor::int64_values(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.int64_values)
  return _internal_int64_values(index);
}
inline void Tensor::set_int64_values(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.int64_values)
}
inline void Tensor::_internal_add_int64_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_values_.Add(value);
}
inline void Tensor::add_int64_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64_values(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.Tensor.int64_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Tensor::_internal_int64_values() const {
  return int64_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Tensor::int64_values() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.math.Tensor.int64_values)
  return _internal_int64_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Tensor::_internal_mutable_int64_values() {
  return &int64_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Tensor::mutable_int64_values() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.math.Tensor.int64_values)
  return _internal_mutable_int64_values();
}

// repeated float float_values = 7;
inline int Tensor::_internal_float_values_size() const {
  return float_values_.size();
}
inline int Tensor::float_values_size() const {
  return _internal_float_values_size();
}
inline void Tensor::clear_float_values() {
  float_values_.Clear();
}
inline float Tensor::_internal_float_values(int index) const {
  return float_values_.Get(index);
}
inline float Tensor::float_values(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.float_values)
  return _internal_float_values(index);
}
inline void Tensor::set_float_values(int index, float value) {
  float_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.float_values)
}
inline void Tensor::_internal_add_float_values(float value) {
  float_values_.Add(value);
}
inline void Tensor::add_float_values(float value) {
  _internal_add_float_values(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.Tensor.float_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Tensor::_internal_float_values() const {
  return float_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Tensor::float_values() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.math.Tensor.float_values)
  return _internal_float_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Tensor::_internal_mutable_float_values() {
  return &float_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Tensor::mutable_float_values() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.math.Tensor.float_values)
  return _internal_mutable_float_values();
}

// repeated double double_values = 8;
inline int Tensor::_internal_double_values_size() const {
  return double_values_.size();
}
inline int Tensor::double_values_size() const {
  return _internal_double_values_size();
}
inline void Tensor::clear_double_values() {
  double_values_.Clear();
}
inline double Tensor::_internal_double_values(int index) const {
  return double_values_.Get(index);
}
inline double Tensor::double_values(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.double_values)
  return _internal_double_values(index);
}
inline void Tensor::set_double_values(int index, double value) {
  double_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.double_values)
}
inline void Tensor::_internal_add_double_values(double value) {
  double_values_.Add(value);
}
inline void Tensor::add_double_values(double value) {
  _internal_add_double_values(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.math.Tensor.double_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Tensor::_internal_double_values() const {
  return double_values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Tensor::double_values() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.math.Tensor.double_values)
  return _internal_double_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Tensor::_internal_mutable_double_values() {
  return &double_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Tensor::mutable_double_values() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.math.Tensor.double_values)
  return _internal_mutable_double_values();
}

// bytes uint8_bytes = 20;
inline void Tensor::clear_uint8_bytes() {
  uint8_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::uint8_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.uint8_bytes)
  return _internal_uint8_bytes();
}
inline void Tensor::set_uint8_bytes(const std::string& value) {
  _internal_set_uint8_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.uint8_bytes)
}
inline std::string* Tensor::mutable_uint8_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.uint8_bytes)
  return _internal_mutable_uint8_bytes();
}
inline const std::string& Tensor::_internal_uint8_bytes() const {
  return uint8_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_uint8_bytes(const std::string& value) {
  
  uint8_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_uint8_bytes(std::string&& value) {
  
  uint8_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.uint8_bytes)
}
inline void Tensor::set_uint8_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uint8_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.uint8_bytes)
}
inline void Tensor::set_uint8_bytes(const void* value, size_t size) {
  
  uint8_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.uint8_bytes)
}
inline std::string* Tensor::_internal_mutable_uint8_bytes() {
  
  return uint8_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_uint8_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.uint8_bytes)
  
  return uint8_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_uint8_bytes(std::string* uint8_bytes) {
  if (uint8_bytes != nullptr) {
    
  } else {
    
  }
  uint8_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uint8_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.uint8_bytes)
}

// bytes uint32_little_endian_bytes = 21;
inline void Tensor::clear_uint32_little_endian_bytes() {
  uint32_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::uint32_little_endian_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.uint32_little_endian_bytes)
  return _internal_uint32_little_endian_bytes();
}
inline void Tensor::set_uint32_little_endian_bytes(const std::string& value) {
  _internal_set_uint32_little_endian_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.uint32_little_endian_bytes)
}
inline std::string* Tensor::mutable_uint32_little_endian_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.uint32_little_endian_bytes)
  return _internal_mutable_uint32_little_endian_bytes();
}
inline const std::string& Tensor::_internal_uint32_little_endian_bytes() const {
  return uint32_little_endian_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_uint32_little_endian_bytes(const std::string& value) {
  
  uint32_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_uint32_little_endian_bytes(std::string&& value) {
  
  uint32_little_endian_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.uint32_little_endian_bytes)
}
inline void Tensor::set_uint32_little_endian_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uint32_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.uint32_little_endian_bytes)
}
inline void Tensor::set_uint32_little_endian_bytes(const void* value, size_t size) {
  
  uint32_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.uint32_little_endian_bytes)
}
inline std::string* Tensor::_internal_mutable_uint32_little_endian_bytes() {
  
  return uint32_little_endian_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_uint32_little_endian_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.uint32_little_endian_bytes)
  
  return uint32_little_endian_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_uint32_little_endian_bytes(std::string* uint32_little_endian_bytes) {
  if (uint32_little_endian_bytes != nullptr) {
    
  } else {
    
  }
  uint32_little_endian_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uint32_little_endian_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.uint32_little_endian_bytes)
}

// bytes uint64_little_endian_bytes = 22;
inline void Tensor::clear_uint64_little_endian_bytes() {
  uint64_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::uint64_little_endian_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.uint64_little_endian_bytes)
  return _internal_uint64_little_endian_bytes();
}
inline void Tensor::set_uint64_little_endian_bytes(const std::string& value) {
  _internal_set_uint64_little_endian_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.uint64_little_endian_bytes)
}
inline std::string* Tensor::mutable_uint64_little_endian_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.uint64_little_endian_bytes)
  return _internal_mutable_uint64_little_endian_bytes();
}
inline const std::string& Tensor::_internal_uint64_little_endian_bytes() const {
  return uint64_little_endian_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_uint64_little_endian_bytes(const std::string& value) {
  
  uint64_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_uint64_little_endian_bytes(std::string&& value) {
  
  uint64_little_endian_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.uint64_little_endian_bytes)
}
inline void Tensor::set_uint64_little_endian_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uint64_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.uint64_little_endian_bytes)
}
inline void Tensor::set_uint64_little_endian_bytes(const void* value, size_t size) {
  
  uint64_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.uint64_little_endian_bytes)
}
inline std::string* Tensor::_internal_mutable_uint64_little_endian_bytes() {
  
  return uint64_little_endian_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_uint64_little_endian_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.uint64_little_endian_bytes)
  
  return uint64_little_endian_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_uint64_little_endian_bytes(std::string* uint64_little_endian_bytes) {
  if (uint64_little_endian_bytes != nullptr) {
    
  } else {
    
  }
  uint64_little_endian_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uint64_little_endian_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.uint64_little_endian_bytes)
}

// bytes int32_little_endian_bytes = 23;
inline void Tensor::clear_int32_little_endian_bytes() {
  int32_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::int32_little_endian_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.int32_little_endian_bytes)
  return _internal_int32_little_endian_bytes();
}
inline void Tensor::set_int32_little_endian_bytes(const std::string& value) {
  _internal_set_int32_little_endian_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.int32_little_endian_bytes)
}
inline std::string* Tensor::mutable_int32_little_endian_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.int32_little_endian_bytes)
  return _internal_mutable_int32_little_endian_bytes();
}
inline const std::string& Tensor::_internal_int32_little_endian_bytes() const {
  return int32_little_endian_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_int32_little_endian_bytes(const std::string& value) {
  
  int32_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_int32_little_endian_bytes(std::string&& value) {
  
  int32_little_endian_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.int32_little_endian_bytes)
}
inline void Tensor::set_int32_little_endian_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  int32_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.int32_little_endian_bytes)
}
inline void Tensor::set_int32_little_endian_bytes(const void* value, size_t size) {
  
  int32_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.int32_little_endian_bytes)
}
inline std::string* Tensor::_internal_mutable_int32_little_endian_bytes() {
  
  return int32_little_endian_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_int32_little_endian_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.int32_little_endian_bytes)
  
  return int32_little_endian_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_int32_little_endian_bytes(std::string* int32_little_endian_bytes) {
  if (int32_little_endian_bytes != nullptr) {
    
  } else {
    
  }
  int32_little_endian_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), int32_little_endian_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.int32_little_endian_bytes)
}

// bytes int64_little_endian_bytes = 24;
inline void Tensor::clear_int64_little_endian_bytes() {
  int64_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::int64_little_endian_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.int64_little_endian_bytes)
  return _internal_int64_little_endian_bytes();
}
inline void Tensor::set_int64_little_endian_bytes(const std::string& value) {
  _internal_set_int64_little_endian_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.int64_little_endian_bytes)
}
inline std::string* Tensor::mutable_int64_little_endian_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.int64_little_endian_bytes)
  return _internal_mutable_int64_little_endian_bytes();
}
inline const std::string& Tensor::_internal_int64_little_endian_bytes() const {
  return int64_little_endian_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_int64_little_endian_bytes(const std::string& value) {
  
  int64_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_int64_little_endian_bytes(std::string&& value) {
  
  int64_little_endian_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.int64_little_endian_bytes)
}
inline void Tensor::set_int64_little_endian_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  int64_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.int64_little_endian_bytes)
}
inline void Tensor::set_int64_little_endian_bytes(const void* value, size_t size) {
  
  int64_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.int64_little_endian_bytes)
}
inline std::string* Tensor::_internal_mutable_int64_little_endian_bytes() {
  
  return int64_little_endian_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_int64_little_endian_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.int64_little_endian_bytes)
  
  return int64_little_endian_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_int64_little_endian_bytes(std::string* int64_little_endian_bytes) {
  if (int64_little_endian_bytes != nullptr) {
    
  } else {
    
  }
  int64_little_endian_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), int64_little_endian_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.int64_little_endian_bytes)
}

// bytes float_ieee754_little_endian_bytes = 25;
inline void Tensor::clear_float_ieee754_little_endian_bytes() {
  float_ieee754_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::float_ieee754_little_endian_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.float_ieee754_little_endian_bytes)
  return _internal_float_ieee754_little_endian_bytes();
}
inline void Tensor::set_float_ieee754_little_endian_bytes(const std::string& value) {
  _internal_set_float_ieee754_little_endian_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.float_ieee754_little_endian_bytes)
}
inline std::string* Tensor::mutable_float_ieee754_little_endian_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.float_ieee754_little_endian_bytes)
  return _internal_mutable_float_ieee754_little_endian_bytes();
}
inline const std::string& Tensor::_internal_float_ieee754_little_endian_bytes() const {
  return float_ieee754_little_endian_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_float_ieee754_little_endian_bytes(const std::string& value) {
  
  float_ieee754_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_float_ieee754_little_endian_bytes(std::string&& value) {
  
  float_ieee754_little_endian_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.float_ieee754_little_endian_bytes)
}
inline void Tensor::set_float_ieee754_little_endian_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  float_ieee754_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.float_ieee754_little_endian_bytes)
}
inline void Tensor::set_float_ieee754_little_endian_bytes(const void* value, size_t size) {
  
  float_ieee754_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.float_ieee754_little_endian_bytes)
}
inline std::string* Tensor::_internal_mutable_float_ieee754_little_endian_bytes() {
  
  return float_ieee754_little_endian_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_float_ieee754_little_endian_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.float_ieee754_little_endian_bytes)
  
  return float_ieee754_little_endian_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_float_ieee754_little_endian_bytes(std::string* float_ieee754_little_endian_bytes) {
  if (float_ieee754_little_endian_bytes != nullptr) {
    
  } else {
    
  }
  float_ieee754_little_endian_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), float_ieee754_little_endian_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.float_ieee754_little_endian_bytes)
}

// bytes double_ieee754_little_endian_bytes = 26;
inline void Tensor::clear_double_ieee754_little_endian_bytes() {
  double_ieee754_little_endian_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::double_ieee754_little_endian_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.double_ieee754_little_endian_bytes)
  return _internal_double_ieee754_little_endian_bytes();
}
inline void Tensor::set_double_ieee754_little_endian_bytes(const std::string& value) {
  _internal_set_double_ieee754_little_endian_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.double_ieee754_little_endian_bytes)
}
inline std::string* Tensor::mutable_double_ieee754_little_endian_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.double_ieee754_little_endian_bytes)
  return _internal_mutable_double_ieee754_little_endian_bytes();
}
inline const std::string& Tensor::_internal_double_ieee754_little_endian_bytes() const {
  return double_ieee754_little_endian_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_double_ieee754_little_endian_bytes(const std::string& value) {
  
  double_ieee754_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_double_ieee754_little_endian_bytes(std::string&& value) {
  
  double_ieee754_little_endian_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.double_ieee754_little_endian_bytes)
}
inline void Tensor::set_double_ieee754_little_endian_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  double_ieee754_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.double_ieee754_little_endian_bytes)
}
inline void Tensor::set_double_ieee754_little_endian_bytes(const void* value, size_t size) {
  
  double_ieee754_little_endian_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.double_ieee754_little_endian_bytes)
}
inline std::string* Tensor::_internal_mutable_double_ieee754_little_endian_bytes() {
  
  return double_ieee754_little_endian_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_double_ieee754_little_endian_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.double_ieee754_little_endian_bytes)
  
  return double_ieee754_little_endian_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_double_ieee754_little_endian_bytes(std::string* double_ieee754_little_endian_bytes) {
  if (double_ieee754_little_endian_bytes != nullptr) {
    
  } else {
    
  }
  double_ieee754_little_endian_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), double_ieee754_little_endian_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.double_ieee754_little_endian_bytes)
}

// bytes jpeg_bytes = 30;
inline void Tensor::clear_jpeg_bytes() {
  jpeg_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::jpeg_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.jpeg_bytes)
  return _internal_jpeg_bytes();
}
inline void Tensor::set_jpeg_bytes(const std::string& value) {
  _internal_set_jpeg_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.jpeg_bytes)
}
inline std::string* Tensor::mutable_jpeg_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.jpeg_bytes)
  return _internal_mutable_jpeg_bytes();
}
inline const std::string& Tensor::_internal_jpeg_bytes() const {
  return jpeg_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_jpeg_bytes(const std::string& value) {
  
  jpeg_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_jpeg_bytes(std::string&& value) {
  
  jpeg_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.jpeg_bytes)
}
inline void Tensor::set_jpeg_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jpeg_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.jpeg_bytes)
}
inline void Tensor::set_jpeg_bytes(const void* value, size_t size) {
  
  jpeg_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.jpeg_bytes)
}
inline std::string* Tensor::_internal_mutable_jpeg_bytes() {
  
  return jpeg_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_jpeg_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.jpeg_bytes)
  
  return jpeg_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_jpeg_bytes(std::string* jpeg_bytes) {
  if (jpeg_bytes != nullptr) {
    
  } else {
    
  }
  jpeg_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jpeg_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.jpeg_bytes)
}

// bytes png_bytes = 31;
inline void Tensor::clear_png_bytes() {
  png_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::png_bytes() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.math.Tensor.png_bytes)
  return _internal_png_bytes();
}
inline void Tensor::set_png_bytes(const std::string& value) {
  _internal_set_png_bytes(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.math.Tensor.png_bytes)
}
inline std::string* Tensor::mutable_png_bytes() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.math.Tensor.png_bytes)
  return _internal_mutable_png_bytes();
}
inline const std::string& Tensor::_internal_png_bytes() const {
  return png_bytes_.GetNoArena();
}
inline void Tensor::_internal_set_png_bytes(const std::string& value) {
  
  png_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_png_bytes(std::string&& value) {
  
  png_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.math.Tensor.png_bytes)
}
inline void Tensor::set_png_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  png_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.math.Tensor.png_bytes)
}
inline void Tensor::set_png_bytes(const void* value, size_t size) {
  
  png_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.math.Tensor.png_bytes)
}
inline std::string* Tensor::_internal_mutable_png_bytes() {
  
  return png_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_png_bytes() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.math.Tensor.png_bytes)
  
  return png_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_png_bytes(std::string* png_bytes) {
  if (png_bytes != nullptr) {
    
  } else {
    
  }
  png_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), png_bytes);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.math.Tensor.png_bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace math
}  // namespace proto
}  // namespace standard_cyborg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::standard_cyborg::proto::math::NumericType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::standard_cyborg::proto::math::NumericType>() {
  return ::standard_cyborg::proto::math::NumericType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fmath_2ftensor_2eproto
