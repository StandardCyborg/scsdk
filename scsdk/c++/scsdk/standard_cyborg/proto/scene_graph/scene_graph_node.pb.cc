// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/scene_graph/scene_graph_node.proto

#include "standard_cyborg/proto/scene_graph/scene_graph_node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Image_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2flandmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Landmark_standard_5fcyborg_2fproto_2fsc3d_2flandmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PinholeCamera_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fplane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Plane_standard_5fcyborg_2fproto_2fsc3d_2fplane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PointCloud_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2fpolyline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polyline_standard_5fcyborg_2fproto_2fsc3d_2fpolyline_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fsc3d_2ftriangle_5fmesh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TriangleMesh_standard_5fcyborg_2fproto_2fsc3d_2ftriangle_5fmesh_2eproto;
namespace standard_cyborg {
namespace proto {
namespace scene_graph {
class SceneGraphNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SceneGraphNode> _instance;
  const ::standard_cyborg::proto::sc3d::Polyline* polyline_;
  const ::standard_cyborg::proto::sc3d::Image* image_;
  const ::standard_cyborg::proto::sc3d::PinholeCamera* pinholecamera_;
  const ::standard_cyborg::proto::sc3d::PointCloud* pointcloud_;
  const ::standard_cyborg::proto::sc3d::TriangleMesh* trianglemesh_;
  const ::standard_cyborg::proto::sc3d::Plane* plane_;
  const ::standard_cyborg::proto::sc3d::Landmark* landmark_;
  bool isgenericnode_;
  bool iscoordinateframenode_;
  const ::standard_cyborg::proto::math::Vec3* pointposition_;
} _SceneGraphNode_default_instance_;
}  // namespace scene_graph
}  // namespace proto
}  // namespace standard_cyborg
static void InitDefaultsscc_info_SceneGraphNode_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_;
    new (ptr) ::standard_cyborg::proto::scene_graph::SceneGraphNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::standard_cyborg::proto::scene_graph::SceneGraphNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SceneGraphNode_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_SceneGraphNode_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto}, {
      &scc_info_Vec3_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto.base,
      &scc_info_Polyline_standard_5fcyborg_2fproto_2fsc3d_2fpolyline_2eproto.base,
      &scc_info_Image_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto.base,
      &scc_info_PinholeCamera_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto.base,
      &scc_info_PointCloud_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_2eproto.base,
      &scc_info_TriangleMesh_standard_5fcyborg_2fproto_2fsc3d_2ftriangle_5fmesh_2eproto.base,
      &scc_info_Plane_standard_5fcyborg_2fproto_2fsc3d_2fplane_2eproto.base,
      &scc_info_Landmark_standard_5fcyborg_2fproto_2fsc3d_2flandmark_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::scene_graph::SceneGraphNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::scene_graph::SceneGraphNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::scene_graph::SceneGraphNode, nodename_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::scene_graph::SceneGraphNode, objectcolor_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::scene_graph::SceneGraphNode, materialmodel_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::scene_graph::SceneGraphNode, children_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, polyline_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, image_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, pinholecamera_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, pointcloud_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, trianglemesh_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, plane_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, landmark_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, isgenericnode_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, iscoordinateframenode_),
  offsetof(::standard_cyborg::proto::scene_graph::SceneGraphNodeDefaultTypeInternal, pointposition_),
  PROTOBUF_FIELD_OFFSET(::standard_cyborg::proto::scene_graph::SceneGraphNode, contents_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::standard_cyborg::proto::scene_graph::SceneGraphNode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_),
};

const char descriptor_table_protodef_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8standard_cyborg/proto/scene_graph/scen"
  "e_graph_node.proto\022!standard_cyborg.prot"
  "o.scene_graph\032)standard_cyborg/proto/sc3"
  "d/polyline.proto\032&standard_cyborg/proto/"
  "sc3d/image.proto\0323standard_cyborg/proto/"
  "sc3d/perspective_camera.proto\032,standard_"
  "cyborg/proto/sc3d/point_cloud.proto\032.sta"
  "ndard_cyborg/proto/sc3d/triangle_mesh.pr"
  "oto\032&standard_cyborg/proto/sc3d/plane.pr"
  "oto\032)standard_cyborg/proto/sc3d/landmark"
  ".proto\032%standard_cyborg/proto/math/core."
  "proto\"\243\005\n\016SceneGraphNode\022\020\n\010nodeName\030\002 \001"
  "(\t\0225\n\013objectColor\030\003 \001(\0132 .standard_cybor"
  "g.proto.math.Vec3\022\025\n\rmaterialModel\030\004 \001(\005"
  "\022\020\n\010children\030\006 \003(\005\0228\n\010polyline\030\024 \001(\0132$.s"
  "tandard_cyborg.proto.sc3d.PolylineH\000\0222\n\005"
  "image\030\025 \001(\0132!.standard_cyborg.proto.sc3d"
  ".ImageH\000\022B\n\rpinholeCamera\030\026 \001(\0132).standa"
  "rd_cyborg.proto.sc3d.PinholeCameraH\000\022<\n\n"
  "pointCloud\030\027 \001(\0132&.standard_cyborg.proto"
  ".sc3d.PointCloudH\000\022@\n\014triangleMesh\030\030 \001(\013"
  "2(.standard_cyborg.proto.sc3d.TriangleMe"
  "shH\000\0222\n\005plane\030\031 \001(\0132!.standard_cyborg.pr"
  "oto.sc3d.PlaneH\000\0228\n\010landmark\030\032 \001(\0132$.sta"
  "ndard_cyborg.proto.sc3d.LandmarkH\000\022\027\n\ris"
  "GenericNode\030\033 \001(\010H\000\022\037\n\025isCoordinateFrame"
  "Node\030\034 \001(\010H\000\0229\n\rpointPosition\030\035 \001(\0132 .st"
  "andard_cyborg.proto.math.Vec3H\000B\n\n\010conte"
  "ntsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto_deps[8] = {
  &::descriptor_table_standard_5fcyborg_2fproto_2fmath_2fcore_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fimage_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2flandmark_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fperspective_5fcamera_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fplane_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpoint_5fcloud_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2fpolyline_2eproto,
  &::descriptor_table_standard_5fcyborg_2fproto_2fsc3d_2ftriangle_5fmesh_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto_sccs[1] = {
  &scc_info_SceneGraphNode_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto_once;
static bool descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto = {
  &descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto_initialized, descriptor_table_protodef_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto, "standard_cyborg/proto/scene_graph/scene_graph_node.proto", 1131,
  &descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto_once, descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto_sccs, descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto::offsets,
  file_level_metadata_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto, 1, file_level_enum_descriptors_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto, file_level_service_descriptors_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto), true);
namespace standard_cyborg {
namespace proto {
namespace scene_graph {

// ===================================================================

void SceneGraphNode::InitAsDefaultInstance() {
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_._instance.get_mutable()->objectcolor_ = const_cast< ::standard_cyborg::proto::math::Vec3*>(
      ::standard_cyborg::proto::math::Vec3::internal_default_instance());
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.polyline_ = const_cast< ::standard_cyborg::proto::sc3d::Polyline*>(
      ::standard_cyborg::proto::sc3d::Polyline::internal_default_instance());
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.image_ = const_cast< ::standard_cyborg::proto::sc3d::Image*>(
      ::standard_cyborg::proto::sc3d::Image::internal_default_instance());
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.pinholecamera_ = const_cast< ::standard_cyborg::proto::sc3d::PinholeCamera*>(
      ::standard_cyborg::proto::sc3d::PinholeCamera::internal_default_instance());
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.pointcloud_ = const_cast< ::standard_cyborg::proto::sc3d::PointCloud*>(
      ::standard_cyborg::proto::sc3d::PointCloud::internal_default_instance());
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.trianglemesh_ = const_cast< ::standard_cyborg::proto::sc3d::TriangleMesh*>(
      ::standard_cyborg::proto::sc3d::TriangleMesh::internal_default_instance());
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.plane_ = const_cast< ::standard_cyborg::proto::sc3d::Plane*>(
      ::standard_cyborg::proto::sc3d::Plane::internal_default_instance());
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.landmark_ = const_cast< ::standard_cyborg::proto::sc3d::Landmark*>(
      ::standard_cyborg::proto::sc3d::Landmark::internal_default_instance());
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.isgenericnode_ = false;
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.iscoordinateframenode_ = false;
  ::standard_cyborg::proto::scene_graph::_SceneGraphNode_default_instance_.pointposition_ = const_cast< ::standard_cyborg::proto::math::Vec3*>(
      ::standard_cyborg::proto::math::Vec3::internal_default_instance());
}
class SceneGraphNode::_Internal {
 public:
  static const ::standard_cyborg::proto::math::Vec3& objectcolor(const SceneGraphNode* msg);
  static const ::standard_cyborg::proto::sc3d::Polyline& polyline(const SceneGraphNode* msg);
  static const ::standard_cyborg::proto::sc3d::Image& image(const SceneGraphNode* msg);
  static const ::standard_cyborg::proto::sc3d::PinholeCamera& pinholecamera(const SceneGraphNode* msg);
  static const ::standard_cyborg::proto::sc3d::PointCloud& pointcloud(const SceneGraphNode* msg);
  static const ::standard_cyborg::proto::sc3d::TriangleMesh& trianglemesh(const SceneGraphNode* msg);
  static const ::standard_cyborg::proto::sc3d::Plane& plane(const SceneGraphNode* msg);
  static const ::standard_cyborg::proto::sc3d::Landmark& landmark(const SceneGraphNode* msg);
  static const ::standard_cyborg::proto::math::Vec3& pointposition(const SceneGraphNode* msg);
};

const ::standard_cyborg::proto::math::Vec3&
SceneGraphNode::_Internal::objectcolor(const SceneGraphNode* msg) {
  return *msg->objectcolor_;
}
const ::standard_cyborg::proto::sc3d::Polyline&
SceneGraphNode::_Internal::polyline(const SceneGraphNode* msg) {
  return *msg->contents_.polyline_;
}
const ::standard_cyborg::proto::sc3d::Image&
SceneGraphNode::_Internal::image(const SceneGraphNode* msg) {
  return *msg->contents_.image_;
}
const ::standard_cyborg::proto::sc3d::PinholeCamera&
SceneGraphNode::_Internal::pinholecamera(const SceneGraphNode* msg) {
  return *msg->contents_.pinholecamera_;
}
const ::standard_cyborg::proto::sc3d::PointCloud&
SceneGraphNode::_Internal::pointcloud(const SceneGraphNode* msg) {
  return *msg->contents_.pointcloud_;
}
const ::standard_cyborg::proto::sc3d::TriangleMesh&
SceneGraphNode::_Internal::trianglemesh(const SceneGraphNode* msg) {
  return *msg->contents_.trianglemesh_;
}
const ::standard_cyborg::proto::sc3d::Plane&
SceneGraphNode::_Internal::plane(const SceneGraphNode* msg) {
  return *msg->contents_.plane_;
}
const ::standard_cyborg::proto::sc3d::Landmark&
SceneGraphNode::_Internal::landmark(const SceneGraphNode* msg) {
  return *msg->contents_.landmark_;
}
const ::standard_cyborg::proto::math::Vec3&
SceneGraphNode::_Internal::pointposition(const SceneGraphNode* msg) {
  return *msg->contents_.pointposition_;
}
void SceneGraphNode::clear_objectcolor() {
  if (GetArenaNoVirtual() == nullptr && objectcolor_ != nullptr) {
    delete objectcolor_;
  }
  objectcolor_ = nullptr;
}
void SceneGraphNode::set_allocated_polyline(::standard_cyborg::proto::sc3d::Polyline* polyline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (polyline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      polyline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polyline, submessage_arena);
    }
    set_has_polyline();
    contents_.polyline_ = polyline;
  }
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.polyline)
}
void SceneGraphNode::clear_polyline() {
  if (_internal_has_polyline()) {
    delete contents_.polyline_;
    clear_has_contents();
  }
}
void SceneGraphNode::set_allocated_image(::standard_cyborg::proto::sc3d::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    contents_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.image)
}
void SceneGraphNode::clear_image() {
  if (_internal_has_image()) {
    delete contents_.image_;
    clear_has_contents();
  }
}
void SceneGraphNode::set_allocated_pinholecamera(::standard_cyborg::proto::sc3d::PinholeCamera* pinholecamera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (pinholecamera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pinholecamera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pinholecamera, submessage_arena);
    }
    set_has_pinholecamera();
    contents_.pinholecamera_ = pinholecamera;
  }
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.pinholeCamera)
}
void SceneGraphNode::clear_pinholecamera() {
  if (_internal_has_pinholecamera()) {
    delete contents_.pinholecamera_;
    clear_has_contents();
  }
}
void SceneGraphNode::set_allocated_pointcloud(::standard_cyborg::proto::sc3d::PointCloud* pointcloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (pointcloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointcloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointcloud, submessage_arena);
    }
    set_has_pointcloud();
    contents_.pointcloud_ = pointcloud;
  }
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.pointCloud)
}
void SceneGraphNode::clear_pointcloud() {
  if (_internal_has_pointcloud()) {
    delete contents_.pointcloud_;
    clear_has_contents();
  }
}
void SceneGraphNode::set_allocated_trianglemesh(::standard_cyborg::proto::sc3d::TriangleMesh* trianglemesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (trianglemesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trianglemesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trianglemesh, submessage_arena);
    }
    set_has_trianglemesh();
    contents_.trianglemesh_ = trianglemesh;
  }
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.triangleMesh)
}
void SceneGraphNode::clear_trianglemesh() {
  if (_internal_has_trianglemesh()) {
    delete contents_.trianglemesh_;
    clear_has_contents();
  }
}
void SceneGraphNode::set_allocated_plane(::standard_cyborg::proto::sc3d::Plane* plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plane, submessage_arena);
    }
    set_has_plane();
    contents_.plane_ = plane;
  }
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.plane)
}
void SceneGraphNode::clear_plane() {
  if (_internal_has_plane()) {
    delete contents_.plane_;
    clear_has_contents();
  }
}
void SceneGraphNode::set_allocated_landmark(::standard_cyborg::proto::sc3d::Landmark* landmark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (landmark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      landmark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landmark, submessage_arena);
    }
    set_has_landmark();
    contents_.landmark_ = landmark;
  }
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.landmark)
}
void SceneGraphNode::clear_landmark() {
  if (_internal_has_landmark()) {
    delete contents_.landmark_;
    clear_has_contents();
  }
}
void SceneGraphNode::set_allocated_pointposition(::standard_cyborg::proto::math::Vec3* pointposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (pointposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointposition, submessage_arena);
    }
    set_has_pointposition();
    contents_.pointposition_ = pointposition;
  }
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.pointPosition)
}
void SceneGraphNode::clear_pointposition() {
  if (_internal_has_pointposition()) {
    delete contents_.pointposition_;
    clear_has_contents();
  }
}
SceneGraphNode::SceneGraphNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:standard_cyborg.proto.scene_graph.SceneGraphNode)
}
SceneGraphNode::SceneGraphNode(const SceneGraphNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodename().empty()) {
    nodename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
  if (from._internal_has_objectcolor()) {
    objectcolor_ = new ::standard_cyborg::proto::math::Vec3(*from.objectcolor_);
  } else {
    objectcolor_ = nullptr;
  }
  materialmodel_ = from.materialmodel_;
  clear_has_contents();
  switch (from.contents_case()) {
    case kPolyline: {
      _internal_mutable_polyline()->::standard_cyborg::proto::sc3d::Polyline::MergeFrom(from._internal_polyline());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::standard_cyborg::proto::sc3d::Image::MergeFrom(from._internal_image());
      break;
    }
    case kPinholeCamera: {
      _internal_mutable_pinholecamera()->::standard_cyborg::proto::sc3d::PinholeCamera::MergeFrom(from._internal_pinholecamera());
      break;
    }
    case kPointCloud: {
      _internal_mutable_pointcloud()->::standard_cyborg::proto::sc3d::PointCloud::MergeFrom(from._internal_pointcloud());
      break;
    }
    case kTriangleMesh: {
      _internal_mutable_trianglemesh()->::standard_cyborg::proto::sc3d::TriangleMesh::MergeFrom(from._internal_trianglemesh());
      break;
    }
    case kPlane: {
      _internal_mutable_plane()->::standard_cyborg::proto::sc3d::Plane::MergeFrom(from._internal_plane());
      break;
    }
    case kLandmark: {
      _internal_mutable_landmark()->::standard_cyborg::proto::sc3d::Landmark::MergeFrom(from._internal_landmark());
      break;
    }
    case kIsGenericNode: {
      _internal_set_isgenericnode(from._internal_isgenericnode());
      break;
    }
    case kIsCoordinateFrameNode: {
      _internal_set_iscoordinateframenode(from._internal_iscoordinateframenode());
      break;
    }
    case kPointPosition: {
      _internal_mutable_pointposition()->::standard_cyborg::proto::math::Vec3::MergeFrom(from._internal_pointposition());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:standard_cyborg.proto.scene_graph.SceneGraphNode)
}

void SceneGraphNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SceneGraphNode_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto.base);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&objectcolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&materialmodel_) -
      reinterpret_cast<char*>(&objectcolor_)) + sizeof(materialmodel_));
  clear_has_contents();
}

SceneGraphNode::~SceneGraphNode() {
  // @@protoc_insertion_point(destructor:standard_cyborg.proto.scene_graph.SceneGraphNode)
  SharedDtor();
}

void SceneGraphNode::SharedDtor() {
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete objectcolor_;
  if (has_contents()) {
    clear_contents();
  }
}

void SceneGraphNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SceneGraphNode& SceneGraphNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SceneGraphNode_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto.base);
  return *internal_default_instance();
}


void SceneGraphNode::clear_contents() {
// @@protoc_insertion_point(one_of_clear_start:standard_cyborg.proto.scene_graph.SceneGraphNode)
  switch (contents_case()) {
    case kPolyline: {
      delete contents_.polyline_;
      break;
    }
    case kImage: {
      delete contents_.image_;
      break;
    }
    case kPinholeCamera: {
      delete contents_.pinholecamera_;
      break;
    }
    case kPointCloud: {
      delete contents_.pointcloud_;
      break;
    }
    case kTriangleMesh: {
      delete contents_.trianglemesh_;
      break;
    }
    case kPlane: {
      delete contents_.plane_;
      break;
    }
    case kLandmark: {
      delete contents_.landmark_;
      break;
    }
    case kIsGenericNode: {
      // No need to clear
      break;
    }
    case kIsCoordinateFrameNode: {
      // No need to clear
      break;
    }
    case kPointPosition: {
      delete contents_.pointposition_;
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENTS_NOT_SET;
}


void SceneGraphNode::Clear() {
// @@protoc_insertion_point(message_clear_start:standard_cyborg.proto.scene_graph.SceneGraphNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  nodename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && objectcolor_ != nullptr) {
    delete objectcolor_;
  }
  objectcolor_ = nullptr;
  materialmodel_ = 0;
  clear_contents();
  _internal_metadata_.Clear();
}

const char* SceneGraphNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodeName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Vec3 objectColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectcolor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 materialModel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          materialmodel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 children = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.Polyline polyline = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_polyline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.Image image = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.PinholeCamera pinholeCamera = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_pinholecamera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.PointCloud pointCloud = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointcloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.TriangleMesh triangleMesh = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_trianglemesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.Plane plane = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_plane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.sc3d.Landmark landmark = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_landmark(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isGenericNode = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _internal_set_isgenericnode(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isCoordinateFrameNode = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _internal_set_iscoordinateframenode(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .standard_cyborg.proto.math.Vec3 pointPosition = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_pointposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SceneGraphNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:standard_cyborg.proto.scene_graph.SceneGraphNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeName = 2;
  if (this->nodename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nodename(), target);
  }

  // .standard_cyborg.proto.math.Vec3 objectColor = 3;
  if (this->has_objectcolor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::objectcolor(this), target, stream);
  }

  // int32 materialModel = 4;
  if (this->materialmodel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_materialmodel(), target);
  }

  // repeated int32 children = 6;
  {
    int byte_size = _children_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_children(), byte_size, target);
    }
  }

  // .standard_cyborg.proto.sc3d.Polyline polyline = 20;
  if (_internal_has_polyline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::polyline(this), target, stream);
  }

  // .standard_cyborg.proto.sc3d.Image image = 21;
  if (_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::image(this), target, stream);
  }

  // .standard_cyborg.proto.sc3d.PinholeCamera pinholeCamera = 22;
  if (_internal_has_pinholecamera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::pinholecamera(this), target, stream);
  }

  // .standard_cyborg.proto.sc3d.PointCloud pointCloud = 23;
  if (_internal_has_pointcloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::pointcloud(this), target, stream);
  }

  // .standard_cyborg.proto.sc3d.TriangleMesh triangleMesh = 24;
  if (_internal_has_trianglemesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::trianglemesh(this), target, stream);
  }

  // .standard_cyborg.proto.sc3d.Plane plane = 25;
  if (_internal_has_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::plane(this), target, stream);
  }

  // .standard_cyborg.proto.sc3d.Landmark landmark = 26;
  if (_internal_has_landmark()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::landmark(this), target, stream);
  }

  // bool isGenericNode = 27;
  if (_internal_has_isgenericnode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_isgenericnode(), target);
  }

  // bool isCoordinateFrameNode = 28;
  if (_internal_has_iscoordinateframenode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_iscoordinateframenode(), target);
  }

  // .standard_cyborg.proto.math.Vec3 pointPosition = 29;
  if (_internal_has_pointposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::pointposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:standard_cyborg.proto.scene_graph.SceneGraphNode)
  return target;
}

size_t SceneGraphNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:standard_cyborg.proto.scene_graph.SceneGraphNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 children = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->children_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string nodeName = 2;
  if (this->nodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  // .standard_cyborg.proto.math.Vec3 objectColor = 3;
  if (this->has_objectcolor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objectcolor_);
  }

  // int32 materialModel = 4;
  if (this->materialmodel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_materialmodel());
  }

  switch (contents_case()) {
    // .standard_cyborg.proto.sc3d.Polyline polyline = 20;
    case kPolyline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.polyline_);
      break;
    }
    // .standard_cyborg.proto.sc3d.Image image = 21;
    case kImage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.image_);
      break;
    }
    // .standard_cyborg.proto.sc3d.PinholeCamera pinholeCamera = 22;
    case kPinholeCamera: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.pinholecamera_);
      break;
    }
    // .standard_cyborg.proto.sc3d.PointCloud pointCloud = 23;
    case kPointCloud: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.pointcloud_);
      break;
    }
    // .standard_cyborg.proto.sc3d.TriangleMesh triangleMesh = 24;
    case kTriangleMesh: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.trianglemesh_);
      break;
    }
    // .standard_cyborg.proto.sc3d.Plane plane = 25;
    case kPlane: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.plane_);
      break;
    }
    // .standard_cyborg.proto.sc3d.Landmark landmark = 26;
    case kLandmark: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.landmark_);
      break;
    }
    // bool isGenericNode = 27;
    case kIsGenericNode: {
      total_size += 2 + 1;
      break;
    }
    // bool isCoordinateFrameNode = 28;
    case kIsCoordinateFrameNode: {
      total_size += 2 + 1;
      break;
    }
    // .standard_cyborg.proto.math.Vec3 pointPosition = 29;
    case kPointPosition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.pointposition_);
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SceneGraphNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:standard_cyborg.proto.scene_graph.SceneGraphNode)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGraphNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SceneGraphNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:standard_cyborg.proto.scene_graph.SceneGraphNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:standard_cyborg.proto.scene_graph.SceneGraphNode)
    MergeFrom(*source);
  }
}

void SceneGraphNode::MergeFrom(const SceneGraphNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:standard_cyborg.proto.scene_graph.SceneGraphNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.nodename().size() > 0) {

    nodename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
  if (from.has_objectcolor()) {
    _internal_mutable_objectcolor()->::standard_cyborg::proto::math::Vec3::MergeFrom(from._internal_objectcolor());
  }
  if (from.materialmodel() != 0) {
    _internal_set_materialmodel(from._internal_materialmodel());
  }
  switch (from.contents_case()) {
    case kPolyline: {
      _internal_mutable_polyline()->::standard_cyborg::proto::sc3d::Polyline::MergeFrom(from._internal_polyline());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::standard_cyborg::proto::sc3d::Image::MergeFrom(from._internal_image());
      break;
    }
    case kPinholeCamera: {
      _internal_mutable_pinholecamera()->::standard_cyborg::proto::sc3d::PinholeCamera::MergeFrom(from._internal_pinholecamera());
      break;
    }
    case kPointCloud: {
      _internal_mutable_pointcloud()->::standard_cyborg::proto::sc3d::PointCloud::MergeFrom(from._internal_pointcloud());
      break;
    }
    case kTriangleMesh: {
      _internal_mutable_trianglemesh()->::standard_cyborg::proto::sc3d::TriangleMesh::MergeFrom(from._internal_trianglemesh());
      break;
    }
    case kPlane: {
      _internal_mutable_plane()->::standard_cyborg::proto::sc3d::Plane::MergeFrom(from._internal_plane());
      break;
    }
    case kLandmark: {
      _internal_mutable_landmark()->::standard_cyborg::proto::sc3d::Landmark::MergeFrom(from._internal_landmark());
      break;
    }
    case kIsGenericNode: {
      _internal_set_isgenericnode(from._internal_isgenericnode());
      break;
    }
    case kIsCoordinateFrameNode: {
      _internal_set_iscoordinateframenode(from._internal_iscoordinateframenode());
      break;
    }
    case kPointPosition: {
      _internal_mutable_pointposition()->::standard_cyborg::proto::math::Vec3::MergeFrom(from._internal_pointposition());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
}

void SceneGraphNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:standard_cyborg.proto.scene_graph.SceneGraphNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGraphNode::CopyFrom(const SceneGraphNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:standard_cyborg.proto.scene_graph.SceneGraphNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGraphNode::IsInitialized() const {
  return true;
}

void SceneGraphNode::InternalSwap(SceneGraphNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  nodename_.Swap(&other->nodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(objectcolor_, other->objectcolor_);
  swap(materialmodel_, other->materialmodel_);
  swap(contents_, other->contents_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneGraphNode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace scene_graph
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::standard_cyborg::proto::scene_graph::SceneGraphNode* Arena::CreateMaybeMessage< ::standard_cyborg::proto::scene_graph::SceneGraphNode >(Arena* arena) {
  return Arena::CreateInternal< ::standard_cyborg::proto::scene_graph::SceneGraphNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
