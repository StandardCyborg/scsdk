// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: standard_cyborg/proto/scene_graph/scene_graph_node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "standard_cyborg/proto/sc3d/polyline.pb.h"
#include "standard_cyborg/proto/sc3d/image.pb.h"
#include "standard_cyborg/proto/sc3d/perspective_camera.pb.h"
#include "standard_cyborg/proto/sc3d/point_cloud.pb.h"
#include "standard_cyborg/proto/sc3d/triangle_mesh.pb.h"
#include "standard_cyborg/proto/sc3d/plane.pb.h"
#include "standard_cyborg/proto/sc3d/landmark.pb.h"
#include "standard_cyborg/proto/math/core.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto;
namespace standard_cyborg {
namespace proto {
namespace scene_graph {
class SceneGraphNode;
class SceneGraphNodeDefaultTypeInternal;
extern SceneGraphNodeDefaultTypeInternal _SceneGraphNode_default_instance_;
}  // namespace scene_graph
}  // namespace proto
}  // namespace standard_cyborg
PROTOBUF_NAMESPACE_OPEN
template<> ::standard_cyborg::proto::scene_graph::SceneGraphNode* Arena::CreateMaybeMessage<::standard_cyborg::proto::scene_graph::SceneGraphNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace standard_cyborg {
namespace proto {
namespace scene_graph {

// ===================================================================

class SceneGraphNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:standard_cyborg.proto.scene_graph.SceneGraphNode) */ {
 public:
  SceneGraphNode();
  virtual ~SceneGraphNode();

  SceneGraphNode(const SceneGraphNode& from);
  SceneGraphNode(SceneGraphNode&& from) noexcept
    : SceneGraphNode() {
    *this = ::std::move(from);
  }

  inline SceneGraphNode& operator=(const SceneGraphNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneGraphNode& operator=(SceneGraphNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneGraphNode& default_instance();

  enum ContentsCase {
    kPolyline = 20,
    kImage = 21,
    kPinholeCamera = 22,
    kPointCloud = 23,
    kTriangleMesh = 24,
    kPlane = 25,
    kLandmark = 26,
    kIsGenericNode = 27,
    kIsCoordinateFrameNode = 28,
    kPointPosition = 29,
    CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGraphNode* internal_default_instance() {
    return reinterpret_cast<const SceneGraphNode*>(
               &_SceneGraphNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SceneGraphNode& a, SceneGraphNode& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneGraphNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneGraphNode* New() const final {
    return CreateMaybeMessage<SceneGraphNode>(nullptr);
  }

  SceneGraphNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneGraphNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneGraphNode& from);
  void MergeFrom(const SceneGraphNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGraphNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "standard_cyborg.proto.scene_graph.SceneGraphNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto);
    return ::descriptor_table_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 6,
    kNodeNameFieldNumber = 2,
    kObjectColorFieldNumber = 3,
    kMaterialModelFieldNumber = 4,
    kPolylineFieldNumber = 20,
    kImageFieldNumber = 21,
    kPinholeCameraFieldNumber = 22,
    kPointCloudFieldNumber = 23,
    kTriangleMeshFieldNumber = 24,
    kPlaneFieldNumber = 25,
    kLandmarkFieldNumber = 26,
    kIsGenericNodeFieldNumber = 27,
    kIsCoordinateFrameNodeFieldNumber = 28,
    kPointPositionFieldNumber = 29,
  };
  // repeated int32 children = 6;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_children(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_children() const;
  void _internal_add_children(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_children();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 children(int index) const;
  void set_children(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_children(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_children();

  // string nodeName = 2;
  void clear_nodename();
  const std::string& nodename() const;
  void set_nodename(const std::string& value);
  void set_nodename(std::string&& value);
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  std::string* mutable_nodename();
  std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // .standard_cyborg.proto.math.Vec3 objectColor = 3;
  bool has_objectcolor() const;
  private:
  bool _internal_has_objectcolor() const;
  public:
  void clear_objectcolor();
  const ::standard_cyborg::proto::math::Vec3& objectcolor() const;
  ::standard_cyborg::proto::math::Vec3* release_objectcolor();
  ::standard_cyborg::proto::math::Vec3* mutable_objectcolor();
  void set_allocated_objectcolor(::standard_cyborg::proto::math::Vec3* objectcolor);
  private:
  const ::standard_cyborg::proto::math::Vec3& _internal_objectcolor() const;
  ::standard_cyborg::proto::math::Vec3* _internal_mutable_objectcolor();
  public:

  // int32 materialModel = 4;
  void clear_materialmodel();
  ::PROTOBUF_NAMESPACE_ID::int32 materialmodel() const;
  void set_materialmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_materialmodel() const;
  void _internal_set_materialmodel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .standard_cyborg.proto.sc3d.Polyline polyline = 20;
  bool has_polyline() const;
  private:
  bool _internal_has_polyline() const;
  public:
  void clear_polyline();
  const ::standard_cyborg::proto::sc3d::Polyline& polyline() const;
  ::standard_cyborg::proto::sc3d::Polyline* release_polyline();
  ::standard_cyborg::proto::sc3d::Polyline* mutable_polyline();
  void set_allocated_polyline(::standard_cyborg::proto::sc3d::Polyline* polyline);
  private:
  const ::standard_cyborg::proto::sc3d::Polyline& _internal_polyline() const;
  ::standard_cyborg::proto::sc3d::Polyline* _internal_mutable_polyline();
  public:

  // .standard_cyborg.proto.sc3d.Image image = 21;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::standard_cyborg::proto::sc3d::Image& image() const;
  ::standard_cyborg::proto::sc3d::Image* release_image();
  ::standard_cyborg::proto::sc3d::Image* mutable_image();
  void set_allocated_image(::standard_cyborg::proto::sc3d::Image* image);
  private:
  const ::standard_cyborg::proto::sc3d::Image& _internal_image() const;
  ::standard_cyborg::proto::sc3d::Image* _internal_mutable_image();
  public:

  // .standard_cyborg.proto.sc3d.PinholeCamera pinholeCamera = 22;
  bool has_pinholecamera() const;
  private:
  bool _internal_has_pinholecamera() const;
  public:
  void clear_pinholecamera();
  const ::standard_cyborg::proto::sc3d::PinholeCamera& pinholecamera() const;
  ::standard_cyborg::proto::sc3d::PinholeCamera* release_pinholecamera();
  ::standard_cyborg::proto::sc3d::PinholeCamera* mutable_pinholecamera();
  void set_allocated_pinholecamera(::standard_cyborg::proto::sc3d::PinholeCamera* pinholecamera);
  private:
  const ::standard_cyborg::proto::sc3d::PinholeCamera& _internal_pinholecamera() const;
  ::standard_cyborg::proto::sc3d::PinholeCamera* _internal_mutable_pinholecamera();
  public:

  // .standard_cyborg.proto.sc3d.PointCloud pointCloud = 23;
  bool has_pointcloud() const;
  private:
  bool _internal_has_pointcloud() const;
  public:
  void clear_pointcloud();
  const ::standard_cyborg::proto::sc3d::PointCloud& pointcloud() const;
  ::standard_cyborg::proto::sc3d::PointCloud* release_pointcloud();
  ::standard_cyborg::proto::sc3d::PointCloud* mutable_pointcloud();
  void set_allocated_pointcloud(::standard_cyborg::proto::sc3d::PointCloud* pointcloud);
  private:
  const ::standard_cyborg::proto::sc3d::PointCloud& _internal_pointcloud() const;
  ::standard_cyborg::proto::sc3d::PointCloud* _internal_mutable_pointcloud();
  public:

  // .standard_cyborg.proto.sc3d.TriangleMesh triangleMesh = 24;
  bool has_trianglemesh() const;
  private:
  bool _internal_has_trianglemesh() const;
  public:
  void clear_trianglemesh();
  const ::standard_cyborg::proto::sc3d::TriangleMesh& trianglemesh() const;
  ::standard_cyborg::proto::sc3d::TriangleMesh* release_trianglemesh();
  ::standard_cyborg::proto::sc3d::TriangleMesh* mutable_trianglemesh();
  void set_allocated_trianglemesh(::standard_cyborg::proto::sc3d::TriangleMesh* trianglemesh);
  private:
  const ::standard_cyborg::proto::sc3d::TriangleMesh& _internal_trianglemesh() const;
  ::standard_cyborg::proto::sc3d::TriangleMesh* _internal_mutable_trianglemesh();
  public:

  // .standard_cyborg.proto.sc3d.Plane plane = 25;
  bool has_plane() const;
  private:
  bool _internal_has_plane() const;
  public:
  void clear_plane();
  const ::standard_cyborg::proto::sc3d::Plane& plane() const;
  ::standard_cyborg::proto::sc3d::Plane* release_plane();
  ::standard_cyborg::proto::sc3d::Plane* mutable_plane();
  void set_allocated_plane(::standard_cyborg::proto::sc3d::Plane* plane);
  private:
  const ::standard_cyborg::proto::sc3d::Plane& _internal_plane() const;
  ::standard_cyborg::proto::sc3d::Plane* _internal_mutable_plane();
  public:

  // .standard_cyborg.proto.sc3d.Landmark landmark = 26;
  bool has_landmark() const;
  private:
  bool _internal_has_landmark() const;
  public:
  void clear_landmark();
  const ::standard_cyborg::proto::sc3d::Landmark& landmark() const;
  ::standard_cyborg::proto::sc3d::Landmark* release_landmark();
  ::standard_cyborg::proto::sc3d::Landmark* mutable_landmark();
  void set_allocated_landmark(::standard_cyborg::proto::sc3d::Landmark* landmark);
  private:
  const ::standard_cyborg::proto::sc3d::Landmark& _internal_landmark() const;
  ::standard_cyborg::proto::sc3d::Landmark* _internal_mutable_landmark();
  public:

  // bool isGenericNode = 27;
  private:
  bool _internal_has_isgenericnode() const;
  public:
  void clear_isgenericnode();
  bool isgenericnode() const;
  void set_isgenericnode(bool value);
  private:
  bool _internal_isgenericnode() const;
  void _internal_set_isgenericnode(bool value);
  public:

  // bool isCoordinateFrameNode = 28;
  private:
  bool _internal_has_iscoordinateframenode() const;
  public:
  void clear_iscoordinateframenode();
  bool iscoordinateframenode() const;
  void set_iscoordinateframenode(bool value);
  private:
  bool _internal_iscoordinateframenode() const;
  void _internal_set_iscoordinateframenode(bool value);
  public:

  // .standard_cyborg.proto.math.Vec3 pointPosition = 29;
  bool has_pointposition() const;
  private:
  bool _internal_has_pointposition() const;
  public:
  void clear_pointposition();
  const ::standard_cyborg::proto::math::Vec3& pointposition() const;
  ::standard_cyborg::proto::math::Vec3* release_pointposition();
  ::standard_cyborg::proto::math::Vec3* mutable_pointposition();
  void set_allocated_pointposition(::standard_cyborg::proto::math::Vec3* pointposition);
  private:
  const ::standard_cyborg::proto::math::Vec3& _internal_pointposition() const;
  ::standard_cyborg::proto::math::Vec3* _internal_mutable_pointposition();
  public:

  void clear_contents();
  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:standard_cyborg.proto.scene_graph.SceneGraphNode)
 private:
  class _Internal;
  void set_has_polyline();
  void set_has_image();
  void set_has_pinholecamera();
  void set_has_pointcloud();
  void set_has_trianglemesh();
  void set_has_plane();
  void set_has_landmark();
  void set_has_isgenericnode();
  void set_has_iscoordinateframenode();
  void set_has_pointposition();

  inline bool has_contents() const;
  inline void clear_has_contents();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > children_;
  mutable std::atomic<int> _children_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::standard_cyborg::proto::math::Vec3* objectcolor_;
  ::PROTOBUF_NAMESPACE_ID::int32 materialmodel_;
  union ContentsUnion {
    ContentsUnion() {}
    ::standard_cyborg::proto::sc3d::Polyline* polyline_;
    ::standard_cyborg::proto::sc3d::Image* image_;
    ::standard_cyborg::proto::sc3d::PinholeCamera* pinholecamera_;
    ::standard_cyborg::proto::sc3d::PointCloud* pointcloud_;
    ::standard_cyborg::proto::sc3d::TriangleMesh* trianglemesh_;
    ::standard_cyborg::proto::sc3d::Plane* plane_;
    ::standard_cyborg::proto::sc3d::Landmark* landmark_;
    bool isgenericnode_;
    bool iscoordinateframenode_;
    ::standard_cyborg::proto::math::Vec3* pointposition_;
  } contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SceneGraphNode

// string nodeName = 2;
inline void SceneGraphNode::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SceneGraphNode::nodename() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName)
  return _internal_nodename();
}
inline void SceneGraphNode::set_nodename(const std::string& value) {
  _internal_set_nodename(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName)
}
inline std::string* SceneGraphNode::mutable_nodename() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName)
  return _internal_mutable_nodename();
}
inline const std::string& SceneGraphNode::_internal_nodename() const {
  return nodename_.GetNoArena();
}
inline void SceneGraphNode::_internal_set_nodename(const std::string& value) {
  
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SceneGraphNode::set_nodename(std::string&& value) {
  
  nodename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName)
}
inline void SceneGraphNode::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName)
}
inline void SceneGraphNode::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName)
}
inline std::string* SceneGraphNode::_internal_mutable_nodename() {
  
  return nodename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SceneGraphNode::release_nodename() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName)
  
  return nodename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SceneGraphNode::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.nodeName)
}

// .standard_cyborg.proto.math.Vec3 objectColor = 3;
inline bool SceneGraphNode::_internal_has_objectcolor() const {
  return this != internal_default_instance() && objectcolor_ != nullptr;
}
inline bool SceneGraphNode::has_objectcolor() const {
  return _internal_has_objectcolor();
}
inline const ::standard_cyborg::proto::math::Vec3& SceneGraphNode::_internal_objectcolor() const {
  const ::standard_cyborg::proto::math::Vec3* p = objectcolor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::standard_cyborg::proto::math::Vec3*>(
      &::standard_cyborg::proto::math::_Vec3_default_instance_);
}
inline const ::standard_cyborg::proto::math::Vec3& SceneGraphNode::objectcolor() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.objectColor)
  return _internal_objectcolor();
}
inline ::standard_cyborg::proto::math::Vec3* SceneGraphNode::release_objectcolor() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.objectColor)
  
  ::standard_cyborg::proto::math::Vec3* temp = objectcolor_;
  objectcolor_ = nullptr;
  return temp;
}
inline ::standard_cyborg::proto::math::Vec3* SceneGraphNode::_internal_mutable_objectcolor() {
  
  if (objectcolor_ == nullptr) {
    auto* p = CreateMaybeMessage<::standard_cyborg::proto::math::Vec3>(GetArenaNoVirtual());
    objectcolor_ = p;
  }
  return objectcolor_;
}
inline ::standard_cyborg::proto::math::Vec3* SceneGraphNode::mutable_objectcolor() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.objectColor)
  return _internal_mutable_objectcolor();
}
inline void SceneGraphNode::set_allocated_objectcolor(::standard_cyborg::proto::math::Vec3* objectcolor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectcolor_);
  }
  if (objectcolor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      objectcolor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectcolor, submessage_arena);
    }
    
  } else {
    
  }
  objectcolor_ = objectcolor;
  // @@protoc_insertion_point(field_set_allocated:standard_cyborg.proto.scene_graph.SceneGraphNode.objectColor)
}

// int32 materialModel = 4;
inline void SceneGraphNode::clear_materialmodel() {
  materialmodel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneGraphNode::_internal_materialmodel() const {
  return materialmodel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneGraphNode::materialmodel() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.materialModel)
  return _internal_materialmodel();
}
inline void SceneGraphNode::_internal_set_materialmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  materialmodel_ = value;
}
inline void SceneGraphNode::set_materialmodel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_materialmodel(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.scene_graph.SceneGraphNode.materialModel)
}

// repeated int32 children = 6;
inline int SceneGraphNode::_internal_children_size() const {
  return children_.size();
}
inline int SceneGraphNode::children_size() const {
  return _internal_children_size();
}
inline void SceneGraphNode::clear_children() {
  children_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneGraphNode::_internal_children(int index) const {
  return children_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SceneGraphNode::children(int index) const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.children)
  return _internal_children(index);
}
inline void SceneGraphNode::set_children(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.scene_graph.SceneGraphNode.children)
}
inline void SceneGraphNode::_internal_add_children(::PROTOBUF_NAMESPACE_ID::int32 value) {
  children_.Add(value);
}
inline void SceneGraphNode::add_children(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_children(value);
  // @@protoc_insertion_point(field_add:standard_cyborg.proto.scene_graph.SceneGraphNode.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SceneGraphNode::_internal_children() const {
  return children_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SceneGraphNode::children() const {
  // @@protoc_insertion_point(field_list:standard_cyborg.proto.scene_graph.SceneGraphNode.children)
  return _internal_children();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SceneGraphNode::_internal_mutable_children() {
  return &children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SceneGraphNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:standard_cyborg.proto.scene_graph.SceneGraphNode.children)
  return _internal_mutable_children();
}

// .standard_cyborg.proto.sc3d.Polyline polyline = 20;
inline bool SceneGraphNode::_internal_has_polyline() const {
  return contents_case() == kPolyline;
}
inline bool SceneGraphNode::has_polyline() const {
  return _internal_has_polyline();
}
inline void SceneGraphNode::set_has_polyline() {
  _oneof_case_[0] = kPolyline;
}
inline ::standard_cyborg::proto::sc3d::Polyline* SceneGraphNode::release_polyline() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.polyline)
  if (_internal_has_polyline()) {
    clear_has_contents();
      ::standard_cyborg::proto::sc3d::Polyline* temp = contents_.polyline_;
    contents_.polyline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::standard_cyborg::proto::sc3d::Polyline& SceneGraphNode::_internal_polyline() const {
  return _internal_has_polyline()
      ? *contents_.polyline_
      : *reinterpret_cast< ::standard_cyborg::proto::sc3d::Polyline*>(&::standard_cyborg::proto::sc3d::_Polyline_default_instance_);
}
inline const ::standard_cyborg::proto::sc3d::Polyline& SceneGraphNode::polyline() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.polyline)
  return _internal_polyline();
}
inline ::standard_cyborg::proto::sc3d::Polyline* SceneGraphNode::_internal_mutable_polyline() {
  if (!_internal_has_polyline()) {
    clear_contents();
    set_has_polyline();
    contents_.polyline_ = CreateMaybeMessage< ::standard_cyborg::proto::sc3d::Polyline >(
        GetArenaNoVirtual());
  }
  return contents_.polyline_;
}
inline ::standard_cyborg::proto::sc3d::Polyline* SceneGraphNode::mutable_polyline() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.polyline)
  return _internal_mutable_polyline();
}

// .standard_cyborg.proto.sc3d.Image image = 21;
inline bool SceneGraphNode::_internal_has_image() const {
  return contents_case() == kImage;
}
inline bool SceneGraphNode::has_image() const {
  return _internal_has_image();
}
inline void SceneGraphNode::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline ::standard_cyborg::proto::sc3d::Image* SceneGraphNode::release_image() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.image)
  if (_internal_has_image()) {
    clear_has_contents();
      ::standard_cyborg::proto::sc3d::Image* temp = contents_.image_;
    contents_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::standard_cyborg::proto::sc3d::Image& SceneGraphNode::_internal_image() const {
  return _internal_has_image()
      ? *contents_.image_
      : *reinterpret_cast< ::standard_cyborg::proto::sc3d::Image*>(&::standard_cyborg::proto::sc3d::_Image_default_instance_);
}
inline const ::standard_cyborg::proto::sc3d::Image& SceneGraphNode::image() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.image)
  return _internal_image();
}
inline ::standard_cyborg::proto::sc3d::Image* SceneGraphNode::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_contents();
    set_has_image();
    contents_.image_ = CreateMaybeMessage< ::standard_cyborg::proto::sc3d::Image >(
        GetArenaNoVirtual());
  }
  return contents_.image_;
}
inline ::standard_cyborg::proto::sc3d::Image* SceneGraphNode::mutable_image() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.image)
  return _internal_mutable_image();
}

// .standard_cyborg.proto.sc3d.PinholeCamera pinholeCamera = 22;
inline bool SceneGraphNode::_internal_has_pinholecamera() const {
  return contents_case() == kPinholeCamera;
}
inline bool SceneGraphNode::has_pinholecamera() const {
  return _internal_has_pinholecamera();
}
inline void SceneGraphNode::set_has_pinholecamera() {
  _oneof_case_[0] = kPinholeCamera;
}
inline ::standard_cyborg::proto::sc3d::PinholeCamera* SceneGraphNode::release_pinholecamera() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.pinholeCamera)
  if (_internal_has_pinholecamera()) {
    clear_has_contents();
      ::standard_cyborg::proto::sc3d::PinholeCamera* temp = contents_.pinholecamera_;
    contents_.pinholecamera_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::standard_cyborg::proto::sc3d::PinholeCamera& SceneGraphNode::_internal_pinholecamera() const {
  return _internal_has_pinholecamera()
      ? *contents_.pinholecamera_
      : *reinterpret_cast< ::standard_cyborg::proto::sc3d::PinholeCamera*>(&::standard_cyborg::proto::sc3d::_PinholeCamera_default_instance_);
}
inline const ::standard_cyborg::proto::sc3d::PinholeCamera& SceneGraphNode::pinholecamera() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.pinholeCamera)
  return _internal_pinholecamera();
}
inline ::standard_cyborg::proto::sc3d::PinholeCamera* SceneGraphNode::_internal_mutable_pinholecamera() {
  if (!_internal_has_pinholecamera()) {
    clear_contents();
    set_has_pinholecamera();
    contents_.pinholecamera_ = CreateMaybeMessage< ::standard_cyborg::proto::sc3d::PinholeCamera >(
        GetArenaNoVirtual());
  }
  return contents_.pinholecamera_;
}
inline ::standard_cyborg::proto::sc3d::PinholeCamera* SceneGraphNode::mutable_pinholecamera() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.pinholeCamera)
  return _internal_mutable_pinholecamera();
}

// .standard_cyborg.proto.sc3d.PointCloud pointCloud = 23;
inline bool SceneGraphNode::_internal_has_pointcloud() const {
  return contents_case() == kPointCloud;
}
inline bool SceneGraphNode::has_pointcloud() const {
  return _internal_has_pointcloud();
}
inline void SceneGraphNode::set_has_pointcloud() {
  _oneof_case_[0] = kPointCloud;
}
inline ::standard_cyborg::proto::sc3d::PointCloud* SceneGraphNode::release_pointcloud() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.pointCloud)
  if (_internal_has_pointcloud()) {
    clear_has_contents();
      ::standard_cyborg::proto::sc3d::PointCloud* temp = contents_.pointcloud_;
    contents_.pointcloud_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::standard_cyborg::proto::sc3d::PointCloud& SceneGraphNode::_internal_pointcloud() const {
  return _internal_has_pointcloud()
      ? *contents_.pointcloud_
      : *reinterpret_cast< ::standard_cyborg::proto::sc3d::PointCloud*>(&::standard_cyborg::proto::sc3d::_PointCloud_default_instance_);
}
inline const ::standard_cyborg::proto::sc3d::PointCloud& SceneGraphNode::pointcloud() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.pointCloud)
  return _internal_pointcloud();
}
inline ::standard_cyborg::proto::sc3d::PointCloud* SceneGraphNode::_internal_mutable_pointcloud() {
  if (!_internal_has_pointcloud()) {
    clear_contents();
    set_has_pointcloud();
    contents_.pointcloud_ = CreateMaybeMessage< ::standard_cyborg::proto::sc3d::PointCloud >(
        GetArenaNoVirtual());
  }
  return contents_.pointcloud_;
}
inline ::standard_cyborg::proto::sc3d::PointCloud* SceneGraphNode::mutable_pointcloud() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.pointCloud)
  return _internal_mutable_pointcloud();
}

// .standard_cyborg.proto.sc3d.TriangleMesh triangleMesh = 24;
inline bool SceneGraphNode::_internal_has_trianglemesh() const {
  return contents_case() == kTriangleMesh;
}
inline bool SceneGraphNode::has_trianglemesh() const {
  return _internal_has_trianglemesh();
}
inline void SceneGraphNode::set_has_trianglemesh() {
  _oneof_case_[0] = kTriangleMesh;
}
inline ::standard_cyborg::proto::sc3d::TriangleMesh* SceneGraphNode::release_trianglemesh() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.triangleMesh)
  if (_internal_has_trianglemesh()) {
    clear_has_contents();
      ::standard_cyborg::proto::sc3d::TriangleMesh* temp = contents_.trianglemesh_;
    contents_.trianglemesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::standard_cyborg::proto::sc3d::TriangleMesh& SceneGraphNode::_internal_trianglemesh() const {
  return _internal_has_trianglemesh()
      ? *contents_.trianglemesh_
      : *reinterpret_cast< ::standard_cyborg::proto::sc3d::TriangleMesh*>(&::standard_cyborg::proto::sc3d::_TriangleMesh_default_instance_);
}
inline const ::standard_cyborg::proto::sc3d::TriangleMesh& SceneGraphNode::trianglemesh() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.triangleMesh)
  return _internal_trianglemesh();
}
inline ::standard_cyborg::proto::sc3d::TriangleMesh* SceneGraphNode::_internal_mutable_trianglemesh() {
  if (!_internal_has_trianglemesh()) {
    clear_contents();
    set_has_trianglemesh();
    contents_.trianglemesh_ = CreateMaybeMessage< ::standard_cyborg::proto::sc3d::TriangleMesh >(
        GetArenaNoVirtual());
  }
  return contents_.trianglemesh_;
}
inline ::standard_cyborg::proto::sc3d::TriangleMesh* SceneGraphNode::mutable_trianglemesh() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.triangleMesh)
  return _internal_mutable_trianglemesh();
}

// .standard_cyborg.proto.sc3d.Plane plane = 25;
inline bool SceneGraphNode::_internal_has_plane() const {
  return contents_case() == kPlane;
}
inline bool SceneGraphNode::has_plane() const {
  return _internal_has_plane();
}
inline void SceneGraphNode::set_has_plane() {
  _oneof_case_[0] = kPlane;
}
inline ::standard_cyborg::proto::sc3d::Plane* SceneGraphNode::release_plane() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.plane)
  if (_internal_has_plane()) {
    clear_has_contents();
      ::standard_cyborg::proto::sc3d::Plane* temp = contents_.plane_;
    contents_.plane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::standard_cyborg::proto::sc3d::Plane& SceneGraphNode::_internal_plane() const {
  return _internal_has_plane()
      ? *contents_.plane_
      : *reinterpret_cast< ::standard_cyborg::proto::sc3d::Plane*>(&::standard_cyborg::proto::sc3d::_Plane_default_instance_);
}
inline const ::standard_cyborg::proto::sc3d::Plane& SceneGraphNode::plane() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.plane)
  return _internal_plane();
}
inline ::standard_cyborg::proto::sc3d::Plane* SceneGraphNode::_internal_mutable_plane() {
  if (!_internal_has_plane()) {
    clear_contents();
    set_has_plane();
    contents_.plane_ = CreateMaybeMessage< ::standard_cyborg::proto::sc3d::Plane >(
        GetArenaNoVirtual());
  }
  return contents_.plane_;
}
inline ::standard_cyborg::proto::sc3d::Plane* SceneGraphNode::mutable_plane() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.plane)
  return _internal_mutable_plane();
}

// .standard_cyborg.proto.sc3d.Landmark landmark = 26;
inline bool SceneGraphNode::_internal_has_landmark() const {
  return contents_case() == kLandmark;
}
inline bool SceneGraphNode::has_landmark() const {
  return _internal_has_landmark();
}
inline void SceneGraphNode::set_has_landmark() {
  _oneof_case_[0] = kLandmark;
}
inline ::standard_cyborg::proto::sc3d::Landmark* SceneGraphNode::release_landmark() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.landmark)
  if (_internal_has_landmark()) {
    clear_has_contents();
      ::standard_cyborg::proto::sc3d::Landmark* temp = contents_.landmark_;
    contents_.landmark_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::standard_cyborg::proto::sc3d::Landmark& SceneGraphNode::_internal_landmark() const {
  return _internal_has_landmark()
      ? *contents_.landmark_
      : *reinterpret_cast< ::standard_cyborg::proto::sc3d::Landmark*>(&::standard_cyborg::proto::sc3d::_Landmark_default_instance_);
}
inline const ::standard_cyborg::proto::sc3d::Landmark& SceneGraphNode::landmark() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.landmark)
  return _internal_landmark();
}
inline ::standard_cyborg::proto::sc3d::Landmark* SceneGraphNode::_internal_mutable_landmark() {
  if (!_internal_has_landmark()) {
    clear_contents();
    set_has_landmark();
    contents_.landmark_ = CreateMaybeMessage< ::standard_cyborg::proto::sc3d::Landmark >(
        GetArenaNoVirtual());
  }
  return contents_.landmark_;
}
inline ::standard_cyborg::proto::sc3d::Landmark* SceneGraphNode::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.landmark)
  return _internal_mutable_landmark();
}

// bool isGenericNode = 27;
inline bool SceneGraphNode::_internal_has_isgenericnode() const {
  return contents_case() == kIsGenericNode;
}
inline void SceneGraphNode::set_has_isgenericnode() {
  _oneof_case_[0] = kIsGenericNode;
}
inline void SceneGraphNode::clear_isgenericnode() {
  if (_internal_has_isgenericnode()) {
    contents_.isgenericnode_ = false;
    clear_has_contents();
  }
}
inline bool SceneGraphNode::_internal_isgenericnode() const {
  if (_internal_has_isgenericnode()) {
    return contents_.isgenericnode_;
  }
  return false;
}
inline void SceneGraphNode::_internal_set_isgenericnode(bool value) {
  if (!_internal_has_isgenericnode()) {
    clear_contents();
    set_has_isgenericnode();
  }
  contents_.isgenericnode_ = value;
}
inline bool SceneGraphNode::isgenericnode() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.isGenericNode)
  return _internal_isgenericnode();
}
inline void SceneGraphNode::set_isgenericnode(bool value) {
  _internal_set_isgenericnode(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.scene_graph.SceneGraphNode.isGenericNode)
}

// bool isCoordinateFrameNode = 28;
inline bool SceneGraphNode::_internal_has_iscoordinateframenode() const {
  return contents_case() == kIsCoordinateFrameNode;
}
inline void SceneGraphNode::set_has_iscoordinateframenode() {
  _oneof_case_[0] = kIsCoordinateFrameNode;
}
inline void SceneGraphNode::clear_iscoordinateframenode() {
  if (_internal_has_iscoordinateframenode()) {
    contents_.iscoordinateframenode_ = false;
    clear_has_contents();
  }
}
inline bool SceneGraphNode::_internal_iscoordinateframenode() const {
  if (_internal_has_iscoordinateframenode()) {
    return contents_.iscoordinateframenode_;
  }
  return false;
}
inline void SceneGraphNode::_internal_set_iscoordinateframenode(bool value) {
  if (!_internal_has_iscoordinateframenode()) {
    clear_contents();
    set_has_iscoordinateframenode();
  }
  contents_.iscoordinateframenode_ = value;
}
inline bool SceneGraphNode::iscoordinateframenode() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.isCoordinateFrameNode)
  return _internal_iscoordinateframenode();
}
inline void SceneGraphNode::set_iscoordinateframenode(bool value) {
  _internal_set_iscoordinateframenode(value);
  // @@protoc_insertion_point(field_set:standard_cyborg.proto.scene_graph.SceneGraphNode.isCoordinateFrameNode)
}

// .standard_cyborg.proto.math.Vec3 pointPosition = 29;
inline bool SceneGraphNode::_internal_has_pointposition() const {
  return contents_case() == kPointPosition;
}
inline bool SceneGraphNode::has_pointposition() const {
  return _internal_has_pointposition();
}
inline void SceneGraphNode::set_has_pointposition() {
  _oneof_case_[0] = kPointPosition;
}
inline ::standard_cyborg::proto::math::Vec3* SceneGraphNode::release_pointposition() {
  // @@protoc_insertion_point(field_release:standard_cyborg.proto.scene_graph.SceneGraphNode.pointPosition)
  if (_internal_has_pointposition()) {
    clear_has_contents();
      ::standard_cyborg::proto::math::Vec3* temp = contents_.pointposition_;
    contents_.pointposition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::standard_cyborg::proto::math::Vec3& SceneGraphNode::_internal_pointposition() const {
  return _internal_has_pointposition()
      ? *contents_.pointposition_
      : *reinterpret_cast< ::standard_cyborg::proto::math::Vec3*>(&::standard_cyborg::proto::math::_Vec3_default_instance_);
}
inline const ::standard_cyborg::proto::math::Vec3& SceneGraphNode::pointposition() const {
  // @@protoc_insertion_point(field_get:standard_cyborg.proto.scene_graph.SceneGraphNode.pointPosition)
  return _internal_pointposition();
}
inline ::standard_cyborg::proto::math::Vec3* SceneGraphNode::_internal_mutable_pointposition() {
  if (!_internal_has_pointposition()) {
    clear_contents();
    set_has_pointposition();
    contents_.pointposition_ = CreateMaybeMessage< ::standard_cyborg::proto::math::Vec3 >(
        GetArenaNoVirtual());
  }
  return contents_.pointposition_;
}
inline ::standard_cyborg::proto::math::Vec3* SceneGraphNode::mutable_pointposition() {
  // @@protoc_insertion_point(field_mutable:standard_cyborg.proto.scene_graph.SceneGraphNode.pointPosition)
  return _internal_mutable_pointposition();
}

inline bool SceneGraphNode::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void SceneGraphNode::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline SceneGraphNode::ContentsCase SceneGraphNode::contents_case() const {
  return SceneGraphNode::ContentsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace scene_graph
}  // namespace proto
}  // namespace standard_cyborg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_standard_5fcyborg_2fproto_2fscene_5fgraph_2fscene_5fgraph_5fnode_2eproto
