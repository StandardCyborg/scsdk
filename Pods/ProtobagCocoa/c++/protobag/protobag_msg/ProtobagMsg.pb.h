// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobagMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtobagMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtobagMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtobagMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtobagMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtobagMsg_2eproto;
namespace protobag {
class BagIndex;
class BagIndexDefaultTypeInternal;
extern BagIndexDefaultTypeInternal _BagIndex_default_instance_;
class BagIndex_DescriptorPoolData;
class BagIndex_DescriptorPoolDataDefaultTypeInternal;
extern BagIndex_DescriptorPoolDataDefaultTypeInternal _BagIndex_DescriptorPoolData_default_instance_;
class BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse;
class BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUseDefaultTypeInternal;
extern BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUseDefaultTypeInternal _BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse_default_instance_;
class BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse;
class BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUseDefaultTypeInternal;
extern BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUseDefaultTypeInternal _BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse_default_instance_;
class BagIndex_TopicStats;
class BagIndex_TopicStatsDefaultTypeInternal;
extern BagIndex_TopicStatsDefaultTypeInternal _BagIndex_TopicStats_default_instance_;
class BagIndex_TopicToStatsEntry_DoNotUse;
class BagIndex_TopicToStatsEntry_DoNotUseDefaultTypeInternal;
extern BagIndex_TopicToStatsEntry_DoNotUseDefaultTypeInternal _BagIndex_TopicToStatsEntry_DoNotUse_default_instance_;
class Selection;
class SelectionDefaultTypeInternal;
extern SelectionDefaultTypeInternal _Selection_default_instance_;
class Selection_All;
class Selection_AllDefaultTypeInternal;
extern Selection_AllDefaultTypeInternal _Selection_All_default_instance_;
class Selection_Entrynames;
class Selection_EntrynamesDefaultTypeInternal;
extern Selection_EntrynamesDefaultTypeInternal _Selection_Entrynames_default_instance_;
class Selection_Events;
class Selection_EventsDefaultTypeInternal;
extern Selection_EventsDefaultTypeInternal _Selection_Events_default_instance_;
class Selection_Window;
class Selection_WindowDefaultTypeInternal;
extern Selection_WindowDefaultTypeInternal _Selection_Window_default_instance_;
class StampedMessage;
class StampedMessageDefaultTypeInternal;
extern StampedMessageDefaultTypeInternal _StampedMessage_default_instance_;
class StdMsg;
class StdMsgDefaultTypeInternal;
extern StdMsgDefaultTypeInternal _StdMsg_default_instance_;
class StdMsg_Bool;
class StdMsg_BoolDefaultTypeInternal;
extern StdMsg_BoolDefaultTypeInternal _StdMsg_Bool_default_instance_;
class StdMsg_Bytes;
class StdMsg_BytesDefaultTypeInternal;
extern StdMsg_BytesDefaultTypeInternal _StdMsg_Bytes_default_instance_;
class StdMsg_Float;
class StdMsg_FloatDefaultTypeInternal;
extern StdMsg_FloatDefaultTypeInternal _StdMsg_Float_default_instance_;
class StdMsg_Int;
class StdMsg_IntDefaultTypeInternal;
extern StdMsg_IntDefaultTypeInternal _StdMsg_Int_default_instance_;
class StdMsg_SSMap;
class StdMsg_SSMapDefaultTypeInternal;
extern StdMsg_SSMapDefaultTypeInternal _StdMsg_SSMap_default_instance_;
class StdMsg_SSMap_ValueEntry_DoNotUse;
class StdMsg_SSMap_ValueEntry_DoNotUseDefaultTypeInternal;
extern StdMsg_SSMap_ValueEntry_DoNotUseDefaultTypeInternal _StdMsg_SSMap_ValueEntry_DoNotUse_default_instance_;
class StdMsg_String;
class StdMsg_StringDefaultTypeInternal;
extern StdMsg_StringDefaultTypeInternal _StdMsg_String_default_instance_;
class TopicTime;
class TopicTimeDefaultTypeInternal;
extern TopicTimeDefaultTypeInternal _TopicTime_default_instance_;
}  // namespace protobag
PROTOBUF_NAMESPACE_OPEN
template<> ::protobag::BagIndex* Arena::CreateMaybeMessage<::protobag::BagIndex>(Arena*);
template<> ::protobag::BagIndex_DescriptorPoolData* Arena::CreateMaybeMessage<::protobag::BagIndex_DescriptorPoolData>(Arena*);
template<> ::protobag::BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse* Arena::CreateMaybeMessage<::protobag::BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse>(Arena*);
template<> ::protobag::BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse* Arena::CreateMaybeMessage<::protobag::BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse>(Arena*);
template<> ::protobag::BagIndex_TopicStats* Arena::CreateMaybeMessage<::protobag::BagIndex_TopicStats>(Arena*);
template<> ::protobag::BagIndex_TopicToStatsEntry_DoNotUse* Arena::CreateMaybeMessage<::protobag::BagIndex_TopicToStatsEntry_DoNotUse>(Arena*);
template<> ::protobag::Selection* Arena::CreateMaybeMessage<::protobag::Selection>(Arena*);
template<> ::protobag::Selection_All* Arena::CreateMaybeMessage<::protobag::Selection_All>(Arena*);
template<> ::protobag::Selection_Entrynames* Arena::CreateMaybeMessage<::protobag::Selection_Entrynames>(Arena*);
template<> ::protobag::Selection_Events* Arena::CreateMaybeMessage<::protobag::Selection_Events>(Arena*);
template<> ::protobag::Selection_Window* Arena::CreateMaybeMessage<::protobag::Selection_Window>(Arena*);
template<> ::protobag::StampedMessage* Arena::CreateMaybeMessage<::protobag::StampedMessage>(Arena*);
template<> ::protobag::StdMsg* Arena::CreateMaybeMessage<::protobag::StdMsg>(Arena*);
template<> ::protobag::StdMsg_Bool* Arena::CreateMaybeMessage<::protobag::StdMsg_Bool>(Arena*);
template<> ::protobag::StdMsg_Bytes* Arena::CreateMaybeMessage<::protobag::StdMsg_Bytes>(Arena*);
template<> ::protobag::StdMsg_Float* Arena::CreateMaybeMessage<::protobag::StdMsg_Float>(Arena*);
template<> ::protobag::StdMsg_Int* Arena::CreateMaybeMessage<::protobag::StdMsg_Int>(Arena*);
template<> ::protobag::StdMsg_SSMap* Arena::CreateMaybeMessage<::protobag::StdMsg_SSMap>(Arena*);
template<> ::protobag::StdMsg_SSMap_ValueEntry_DoNotUse* Arena::CreateMaybeMessage<::protobag::StdMsg_SSMap_ValueEntry_DoNotUse>(Arena*);
template<> ::protobag::StdMsg_String* Arena::CreateMaybeMessage<::protobag::StdMsg_String>(Arena*);
template<> ::protobag::TopicTime* Arena::CreateMaybeMessage<::protobag::TopicTime>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobag {

// ===================================================================

class StampedMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.StampedMessage) */ {
 public:
  StampedMessage();
  virtual ~StampedMessage();

  StampedMessage(const StampedMessage& from);
  StampedMessage(StampedMessage&& from) noexcept
    : StampedMessage() {
    *this = ::std::move(from);
  }

  inline StampedMessage& operator=(const StampedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StampedMessage& operator=(StampedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StampedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedMessage* internal_default_instance() {
    return reinterpret_cast<const StampedMessage*>(
               &_StampedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StampedMessage& a, StampedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StampedMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StampedMessage* New() const final {
    return CreateMaybeMessage<StampedMessage>(nullptr);
  }

  StampedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StampedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StampedMessage& from);
  void MergeFrom(const StampedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StampedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.StampedMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:

  // .google.protobuf.Any msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const PROTOBUF_NAMESPACE_ID::Any& msg() const;
  PROTOBUF_NAMESPACE_ID::Any* release_msg();
  PROTOBUF_NAMESPACE_ID::Any* mutable_msg();
  void set_allocated_msg(PROTOBUF_NAMESPACE_ID::Any* msg);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_msg() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:protobag.StampedMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  PROTOBUF_NAMESPACE_ID::Any* msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class StdMsg_Bool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.StdMsg.Bool) */ {
 public:
  StdMsg_Bool();
  virtual ~StdMsg_Bool();

  StdMsg_Bool(const StdMsg_Bool& from);
  StdMsg_Bool(StdMsg_Bool&& from) noexcept
    : StdMsg_Bool() {
    *this = ::std::move(from);
  }

  inline StdMsg_Bool& operator=(const StdMsg_Bool& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdMsg_Bool& operator=(StdMsg_Bool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdMsg_Bool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdMsg_Bool* internal_default_instance() {
    return reinterpret_cast<const StdMsg_Bool*>(
               &_StdMsg_Bool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StdMsg_Bool& a, StdMsg_Bool& b) {
    a.Swap(&b);
  }
  inline void Swap(StdMsg_Bool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdMsg_Bool* New() const final {
    return CreateMaybeMessage<StdMsg_Bool>(nullptr);
  }

  StdMsg_Bool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdMsg_Bool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdMsg_Bool& from);
  void MergeFrom(const StdMsg_Bool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdMsg_Bool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.StdMsg.Bool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobag.StdMsg.Bool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class StdMsg_Int :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.StdMsg.Int) */ {
 public:
  StdMsg_Int();
  virtual ~StdMsg_Int();

  StdMsg_Int(const StdMsg_Int& from);
  StdMsg_Int(StdMsg_Int&& from) noexcept
    : StdMsg_Int() {
    *this = ::std::move(from);
  }

  inline StdMsg_Int& operator=(const StdMsg_Int& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdMsg_Int& operator=(StdMsg_Int&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdMsg_Int& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdMsg_Int* internal_default_instance() {
    return reinterpret_cast<const StdMsg_Int*>(
               &_StdMsg_Int_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StdMsg_Int& a, StdMsg_Int& b) {
    a.Swap(&b);
  }
  inline void Swap(StdMsg_Int* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdMsg_Int* New() const final {
    return CreateMaybeMessage<StdMsg_Int>(nullptr);
  }

  StdMsg_Int* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdMsg_Int>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdMsg_Int& from);
  void MergeFrom(const StdMsg_Int& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdMsg_Int* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.StdMsg.Int";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protobag.StdMsg.Int)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class StdMsg_Float :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.StdMsg.Float) */ {
 public:
  StdMsg_Float();
  virtual ~StdMsg_Float();

  StdMsg_Float(const StdMsg_Float& from);
  StdMsg_Float(StdMsg_Float&& from) noexcept
    : StdMsg_Float() {
    *this = ::std::move(from);
  }

  inline StdMsg_Float& operator=(const StdMsg_Float& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdMsg_Float& operator=(StdMsg_Float&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdMsg_Float& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdMsg_Float* internal_default_instance() {
    return reinterpret_cast<const StdMsg_Float*>(
               &_StdMsg_Float_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StdMsg_Float& a, StdMsg_Float& b) {
    a.Swap(&b);
  }
  inline void Swap(StdMsg_Float* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdMsg_Float* New() const final {
    return CreateMaybeMessage<StdMsg_Float>(nullptr);
  }

  StdMsg_Float* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdMsg_Float>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdMsg_Float& from);
  void MergeFrom(const StdMsg_Float& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdMsg_Float* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.StdMsg.Float";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:protobag.StdMsg.Float)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class StdMsg_String :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.StdMsg.String) */ {
 public:
  StdMsg_String();
  virtual ~StdMsg_String();

  StdMsg_String(const StdMsg_String& from);
  StdMsg_String(StdMsg_String&& from) noexcept
    : StdMsg_String() {
    *this = ::std::move(from);
  }

  inline StdMsg_String& operator=(const StdMsg_String& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdMsg_String& operator=(StdMsg_String&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdMsg_String& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdMsg_String* internal_default_instance() {
    return reinterpret_cast<const StdMsg_String*>(
               &_StdMsg_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StdMsg_String& a, StdMsg_String& b) {
    a.Swap(&b);
  }
  inline void Swap(StdMsg_String* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdMsg_String* New() const final {
    return CreateMaybeMessage<StdMsg_String>(nullptr);
  }

  StdMsg_String* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdMsg_String>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdMsg_String& from);
  void MergeFrom(const StdMsg_String& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdMsg_String* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.StdMsg.String";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:protobag.StdMsg.String)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class StdMsg_Bytes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.StdMsg.Bytes) */ {
 public:
  StdMsg_Bytes();
  virtual ~StdMsg_Bytes();

  StdMsg_Bytes(const StdMsg_Bytes& from);
  StdMsg_Bytes(StdMsg_Bytes&& from) noexcept
    : StdMsg_Bytes() {
    *this = ::std::move(from);
  }

  inline StdMsg_Bytes& operator=(const StdMsg_Bytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdMsg_Bytes& operator=(StdMsg_Bytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdMsg_Bytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdMsg_Bytes* internal_default_instance() {
    return reinterpret_cast<const StdMsg_Bytes*>(
               &_StdMsg_Bytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StdMsg_Bytes& a, StdMsg_Bytes& b) {
    a.Swap(&b);
  }
  inline void Swap(StdMsg_Bytes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdMsg_Bytes* New() const final {
    return CreateMaybeMessage<StdMsg_Bytes>(nullptr);
  }

  StdMsg_Bytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdMsg_Bytes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdMsg_Bytes& from);
  void MergeFrom(const StdMsg_Bytes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdMsg_Bytes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.StdMsg.Bytes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:protobag.StdMsg.Bytes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class StdMsg_SSMap_ValueEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StdMsg_SSMap_ValueEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StdMsg_SSMap_ValueEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StdMsg_SSMap_ValueEntry_DoNotUse();
  StdMsg_SSMap_ValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StdMsg_SSMap_ValueEntry_DoNotUse& other);
  static const StdMsg_SSMap_ValueEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StdMsg_SSMap_ValueEntry_DoNotUse*>(&_StdMsg_SSMap_ValueEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobag.StdMsg.SSMap.ValueEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobag.StdMsg.SSMap.ValueEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class StdMsg_SSMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.StdMsg.SSMap) */ {
 public:
  StdMsg_SSMap();
  virtual ~StdMsg_SSMap();

  StdMsg_SSMap(const StdMsg_SSMap& from);
  StdMsg_SSMap(StdMsg_SSMap&& from) noexcept
    : StdMsg_SSMap() {
    *this = ::std::move(from);
  }

  inline StdMsg_SSMap& operator=(const StdMsg_SSMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdMsg_SSMap& operator=(StdMsg_SSMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdMsg_SSMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdMsg_SSMap* internal_default_instance() {
    return reinterpret_cast<const StdMsg_SSMap*>(
               &_StdMsg_SSMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StdMsg_SSMap& a, StdMsg_SSMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StdMsg_SSMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdMsg_SSMap* New() const final {
    return CreateMaybeMessage<StdMsg_SSMap>(nullptr);
  }

  StdMsg_SSMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdMsg_SSMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdMsg_SSMap& from);
  void MergeFrom(const StdMsg_SSMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdMsg_SSMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.StdMsg.SSMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // map<string, string> value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_value();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:protobag.StdMsg.SSMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StdMsg_SSMap_ValueEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class StdMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.StdMsg) */ {
 public:
  StdMsg();
  virtual ~StdMsg();

  StdMsg(const StdMsg& from);
  StdMsg(StdMsg&& from) noexcept
    : StdMsg() {
    *this = ::std::move(from);
  }

  inline StdMsg& operator=(const StdMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdMsg& operator=(StdMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StdMsg* internal_default_instance() {
    return reinterpret_cast<const StdMsg*>(
               &_StdMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StdMsg& a, StdMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(StdMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdMsg* New() const final {
    return CreateMaybeMessage<StdMsg>(nullptr);
  }

  StdMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdMsg& from);
  void MergeFrom(const StdMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.StdMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StdMsg_Bool Bool;
  typedef StdMsg_Int Int;
  typedef StdMsg_Float Float;
  typedef StdMsg_String String;
  typedef StdMsg_Bytes Bytes;
  typedef StdMsg_SSMap SSMap;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobag.StdMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class TopicTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.TopicTime) */ {
 public:
  TopicTime();
  virtual ~TopicTime();

  TopicTime(const TopicTime& from);
  TopicTime(TopicTime&& from) noexcept
    : TopicTime() {
    *this = ::std::move(from);
  }

  inline TopicTime& operator=(const TopicTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicTime& operator=(TopicTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicTime* internal_default_instance() {
    return reinterpret_cast<const TopicTime*>(
               &_TopicTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TopicTime& a, TopicTime& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicTime* New() const final {
    return CreateMaybeMessage<TopicTime>(nullptr);
  }

  TopicTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicTime& from);
  void MergeFrom(const TopicTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.TopicTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kEntrynameFieldNumber = 10,
    kTimestampFieldNumber = 2,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string entryname = 10;
  void clear_entryname();
  const std::string& entryname() const;
  void set_entryname(const std::string& value);
  void set_entryname(std::string&& value);
  void set_entryname(const char* value);
  void set_entryname(const char* value, size_t size);
  std::string* mutable_entryname();
  std::string* release_entryname();
  void set_allocated_entryname(std::string* entryname);
  private:
  const std::string& _internal_entryname() const;
  void _internal_set_entryname(const std::string& value);
  std::string* _internal_mutable_entryname();
  public:

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:protobag.TopicTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entryname_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class Selection_All :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.Selection.All) */ {
 public:
  Selection_All();
  virtual ~Selection_All();

  Selection_All(const Selection_All& from);
  Selection_All(Selection_All&& from) noexcept
    : Selection_All() {
    *this = ::std::move(from);
  }

  inline Selection_All& operator=(const Selection_All& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selection_All& operator=(Selection_All&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Selection_All& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Selection_All* internal_default_instance() {
    return reinterpret_cast<const Selection_All*>(
               &_Selection_All_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Selection_All& a, Selection_All& b) {
    a.Swap(&b);
  }
  inline void Swap(Selection_All* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Selection_All* New() const final {
    return CreateMaybeMessage<Selection_All>(nullptr);
  }

  Selection_All* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Selection_All>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Selection_All& from);
  void MergeFrom(const Selection_All& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selection_All* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.Selection.All";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllEntriesAreRawFieldNumber = 1,
  };
  // bool all_entries_are_raw = 1;
  void clear_all_entries_are_raw();
  bool all_entries_are_raw() const;
  void set_all_entries_are_raw(bool value);
  private:
  bool _internal_all_entries_are_raw() const;
  void _internal_set_all_entries_are_raw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobag.Selection.All)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool all_entries_are_raw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class Selection_Entrynames :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.Selection.Entrynames) */ {
 public:
  Selection_Entrynames();
  virtual ~Selection_Entrynames();

  Selection_Entrynames(const Selection_Entrynames& from);
  Selection_Entrynames(Selection_Entrynames&& from) noexcept
    : Selection_Entrynames() {
    *this = ::std::move(from);
  }

  inline Selection_Entrynames& operator=(const Selection_Entrynames& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selection_Entrynames& operator=(Selection_Entrynames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Selection_Entrynames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Selection_Entrynames* internal_default_instance() {
    return reinterpret_cast<const Selection_Entrynames*>(
               &_Selection_Entrynames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Selection_Entrynames& a, Selection_Entrynames& b) {
    a.Swap(&b);
  }
  inline void Swap(Selection_Entrynames* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Selection_Entrynames* New() const final {
    return CreateMaybeMessage<Selection_Entrynames>(nullptr);
  }

  Selection_Entrynames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Selection_Entrynames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Selection_Entrynames& from);
  void MergeFrom(const Selection_Entrynames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selection_Entrynames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.Selection.Entrynames";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntrynamesFieldNumber = 1,
    kIgnoreMissingEntriesFieldNumber = 2,
    kEntriesAreRawFieldNumber = 3,
  };
  // repeated string entrynames = 1;
  int entrynames_size() const;
  private:
  int _internal_entrynames_size() const;
  public:
  void clear_entrynames();
  const std::string& entrynames(int index) const;
  std::string* mutable_entrynames(int index);
  void set_entrynames(int index, const std::string& value);
  void set_entrynames(int index, std::string&& value);
  void set_entrynames(int index, const char* value);
  void set_entrynames(int index, const char* value, size_t size);
  std::string* add_entrynames();
  void add_entrynames(const std::string& value);
  void add_entrynames(std::string&& value);
  void add_entrynames(const char* value);
  void add_entrynames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entrynames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entrynames();
  private:
  const std::string& _internal_entrynames(int index) const;
  std::string* _internal_add_entrynames();
  public:

  // bool ignore_missing_entries = 2;
  void clear_ignore_missing_entries();
  bool ignore_missing_entries() const;
  void set_ignore_missing_entries(bool value);
  private:
  bool _internal_ignore_missing_entries() const;
  void _internal_set_ignore_missing_entries(bool value);
  public:

  // bool entries_are_raw = 3;
  void clear_entries_are_raw();
  bool entries_are_raw() const;
  void set_entries_are_raw(bool value);
  private:
  bool _internal_entries_are_raw() const;
  void _internal_set_entries_are_raw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobag.Selection.Entrynames)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entrynames_;
  bool ignore_missing_entries_;
  bool entries_are_raw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class Selection_Window :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.Selection.Window) */ {
 public:
  Selection_Window();
  virtual ~Selection_Window();

  Selection_Window(const Selection_Window& from);
  Selection_Window(Selection_Window&& from) noexcept
    : Selection_Window() {
    *this = ::std::move(from);
  }

  inline Selection_Window& operator=(const Selection_Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selection_Window& operator=(Selection_Window&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Selection_Window& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Selection_Window* internal_default_instance() {
    return reinterpret_cast<const Selection_Window*>(
               &_Selection_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Selection_Window& a, Selection_Window& b) {
    a.Swap(&b);
  }
  inline void Swap(Selection_Window* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Selection_Window* New() const final {
    return CreateMaybeMessage<Selection_Window>(nullptr);
  }

  Selection_Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Selection_Window>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Selection_Window& from);
  void MergeFrom(const Selection_Window& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selection_Window* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.Selection.Window";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 1,
    kExcludeTopicsFieldNumber = 4,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // repeated string topics = 1;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // repeated string exclude_topics = 4;
  int exclude_topics_size() const;
  private:
  int _internal_exclude_topics_size() const;
  public:
  void clear_exclude_topics();
  const std::string& exclude_topics(int index) const;
  std::string* mutable_exclude_topics(int index);
  void set_exclude_topics(int index, const std::string& value);
  void set_exclude_topics(int index, std::string&& value);
  void set_exclude_topics(int index, const char* value);
  void set_exclude_topics(int index, const char* value, size_t size);
  std::string* add_exclude_topics();
  void add_exclude_topics(const std::string& value);
  void add_exclude_topics(std::string&& value);
  void add_exclude_topics(const char* value);
  void add_exclude_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_topics();
  private:
  const std::string& _internal_exclude_topics(int index) const;
  std::string* _internal_add_exclude_topics();
  public:

  // .google.protobuf.Timestamp start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:

  // .google.protobuf.Timestamp end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:protobag.Selection.Window)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_topics_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class Selection_Events :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.Selection.Events) */ {
 public:
  Selection_Events();
  virtual ~Selection_Events();

  Selection_Events(const Selection_Events& from);
  Selection_Events(Selection_Events&& from) noexcept
    : Selection_Events() {
    *this = ::std::move(from);
  }

  inline Selection_Events& operator=(const Selection_Events& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selection_Events& operator=(Selection_Events&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Selection_Events& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Selection_Events* internal_default_instance() {
    return reinterpret_cast<const Selection_Events*>(
               &_Selection_Events_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Selection_Events& a, Selection_Events& b) {
    a.Swap(&b);
  }
  inline void Swap(Selection_Events* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Selection_Events* New() const final {
    return CreateMaybeMessage<Selection_Events>(nullptr);
  }

  Selection_Events* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Selection_Events>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Selection_Events& from);
  void MergeFrom(const Selection_Events& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selection_Events* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.Selection.Events";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 10,
    kRequireAllFieldNumber = 2,
  };
  // repeated .protobag.TopicTime events = 10;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::protobag::TopicTime* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime >*
      mutable_events();
  private:
  const ::protobag::TopicTime& _internal_events(int index) const;
  ::protobag::TopicTime* _internal_add_events();
  public:
  const ::protobag::TopicTime& events(int index) const;
  ::protobag::TopicTime* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime >&
      events() const;

  // bool require_all = 2;
  void clear_require_all();
  bool require_all() const;
  void set_require_all(bool value);
  private:
  bool _internal_require_all() const;
  void _internal_set_require_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobag.Selection.Events)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime > events_;
  bool require_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class Selection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.Selection) */ {
 public:
  Selection();
  virtual ~Selection();

  Selection(const Selection& from);
  Selection(Selection&& from) noexcept
    : Selection() {
    *this = ::std::move(from);
  }

  inline Selection& operator=(const Selection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selection& operator=(Selection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Selection& default_instance();

  enum CriteriaCase {
    kSelectAll = 1,
    kEntrynames = 2,
    kWindow = 3,
    kEvents = 4,
    CRITERIA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Selection* internal_default_instance() {
    return reinterpret_cast<const Selection*>(
               &_Selection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Selection& a, Selection& b) {
    a.Swap(&b);
  }
  inline void Swap(Selection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Selection* New() const final {
    return CreateMaybeMessage<Selection>(nullptr);
  }

  Selection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Selection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Selection& from);
  void MergeFrom(const Selection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.Selection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Selection_All All;
  typedef Selection_Entrynames Entrynames;
  typedef Selection_Window Window;
  typedef Selection_Events Events;

  // accessors -------------------------------------------------------

  enum : int {
    kSelectAllFieldNumber = 1,
    kEntrynamesFieldNumber = 2,
    kWindowFieldNumber = 3,
    kEventsFieldNumber = 4,
  };
  // .protobag.Selection.All select_all = 1;
  bool has_select_all() const;
  private:
  bool _internal_has_select_all() const;
  public:
  void clear_select_all();
  const ::protobag::Selection_All& select_all() const;
  ::protobag::Selection_All* release_select_all();
  ::protobag::Selection_All* mutable_select_all();
  void set_allocated_select_all(::protobag::Selection_All* select_all);
  private:
  const ::protobag::Selection_All& _internal_select_all() const;
  ::protobag::Selection_All* _internal_mutable_select_all();
  public:

  // .protobag.Selection.Entrynames entrynames = 2;
  bool has_entrynames() const;
  private:
  bool _internal_has_entrynames() const;
  public:
  void clear_entrynames();
  const ::protobag::Selection_Entrynames& entrynames() const;
  ::protobag::Selection_Entrynames* release_entrynames();
  ::protobag::Selection_Entrynames* mutable_entrynames();
  void set_allocated_entrynames(::protobag::Selection_Entrynames* entrynames);
  private:
  const ::protobag::Selection_Entrynames& _internal_entrynames() const;
  ::protobag::Selection_Entrynames* _internal_mutable_entrynames();
  public:

  // .protobag.Selection.Window window = 3;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::protobag::Selection_Window& window() const;
  ::protobag::Selection_Window* release_window();
  ::protobag::Selection_Window* mutable_window();
  void set_allocated_window(::protobag::Selection_Window* window);
  private:
  const ::protobag::Selection_Window& _internal_window() const;
  ::protobag::Selection_Window* _internal_mutable_window();
  public:

  // .protobag.Selection.Events events = 4;
  bool has_events() const;
  private:
  bool _internal_has_events() const;
  public:
  void clear_events();
  const ::protobag::Selection_Events& events() const;
  ::protobag::Selection_Events* release_events();
  ::protobag::Selection_Events* mutable_events();
  void set_allocated_events(::protobag::Selection_Events* events);
  private:
  const ::protobag::Selection_Events& _internal_events() const;
  ::protobag::Selection_Events* _internal_mutable_events();
  public:

  void clear_criteria();
  CriteriaCase criteria_case() const;
  // @@protoc_insertion_point(class_scope:protobag.Selection)
 private:
  class _Internal;
  void set_has_select_all();
  void set_has_entrynames();
  void set_has_window();
  void set_has_events();

  inline bool has_criteria() const;
  inline void clear_has_criteria();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union CriteriaUnion {
    CriteriaUnion() {}
    ::protobag::Selection_All* select_all_;
    ::protobag::Selection_Entrynames* entrynames_;
    ::protobag::Selection_Window* window_;
    ::protobag::Selection_Events* events_;
  } criteria_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse();
  BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse& other);
  static const BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse*>(&_BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobag.BagIndex.DescriptorPoolData.TypeUrlToDescriptorEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse();
  BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse& other);
  static const BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse*>(&_BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobag.BagIndex.DescriptorPoolData.EntrynameToTypeUrlEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobag.BagIndex.DescriptorPoolData.EntrynameToTypeUrlEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class BagIndex_DescriptorPoolData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.BagIndex.DescriptorPoolData) */ {
 public:
  BagIndex_DescriptorPoolData();
  virtual ~BagIndex_DescriptorPoolData();

  BagIndex_DescriptorPoolData(const BagIndex_DescriptorPoolData& from);
  BagIndex_DescriptorPoolData(BagIndex_DescriptorPoolData&& from) noexcept
    : BagIndex_DescriptorPoolData() {
    *this = ::std::move(from);
  }

  inline BagIndex_DescriptorPoolData& operator=(const BagIndex_DescriptorPoolData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BagIndex_DescriptorPoolData& operator=(BagIndex_DescriptorPoolData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BagIndex_DescriptorPoolData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BagIndex_DescriptorPoolData* internal_default_instance() {
    return reinterpret_cast<const BagIndex_DescriptorPoolData*>(
               &_BagIndex_DescriptorPoolData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BagIndex_DescriptorPoolData& a, BagIndex_DescriptorPoolData& b) {
    a.Swap(&b);
  }
  inline void Swap(BagIndex_DescriptorPoolData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BagIndex_DescriptorPoolData* New() const final {
    return CreateMaybeMessage<BagIndex_DescriptorPoolData>(nullptr);
  }

  BagIndex_DescriptorPoolData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BagIndex_DescriptorPoolData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BagIndex_DescriptorPoolData& from);
  void MergeFrom(const BagIndex_DescriptorPoolData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BagIndex_DescriptorPoolData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.BagIndex.DescriptorPoolData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTypeUrlToDescriptorFieldNumber = 1,
    kEntrynameToTypeUrlFieldNumber = 2,
  };
  // map<string, .google.protobuf.FileDescriptorSet> type_url_to_descriptor = 1;
  int type_url_to_descriptor_size() const;
  private:
  int _internal_type_url_to_descriptor_size() const;
  public:
  void clear_type_url_to_descriptor();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet >&
      _internal_type_url_to_descriptor() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet >*
      _internal_mutable_type_url_to_descriptor();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet >&
      type_url_to_descriptor() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet >*
      mutable_type_url_to_descriptor();

  // map<string, string> entryname_to_type_url = 2;
  int entryname_to_type_url_size() const;
  private:
  int _internal_entryname_to_type_url_size() const;
  public:
  void clear_entryname_to_type_url();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_entryname_to_type_url() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_entryname_to_type_url();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      entryname_to_type_url() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_entryname_to_type_url();

  // @@protoc_insertion_point(class_scope:protobag.BagIndex.DescriptorPoolData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BagIndex_DescriptorPoolData_TypeUrlToDescriptorEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > type_url_to_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BagIndex_DescriptorPoolData_EntrynameToTypeUrlEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > entryname_to_type_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class BagIndex_TopicStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.BagIndex.TopicStats) */ {
 public:
  BagIndex_TopicStats();
  virtual ~BagIndex_TopicStats();

  BagIndex_TopicStats(const BagIndex_TopicStats& from);
  BagIndex_TopicStats(BagIndex_TopicStats&& from) noexcept
    : BagIndex_TopicStats() {
    *this = ::std::move(from);
  }

  inline BagIndex_TopicStats& operator=(const BagIndex_TopicStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline BagIndex_TopicStats& operator=(BagIndex_TopicStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BagIndex_TopicStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BagIndex_TopicStats* internal_default_instance() {
    return reinterpret_cast<const BagIndex_TopicStats*>(
               &_BagIndex_TopicStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BagIndex_TopicStats& a, BagIndex_TopicStats& b) {
    a.Swap(&b);
  }
  inline void Swap(BagIndex_TopicStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BagIndex_TopicStats* New() const final {
    return CreateMaybeMessage<BagIndex_TopicStats>(nullptr);
  }

  BagIndex_TopicStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BagIndex_TopicStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BagIndex_TopicStats& from);
  void MergeFrom(const BagIndex_TopicStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BagIndex_TopicStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.BagIndex.TopicStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNMessagesFieldNumber = 1,
  };
  // int64 n_messages = 1;
  void clear_n_messages();
  ::PROTOBUF_NAMESPACE_ID::int64 n_messages() const;
  void set_n_messages(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_n_messages() const;
  void _internal_set_n_messages(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protobag.BagIndex.TopicStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 n_messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// -------------------------------------------------------------------

class BagIndex_TopicToStatsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BagIndex_TopicToStatsEntry_DoNotUse, 
    std::string, ::protobag::BagIndex_TopicStats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BagIndex_TopicToStatsEntry_DoNotUse, 
    std::string, ::protobag::BagIndex_TopicStats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  BagIndex_TopicToStatsEntry_DoNotUse();
  BagIndex_TopicToStatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BagIndex_TopicToStatsEntry_DoNotUse& other);
  static const BagIndex_TopicToStatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BagIndex_TopicToStatsEntry_DoNotUse*>(&_BagIndex_TopicToStatsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobag.BagIndex.TopicToStatsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class BagIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobag.BagIndex) */ {
 public:
  BagIndex();
  virtual ~BagIndex();

  BagIndex(const BagIndex& from);
  BagIndex(BagIndex&& from) noexcept
    : BagIndex() {
    *this = ::std::move(from);
  }

  inline BagIndex& operator=(const BagIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline BagIndex& operator=(BagIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BagIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BagIndex* internal_default_instance() {
    return reinterpret_cast<const BagIndex*>(
               &_BagIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BagIndex& a, BagIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(BagIndex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BagIndex* New() const final {
    return CreateMaybeMessage<BagIndex>(nullptr);
  }

  BagIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BagIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BagIndex& from);
  void MergeFrom(const BagIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BagIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobag.BagIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobagMsg_2eproto);
    return ::descriptor_table_ProtobagMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BagIndex_DescriptorPoolData DescriptorPoolData;
  typedef BagIndex_TopicStats TopicStats;

  // accessors -------------------------------------------------------

  enum : int {
    kTopicToStatsFieldNumber = 2020,
    kTimeOrderedEntriesFieldNumber = 2030,
    kBagNamespaceFieldNumber = 1,
    kProtobagVersionFieldNumber = 2,
    kDescriptorPoolDataFieldNumber = 1000,
    kStartFieldNumber = 2000,
    kEndFieldNumber = 2001,
  };
  // map<string, .protobag.BagIndex.TopicStats> topic_to_stats = 2020;
  int topic_to_stats_size() const;
  private:
  int _internal_topic_to_stats_size() const;
  public:
  void clear_topic_to_stats();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagIndex_TopicStats >&
      _internal_topic_to_stats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagIndex_TopicStats >*
      _internal_mutable_topic_to_stats();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagIndex_TopicStats >&
      topic_to_stats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagIndex_TopicStats >*
      mutable_topic_to_stats();

  // repeated .protobag.TopicTime time_ordered_entries = 2030;
  int time_ordered_entries_size() const;
  private:
  int _internal_time_ordered_entries_size() const;
  public:
  void clear_time_ordered_entries();
  ::protobag::TopicTime* mutable_time_ordered_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime >*
      mutable_time_ordered_entries();
  private:
  const ::protobag::TopicTime& _internal_time_ordered_entries(int index) const;
  ::protobag::TopicTime* _internal_add_time_ordered_entries();
  public:
  const ::protobag::TopicTime& time_ordered_entries(int index) const;
  ::protobag::TopicTime* add_time_ordered_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime >&
      time_ordered_entries() const;

  // string bag_namespace = 1;
  void clear_bag_namespace();
  const std::string& bag_namespace() const;
  void set_bag_namespace(const std::string& value);
  void set_bag_namespace(std::string&& value);
  void set_bag_namespace(const char* value);
  void set_bag_namespace(const char* value, size_t size);
  std::string* mutable_bag_namespace();
  std::string* release_bag_namespace();
  void set_allocated_bag_namespace(std::string* bag_namespace);
  private:
  const std::string& _internal_bag_namespace() const;
  void _internal_set_bag_namespace(const std::string& value);
  std::string* _internal_mutable_bag_namespace();
  public:

  // string protobag_version = 2;
  void clear_protobag_version();
  const std::string& protobag_version() const;
  void set_protobag_version(const std::string& value);
  void set_protobag_version(std::string&& value);
  void set_protobag_version(const char* value);
  void set_protobag_version(const char* value, size_t size);
  std::string* mutable_protobag_version();
  std::string* release_protobag_version();
  void set_allocated_protobag_version(std::string* protobag_version);
  private:
  const std::string& _internal_protobag_version() const;
  void _internal_set_protobag_version(const std::string& value);
  std::string* _internal_mutable_protobag_version();
  public:

  // .protobag.BagIndex.DescriptorPoolData descriptor_pool_data = 1000;
  bool has_descriptor_pool_data() const;
  private:
  bool _internal_has_descriptor_pool_data() const;
  public:
  void clear_descriptor_pool_data();
  const ::protobag::BagIndex_DescriptorPoolData& descriptor_pool_data() const;
  ::protobag::BagIndex_DescriptorPoolData* release_descriptor_pool_data();
  ::protobag::BagIndex_DescriptorPoolData* mutable_descriptor_pool_data();
  void set_allocated_descriptor_pool_data(::protobag::BagIndex_DescriptorPoolData* descriptor_pool_data);
  private:
  const ::protobag::BagIndex_DescriptorPoolData& _internal_descriptor_pool_data() const;
  ::protobag::BagIndex_DescriptorPoolData* _internal_mutable_descriptor_pool_data();
  public:

  // .google.protobuf.Timestamp start = 2000;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:

  // .google.protobuf.Timestamp end = 2001;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:protobag.BagIndex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BagIndex_TopicToStatsEntry_DoNotUse,
      std::string, ::protobag::BagIndex_TopicStats,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > topic_to_stats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime > time_ordered_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bag_namespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protobag_version_;
  ::protobag::BagIndex_DescriptorPoolData* descriptor_pool_data_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobagMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StampedMessage

// .google.protobuf.Timestamp timestamp = 1;
inline bool StampedMessage::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool StampedMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StampedMessage::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StampedMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protobag.StampedMessage.timestamp)
  return _internal_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StampedMessage::release_timestamp() {
  // @@protoc_insertion_point(field_release:protobag.StampedMessage.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StampedMessage::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StampedMessage::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:protobag.StampedMessage.timestamp)
  return _internal_mutable_timestamp();
}
inline void StampedMessage::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobag.StampedMessage.timestamp)
}

// .google.protobuf.Any msg = 2;
inline bool StampedMessage::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool StampedMessage::has_msg() const {
  return _internal_has_msg();
}
inline const PROTOBUF_NAMESPACE_ID::Any& StampedMessage::_internal_msg() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = msg_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& StampedMessage::msg() const {
  // @@protoc_insertion_point(field_get:protobag.StampedMessage.msg)
  return _internal_msg();
}
inline PROTOBUF_NAMESPACE_ID::Any* StampedMessage::release_msg() {
  // @@protoc_insertion_point(field_release:protobag.StampedMessage.msg)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* StampedMessage::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    msg_ = p;
  }
  return msg_;
}
inline PROTOBUF_NAMESPACE_ID::Any* StampedMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:protobag.StampedMessage.msg)
  return _internal_mutable_msg();
}
inline void StampedMessage::set_allocated_msg(PROTOBUF_NAMESPACE_ID::Any* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:protobag.StampedMessage.msg)
}

// -------------------------------------------------------------------

// StdMsg_Bool

// bool value = 1;
inline void StdMsg_Bool::clear_value() {
  value_ = false;
}
inline bool StdMsg_Bool::_internal_value() const {
  return value_;
}
inline bool StdMsg_Bool::value() const {
  // @@protoc_insertion_point(field_get:protobag.StdMsg.Bool.value)
  return _internal_value();
}
inline void StdMsg_Bool::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void StdMsg_Bool::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protobag.StdMsg.Bool.value)
}

// -------------------------------------------------------------------

// StdMsg_Int

// int64 value = 1;
inline void StdMsg_Int::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StdMsg_Int::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StdMsg_Int::value() const {
  // @@protoc_insertion_point(field_get:protobag.StdMsg.Int.value)
  return _internal_value();
}
inline void StdMsg_Int::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void StdMsg_Int::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protobag.StdMsg.Int.value)
}

// -------------------------------------------------------------------

// StdMsg_Float

// float value = 1;
inline void StdMsg_Float::clear_value() {
  value_ = 0;
}
inline float StdMsg_Float::_internal_value() const {
  return value_;
}
inline float StdMsg_Float::value() const {
  // @@protoc_insertion_point(field_get:protobag.StdMsg.Float.value)
  return _internal_value();
}
inline void StdMsg_Float::_internal_set_value(float value) {
  
  value_ = value;
}
inline void StdMsg_Float::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protobag.StdMsg.Float.value)
}

// -------------------------------------------------------------------

// StdMsg_String

// string value = 1;
inline void StdMsg_String::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StdMsg_String::value() const {
  // @@protoc_insertion_point(field_get:protobag.StdMsg.String.value)
  return _internal_value();
}
inline void StdMsg_String::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protobag.StdMsg.String.value)
}
inline std::string* StdMsg_String::mutable_value() {
  // @@protoc_insertion_point(field_mutable:protobag.StdMsg.String.value)
  return _internal_mutable_value();
}
inline const std::string& StdMsg_String::_internal_value() const {
  return value_.GetNoArena();
}
inline void StdMsg_String::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StdMsg_String::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobag.StdMsg.String.value)
}
inline void StdMsg_String::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobag.StdMsg.String.value)
}
inline void StdMsg_String::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobag.StdMsg.String.value)
}
inline std::string* StdMsg_String::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StdMsg_String::release_value() {
  // @@protoc_insertion_point(field_release:protobag.StdMsg.String.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StdMsg_String::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protobag.StdMsg.String.value)
}

// -------------------------------------------------------------------

// StdMsg_Bytes

// bytes value = 1;
inline void StdMsg_Bytes::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StdMsg_Bytes::value() const {
  // @@protoc_insertion_point(field_get:protobag.StdMsg.Bytes.value)
  return _internal_value();
}
inline void StdMsg_Bytes::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protobag.StdMsg.Bytes.value)
}
inline std::string* StdMsg_Bytes::mutable_value() {
  // @@protoc_insertion_point(field_mutable:protobag.StdMsg.Bytes.value)
  return _internal_mutable_value();
}
inline const std::string& StdMsg_Bytes::_internal_value() const {
  return value_.GetNoArena();
}
inline void StdMsg_Bytes::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StdMsg_Bytes::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobag.StdMsg.Bytes.value)
}
inline void StdMsg_Bytes::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobag.StdMsg.Bytes.value)
}
inline void StdMsg_Bytes::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobag.StdMsg.Bytes.value)
}
inline std::string* StdMsg_Bytes::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StdMsg_Bytes::release_value() {
  // @@protoc_insertion_point(field_release:protobag.StdMsg.Bytes.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StdMsg_Bytes::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protobag.StdMsg.Bytes.value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StdMsg_SSMap

// map<string, string> value = 1;
inline int StdMsg_SSMap::_internal_value_size() const {
  return value_.size();
}
inline int StdMsg_SSMap::value_size() const {
  return _internal_value_size();
}
inline void StdMsg_SSMap::clear_value() {
  value_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StdMsg_SSMap::_internal_value() const {
  return value_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StdMsg_SSMap::value() const {
  // @@protoc_insertion_point(field_map:protobag.StdMsg.SSMap.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StdMsg_SSMap::_internal_mutable_value() {
  return value_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StdMsg_SSMap::mutable_value() {
  // @@protoc_insertion_point(field_mutable_map:protobag.StdMsg.SSMap.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// StdMsg

// -------------------------------------------------------------------

// TopicTime

// string topic = 1;
inline void TopicTime::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TopicTime::topic() const {
  // @@protoc_insertion_point(field_get:protobag.TopicTime.topic)
  return _internal_topic();
}
inline void TopicTime::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:protobag.TopicTime.topic)
}
inline std::string* TopicTime::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:protobag.TopicTime.topic)
  return _internal_mutable_topic();
}
inline const std::string& TopicTime::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void TopicTime::_internal_set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TopicTime::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobag.TopicTime.topic)
}
inline void TopicTime::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobag.TopicTime.topic)
}
inline void TopicTime::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobag.TopicTime.topic)
}
inline std::string* TopicTime::_internal_mutable_topic() {
  
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TopicTime::release_topic() {
  // @@protoc_insertion_point(field_release:protobag.TopicTime.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TopicTime::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:protobag.TopicTime.topic)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool TopicTime::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool TopicTime::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TopicTime::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TopicTime::timestamp() const {
  // @@protoc_insertion_point(field_get:protobag.TopicTime.timestamp)
  return _internal_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TopicTime::release_timestamp() {
  // @@protoc_insertion_point(field_release:protobag.TopicTime.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TopicTime::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TopicTime::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:protobag.TopicTime.timestamp)
  return _internal_mutable_timestamp();
}
inline void TopicTime::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:protobag.TopicTime.timestamp)
}

// string entryname = 10;
inline void TopicTime::clear_entryname() {
  entryname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TopicTime::entryname() const {
  // @@protoc_insertion_point(field_get:protobag.TopicTime.entryname)
  return _internal_entryname();
}
inline void TopicTime::set_entryname(const std::string& value) {
  _internal_set_entryname(value);
  // @@protoc_insertion_point(field_set:protobag.TopicTime.entryname)
}
inline std::string* TopicTime::mutable_entryname() {
  // @@protoc_insertion_point(field_mutable:protobag.TopicTime.entryname)
  return _internal_mutable_entryname();
}
inline const std::string& TopicTime::_internal_entryname() const {
  return entryname_.GetNoArena();
}
inline void TopicTime::_internal_set_entryname(const std::string& value) {
  
  entryname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TopicTime::set_entryname(std::string&& value) {
  
  entryname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobag.TopicTime.entryname)
}
inline void TopicTime::set_entryname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entryname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobag.TopicTime.entryname)
}
inline void TopicTime::set_entryname(const char* value, size_t size) {
  
  entryname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobag.TopicTime.entryname)
}
inline std::string* TopicTime::_internal_mutable_entryname() {
  
  return entryname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TopicTime::release_entryname() {
  // @@protoc_insertion_point(field_release:protobag.TopicTime.entryname)
  
  return entryname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TopicTime::set_allocated_entryname(std::string* entryname) {
  if (entryname != nullptr) {
    
  } else {
    
  }
  entryname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entryname);
  // @@protoc_insertion_point(field_set_allocated:protobag.TopicTime.entryname)
}

// -------------------------------------------------------------------

// Selection_All

// bool all_entries_are_raw = 1;
inline void Selection_All::clear_all_entries_are_raw() {
  all_entries_are_raw_ = false;
}
inline bool Selection_All::_internal_all_entries_are_raw() const {
  return all_entries_are_raw_;
}
inline bool Selection_All::all_entries_are_raw() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.All.all_entries_are_raw)
  return _internal_all_entries_are_raw();
}
inline void Selection_All::_internal_set_all_entries_are_raw(bool value) {
  
  all_entries_are_raw_ = value;
}
inline void Selection_All::set_all_entries_are_raw(bool value) {
  _internal_set_all_entries_are_raw(value);
  // @@protoc_insertion_point(field_set:protobag.Selection.All.all_entries_are_raw)
}

// -------------------------------------------------------------------

// Selection_Entrynames

// repeated string entrynames = 1;
inline int Selection_Entrynames::_internal_entrynames_size() const {
  return entrynames_.size();
}
inline int Selection_Entrynames::entrynames_size() const {
  return _internal_entrynames_size();
}
inline void Selection_Entrynames::clear_entrynames() {
  entrynames_.Clear();
}
inline std::string* Selection_Entrynames::add_entrynames() {
  // @@protoc_insertion_point(field_add_mutable:protobag.Selection.Entrynames.entrynames)
  return _internal_add_entrynames();
}
inline const std::string& Selection_Entrynames::_internal_entrynames(int index) const {
  return entrynames_.Get(index);
}
inline const std::string& Selection_Entrynames::entrynames(int index) const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Entrynames.entrynames)
  return _internal_entrynames(index);
}
inline std::string* Selection_Entrynames::mutable_entrynames(int index) {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.Entrynames.entrynames)
  return entrynames_.Mutable(index);
}
inline void Selection_Entrynames::set_entrynames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobag.Selection.Entrynames.entrynames)
  entrynames_.Mutable(index)->assign(value);
}
inline void Selection_Entrynames::set_entrynames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobag.Selection.Entrynames.entrynames)
  entrynames_.Mutable(index)->assign(std::move(value));
}
inline void Selection_Entrynames::set_entrynames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entrynames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobag.Selection.Entrynames.entrynames)
}
inline void Selection_Entrynames::set_entrynames(int index, const char* value, size_t size) {
  entrynames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobag.Selection.Entrynames.entrynames)
}
inline std::string* Selection_Entrynames::_internal_add_entrynames() {
  return entrynames_.Add();
}
inline void Selection_Entrynames::add_entrynames(const std::string& value) {
  entrynames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobag.Selection.Entrynames.entrynames)
}
inline void Selection_Entrynames::add_entrynames(std::string&& value) {
  entrynames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobag.Selection.Entrynames.entrynames)
}
inline void Selection_Entrynames::add_entrynames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  entrynames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobag.Selection.Entrynames.entrynames)
}
inline void Selection_Entrynames::add_entrynames(const char* value, size_t size) {
  entrynames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobag.Selection.Entrynames.entrynames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Selection_Entrynames::entrynames() const {
  // @@protoc_insertion_point(field_list:protobag.Selection.Entrynames.entrynames)
  return entrynames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Selection_Entrynames::mutable_entrynames() {
  // @@protoc_insertion_point(field_mutable_list:protobag.Selection.Entrynames.entrynames)
  return &entrynames_;
}

// bool ignore_missing_entries = 2;
inline void Selection_Entrynames::clear_ignore_missing_entries() {
  ignore_missing_entries_ = false;
}
inline bool Selection_Entrynames::_internal_ignore_missing_entries() const {
  return ignore_missing_entries_;
}
inline bool Selection_Entrynames::ignore_missing_entries() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Entrynames.ignore_missing_entries)
  return _internal_ignore_missing_entries();
}
inline void Selection_Entrynames::_internal_set_ignore_missing_entries(bool value) {
  
  ignore_missing_entries_ = value;
}
inline void Selection_Entrynames::set_ignore_missing_entries(bool value) {
  _internal_set_ignore_missing_entries(value);
  // @@protoc_insertion_point(field_set:protobag.Selection.Entrynames.ignore_missing_entries)
}

// bool entries_are_raw = 3;
inline void Selection_Entrynames::clear_entries_are_raw() {
  entries_are_raw_ = false;
}
inline bool Selection_Entrynames::_internal_entries_are_raw() const {
  return entries_are_raw_;
}
inline bool Selection_Entrynames::entries_are_raw() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Entrynames.entries_are_raw)
  return _internal_entries_are_raw();
}
inline void Selection_Entrynames::_internal_set_entries_are_raw(bool value) {
  
  entries_are_raw_ = value;
}
inline void Selection_Entrynames::set_entries_are_raw(bool value) {
  _internal_set_entries_are_raw(value);
  // @@protoc_insertion_point(field_set:protobag.Selection.Entrynames.entries_are_raw)
}

// -------------------------------------------------------------------

// Selection_Window

// repeated string topics = 1;
inline int Selection_Window::_internal_topics_size() const {
  return topics_.size();
}
inline int Selection_Window::topics_size() const {
  return _internal_topics_size();
}
inline void Selection_Window::clear_topics() {
  topics_.Clear();
}
inline std::string* Selection_Window::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:protobag.Selection.Window.topics)
  return _internal_add_topics();
}
inline const std::string& Selection_Window::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const std::string& Selection_Window::topics(int index) const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Window.topics)
  return _internal_topics(index);
}
inline std::string* Selection_Window::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.Window.topics)
  return topics_.Mutable(index);
}
inline void Selection_Window::set_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobag.Selection.Window.topics)
  topics_.Mutable(index)->assign(value);
}
inline void Selection_Window::set_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobag.Selection.Window.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
inline void Selection_Window::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobag.Selection.Window.topics)
}
inline void Selection_Window::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobag.Selection.Window.topics)
}
inline std::string* Selection_Window::_internal_add_topics() {
  return topics_.Add();
}
inline void Selection_Window::add_topics(const std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobag.Selection.Window.topics)
}
inline void Selection_Window::add_topics(std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobag.Selection.Window.topics)
}
inline void Selection_Window::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobag.Selection.Window.topics)
}
inline void Selection_Window::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobag.Selection.Window.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Selection_Window::topics() const {
  // @@protoc_insertion_point(field_list:protobag.Selection.Window.topics)
  return topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Selection_Window::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:protobag.Selection.Window.topics)
  return &topics_;
}

// .google.protobuf.Timestamp start = 2;
inline bool Selection_Window::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool Selection_Window::has_start() const {
  return _internal_has_start();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Selection_Window::_internal_start() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Selection_Window::start() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Window.start)
  return _internal_start();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Selection_Window::release_start() {
  // @@protoc_insertion_point(field_release:protobag.Selection.Window.start)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Selection_Window::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    start_ = p;
  }
  return start_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Selection_Window::mutable_start() {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.Window.start)
  return _internal_mutable_start();
}
inline void Selection_Window::set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:protobag.Selection.Window.start)
}

// .google.protobuf.Timestamp end = 3;
inline bool Selection_Window::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool Selection_Window::has_end() const {
  return _internal_has_end();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Selection_Window::_internal_end() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Selection_Window::end() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Window.end)
  return _internal_end();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Selection_Window::release_end() {
  // @@protoc_insertion_point(field_release:protobag.Selection.Window.end)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Selection_Window::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_ = p;
  }
  return end_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Selection_Window::mutable_end() {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.Window.end)
  return _internal_mutable_end();
}
inline void Selection_Window::set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:protobag.Selection.Window.end)
}

// repeated string exclude_topics = 4;
inline int Selection_Window::_internal_exclude_topics_size() const {
  return exclude_topics_.size();
}
inline int Selection_Window::exclude_topics_size() const {
  return _internal_exclude_topics_size();
}
inline void Selection_Window::clear_exclude_topics() {
  exclude_topics_.Clear();
}
inline std::string* Selection_Window::add_exclude_topics() {
  // @@protoc_insertion_point(field_add_mutable:protobag.Selection.Window.exclude_topics)
  return _internal_add_exclude_topics();
}
inline const std::string& Selection_Window::_internal_exclude_topics(int index) const {
  return exclude_topics_.Get(index);
}
inline const std::string& Selection_Window::exclude_topics(int index) const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Window.exclude_topics)
  return _internal_exclude_topics(index);
}
inline std::string* Selection_Window::mutable_exclude_topics(int index) {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.Window.exclude_topics)
  return exclude_topics_.Mutable(index);
}
inline void Selection_Window::set_exclude_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protobag.Selection.Window.exclude_topics)
  exclude_topics_.Mutable(index)->assign(value);
}
inline void Selection_Window::set_exclude_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protobag.Selection.Window.exclude_topics)
  exclude_topics_.Mutable(index)->assign(std::move(value));
}
inline void Selection_Window::set_exclude_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobag.Selection.Window.exclude_topics)
}
inline void Selection_Window::set_exclude_topics(int index, const char* value, size_t size) {
  exclude_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobag.Selection.Window.exclude_topics)
}
inline std::string* Selection_Window::_internal_add_exclude_topics() {
  return exclude_topics_.Add();
}
inline void Selection_Window::add_exclude_topics(const std::string& value) {
  exclude_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobag.Selection.Window.exclude_topics)
}
inline void Selection_Window::add_exclude_topics(std::string&& value) {
  exclude_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobag.Selection.Window.exclude_topics)
}
inline void Selection_Window::add_exclude_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobag.Selection.Window.exclude_topics)
}
inline void Selection_Window::add_exclude_topics(const char* value, size_t size) {
  exclude_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobag.Selection.Window.exclude_topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Selection_Window::exclude_topics() const {
  // @@protoc_insertion_point(field_list:protobag.Selection.Window.exclude_topics)
  return exclude_topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Selection_Window::mutable_exclude_topics() {
  // @@protoc_insertion_point(field_mutable_list:protobag.Selection.Window.exclude_topics)
  return &exclude_topics_;
}

// -------------------------------------------------------------------

// Selection_Events

// repeated .protobag.TopicTime events = 10;
inline int Selection_Events::_internal_events_size() const {
  return events_.size();
}
inline int Selection_Events::events_size() const {
  return _internal_events_size();
}
inline void Selection_Events::clear_events() {
  events_.Clear();
}
inline ::protobag::TopicTime* Selection_Events::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.Events.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime >*
Selection_Events::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:protobag.Selection.Events.events)
  return &events_;
}
inline const ::protobag::TopicTime& Selection_Events::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::protobag::TopicTime& Selection_Events::events(int index) const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Events.events)
  return _internal_events(index);
}
inline ::protobag::TopicTime* Selection_Events::_internal_add_events() {
  return events_.Add();
}
inline ::protobag::TopicTime* Selection_Events::add_events() {
  // @@protoc_insertion_point(field_add:protobag.Selection.Events.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime >&
Selection_Events::events() const {
  // @@protoc_insertion_point(field_list:protobag.Selection.Events.events)
  return events_;
}

// bool require_all = 2;
inline void Selection_Events::clear_require_all() {
  require_all_ = false;
}
inline bool Selection_Events::_internal_require_all() const {
  return require_all_;
}
inline bool Selection_Events::require_all() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.Events.require_all)
  return _internal_require_all();
}
inline void Selection_Events::_internal_set_require_all(bool value) {
  
  require_all_ = value;
}
inline void Selection_Events::set_require_all(bool value) {
  _internal_set_require_all(value);
  // @@protoc_insertion_point(field_set:protobag.Selection.Events.require_all)
}

// -------------------------------------------------------------------

// Selection

// .protobag.Selection.All select_all = 1;
inline bool Selection::_internal_has_select_all() const {
  return criteria_case() == kSelectAll;
}
inline bool Selection::has_select_all() const {
  return _internal_has_select_all();
}
inline void Selection::set_has_select_all() {
  _oneof_case_[0] = kSelectAll;
}
inline void Selection::clear_select_all() {
  if (_internal_has_select_all()) {
    delete criteria_.select_all_;
    clear_has_criteria();
  }
}
inline ::protobag::Selection_All* Selection::release_select_all() {
  // @@protoc_insertion_point(field_release:protobag.Selection.select_all)
  if (_internal_has_select_all()) {
    clear_has_criteria();
      ::protobag::Selection_All* temp = criteria_.select_all_;
    criteria_.select_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobag::Selection_All& Selection::_internal_select_all() const {
  return _internal_has_select_all()
      ? *criteria_.select_all_
      : *reinterpret_cast< ::protobag::Selection_All*>(&::protobag::_Selection_All_default_instance_);
}
inline const ::protobag::Selection_All& Selection::select_all() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.select_all)
  return _internal_select_all();
}
inline ::protobag::Selection_All* Selection::_internal_mutable_select_all() {
  if (!_internal_has_select_all()) {
    clear_criteria();
    set_has_select_all();
    criteria_.select_all_ = CreateMaybeMessage< ::protobag::Selection_All >(
        GetArenaNoVirtual());
  }
  return criteria_.select_all_;
}
inline ::protobag::Selection_All* Selection::mutable_select_all() {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.select_all)
  return _internal_mutable_select_all();
}

// .protobag.Selection.Entrynames entrynames = 2;
inline bool Selection::_internal_has_entrynames() const {
  return criteria_case() == kEntrynames;
}
inline bool Selection::has_entrynames() const {
  return _internal_has_entrynames();
}
inline void Selection::set_has_entrynames() {
  _oneof_case_[0] = kEntrynames;
}
inline void Selection::clear_entrynames() {
  if (_internal_has_entrynames()) {
    delete criteria_.entrynames_;
    clear_has_criteria();
  }
}
inline ::protobag::Selection_Entrynames* Selection::release_entrynames() {
  // @@protoc_insertion_point(field_release:protobag.Selection.entrynames)
  if (_internal_has_entrynames()) {
    clear_has_criteria();
      ::protobag::Selection_Entrynames* temp = criteria_.entrynames_;
    criteria_.entrynames_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobag::Selection_Entrynames& Selection::_internal_entrynames() const {
  return _internal_has_entrynames()
      ? *criteria_.entrynames_
      : *reinterpret_cast< ::protobag::Selection_Entrynames*>(&::protobag::_Selection_Entrynames_default_instance_);
}
inline const ::protobag::Selection_Entrynames& Selection::entrynames() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.entrynames)
  return _internal_entrynames();
}
inline ::protobag::Selection_Entrynames* Selection::_internal_mutable_entrynames() {
  if (!_internal_has_entrynames()) {
    clear_criteria();
    set_has_entrynames();
    criteria_.entrynames_ = CreateMaybeMessage< ::protobag::Selection_Entrynames >(
        GetArenaNoVirtual());
  }
  return criteria_.entrynames_;
}
inline ::protobag::Selection_Entrynames* Selection::mutable_entrynames() {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.entrynames)
  return _internal_mutable_entrynames();
}

// .protobag.Selection.Window window = 3;
inline bool Selection::_internal_has_window() const {
  return criteria_case() == kWindow;
}
inline bool Selection::has_window() const {
  return _internal_has_window();
}
inline void Selection::set_has_window() {
  _oneof_case_[0] = kWindow;
}
inline void Selection::clear_window() {
  if (_internal_has_window()) {
    delete criteria_.window_;
    clear_has_criteria();
  }
}
inline ::protobag::Selection_Window* Selection::release_window() {
  // @@protoc_insertion_point(field_release:protobag.Selection.window)
  if (_internal_has_window()) {
    clear_has_criteria();
      ::protobag::Selection_Window* temp = criteria_.window_;
    criteria_.window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobag::Selection_Window& Selection::_internal_window() const {
  return _internal_has_window()
      ? *criteria_.window_
      : *reinterpret_cast< ::protobag::Selection_Window*>(&::protobag::_Selection_Window_default_instance_);
}
inline const ::protobag::Selection_Window& Selection::window() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.window)
  return _internal_window();
}
inline ::protobag::Selection_Window* Selection::_internal_mutable_window() {
  if (!_internal_has_window()) {
    clear_criteria();
    set_has_window();
    criteria_.window_ = CreateMaybeMessage< ::protobag::Selection_Window >(
        GetArenaNoVirtual());
  }
  return criteria_.window_;
}
inline ::protobag::Selection_Window* Selection::mutable_window() {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.window)
  return _internal_mutable_window();
}

// .protobag.Selection.Events events = 4;
inline bool Selection::_internal_has_events() const {
  return criteria_case() == kEvents;
}
inline bool Selection::has_events() const {
  return _internal_has_events();
}
inline void Selection::set_has_events() {
  _oneof_case_[0] = kEvents;
}
inline void Selection::clear_events() {
  if (_internal_has_events()) {
    delete criteria_.events_;
    clear_has_criteria();
  }
}
inline ::protobag::Selection_Events* Selection::release_events() {
  // @@protoc_insertion_point(field_release:protobag.Selection.events)
  if (_internal_has_events()) {
    clear_has_criteria();
      ::protobag::Selection_Events* temp = criteria_.events_;
    criteria_.events_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobag::Selection_Events& Selection::_internal_events() const {
  return _internal_has_events()
      ? *criteria_.events_
      : *reinterpret_cast< ::protobag::Selection_Events*>(&::protobag::_Selection_Events_default_instance_);
}
inline const ::protobag::Selection_Events& Selection::events() const {
  // @@protoc_insertion_point(field_get:protobag.Selection.events)
  return _internal_events();
}
inline ::protobag::Selection_Events* Selection::_internal_mutable_events() {
  if (!_internal_has_events()) {
    clear_criteria();
    set_has_events();
    criteria_.events_ = CreateMaybeMessage< ::protobag::Selection_Events >(
        GetArenaNoVirtual());
  }
  return criteria_.events_;
}
inline ::protobag::Selection_Events* Selection::mutable_events() {
  // @@protoc_insertion_point(field_mutable:protobag.Selection.events)
  return _internal_mutable_events();
}

inline bool Selection::has_criteria() const {
  return criteria_case() != CRITERIA_NOT_SET;
}
inline void Selection::clear_has_criteria() {
  _oneof_case_[0] = CRITERIA_NOT_SET;
}
inline Selection::CriteriaCase Selection::criteria_case() const {
  return Selection::CriteriaCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BagIndex_DescriptorPoolData

// map<string, .google.protobuf.FileDescriptorSet> type_url_to_descriptor = 1;
inline int BagIndex_DescriptorPoolData::_internal_type_url_to_descriptor_size() const {
  return type_url_to_descriptor_.size();
}
inline int BagIndex_DescriptorPoolData::type_url_to_descriptor_size() const {
  return _internal_type_url_to_descriptor_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet >&
BagIndex_DescriptorPoolData::_internal_type_url_to_descriptor() const {
  return type_url_to_descriptor_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet >&
BagIndex_DescriptorPoolData::type_url_to_descriptor() const {
  // @@protoc_insertion_point(field_map:protobag.BagIndex.DescriptorPoolData.type_url_to_descriptor)
  return _internal_type_url_to_descriptor();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet >*
BagIndex_DescriptorPoolData::_internal_mutable_type_url_to_descriptor() {
  return type_url_to_descriptor_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::FileDescriptorSet >*
BagIndex_DescriptorPoolData::mutable_type_url_to_descriptor() {
  // @@protoc_insertion_point(field_mutable_map:protobag.BagIndex.DescriptorPoolData.type_url_to_descriptor)
  return _internal_mutable_type_url_to_descriptor();
}

// map<string, string> entryname_to_type_url = 2;
inline int BagIndex_DescriptorPoolData::_internal_entryname_to_type_url_size() const {
  return entryname_to_type_url_.size();
}
inline int BagIndex_DescriptorPoolData::entryname_to_type_url_size() const {
  return _internal_entryname_to_type_url_size();
}
inline void BagIndex_DescriptorPoolData::clear_entryname_to_type_url() {
  entryname_to_type_url_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BagIndex_DescriptorPoolData::_internal_entryname_to_type_url() const {
  return entryname_to_type_url_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BagIndex_DescriptorPoolData::entryname_to_type_url() const {
  // @@protoc_insertion_point(field_map:protobag.BagIndex.DescriptorPoolData.entryname_to_type_url)
  return _internal_entryname_to_type_url();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BagIndex_DescriptorPoolData::_internal_mutable_entryname_to_type_url() {
  return entryname_to_type_url_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BagIndex_DescriptorPoolData::mutable_entryname_to_type_url() {
  // @@protoc_insertion_point(field_mutable_map:protobag.BagIndex.DescriptorPoolData.entryname_to_type_url)
  return _internal_mutable_entryname_to_type_url();
}

// -------------------------------------------------------------------

// BagIndex_TopicStats

// int64 n_messages = 1;
inline void BagIndex_TopicStats::clear_n_messages() {
  n_messages_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BagIndex_TopicStats::_internal_n_messages() const {
  return n_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BagIndex_TopicStats::n_messages() const {
  // @@protoc_insertion_point(field_get:protobag.BagIndex.TopicStats.n_messages)
  return _internal_n_messages();
}
inline void BagIndex_TopicStats::_internal_set_n_messages(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  n_messages_ = value;
}
inline void BagIndex_TopicStats::set_n_messages(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_n_messages(value);
  // @@protoc_insertion_point(field_set:protobag.BagIndex.TopicStats.n_messages)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BagIndex

// string bag_namespace = 1;
inline void BagIndex::clear_bag_namespace() {
  bag_namespace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BagIndex::bag_namespace() const {
  // @@protoc_insertion_point(field_get:protobag.BagIndex.bag_namespace)
  return _internal_bag_namespace();
}
inline void BagIndex::set_bag_namespace(const std::string& value) {
  _internal_set_bag_namespace(value);
  // @@protoc_insertion_point(field_set:protobag.BagIndex.bag_namespace)
}
inline std::string* BagIndex::mutable_bag_namespace() {
  // @@protoc_insertion_point(field_mutable:protobag.BagIndex.bag_namespace)
  return _internal_mutable_bag_namespace();
}
inline const std::string& BagIndex::_internal_bag_namespace() const {
  return bag_namespace_.GetNoArena();
}
inline void BagIndex::_internal_set_bag_namespace(const std::string& value) {
  
  bag_namespace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BagIndex::set_bag_namespace(std::string&& value) {
  
  bag_namespace_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobag.BagIndex.bag_namespace)
}
inline void BagIndex::set_bag_namespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bag_namespace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobag.BagIndex.bag_namespace)
}
inline void BagIndex::set_bag_namespace(const char* value, size_t size) {
  
  bag_namespace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobag.BagIndex.bag_namespace)
}
inline std::string* BagIndex::_internal_mutable_bag_namespace() {
  
  return bag_namespace_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BagIndex::release_bag_namespace() {
  // @@protoc_insertion_point(field_release:protobag.BagIndex.bag_namespace)
  
  return bag_namespace_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BagIndex::set_allocated_bag_namespace(std::string* bag_namespace) {
  if (bag_namespace != nullptr) {
    
  } else {
    
  }
  bag_namespace_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bag_namespace);
  // @@protoc_insertion_point(field_set_allocated:protobag.BagIndex.bag_namespace)
}

// string protobag_version = 2;
inline void BagIndex::clear_protobag_version() {
  protobag_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BagIndex::protobag_version() const {
  // @@protoc_insertion_point(field_get:protobag.BagIndex.protobag_version)
  return _internal_protobag_version();
}
inline void BagIndex::set_protobag_version(const std::string& value) {
  _internal_set_protobag_version(value);
  // @@protoc_insertion_point(field_set:protobag.BagIndex.protobag_version)
}
inline std::string* BagIndex::mutable_protobag_version() {
  // @@protoc_insertion_point(field_mutable:protobag.BagIndex.protobag_version)
  return _internal_mutable_protobag_version();
}
inline const std::string& BagIndex::_internal_protobag_version() const {
  return protobag_version_.GetNoArena();
}
inline void BagIndex::_internal_set_protobag_version(const std::string& value) {
  
  protobag_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BagIndex::set_protobag_version(std::string&& value) {
  
  protobag_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobag.BagIndex.protobag_version)
}
inline void BagIndex::set_protobag_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protobag_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobag.BagIndex.protobag_version)
}
inline void BagIndex::set_protobag_version(const char* value, size_t size) {
  
  protobag_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobag.BagIndex.protobag_version)
}
inline std::string* BagIndex::_internal_mutable_protobag_version() {
  
  return protobag_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BagIndex::release_protobag_version() {
  // @@protoc_insertion_point(field_release:protobag.BagIndex.protobag_version)
  
  return protobag_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BagIndex::set_allocated_protobag_version(std::string* protobag_version) {
  if (protobag_version != nullptr) {
    
  } else {
    
  }
  protobag_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protobag_version);
  // @@protoc_insertion_point(field_set_allocated:protobag.BagIndex.protobag_version)
}

// .protobag.BagIndex.DescriptorPoolData descriptor_pool_data = 1000;
inline bool BagIndex::_internal_has_descriptor_pool_data() const {
  return this != internal_default_instance() && descriptor_pool_data_ != nullptr;
}
inline bool BagIndex::has_descriptor_pool_data() const {
  return _internal_has_descriptor_pool_data();
}
inline void BagIndex::clear_descriptor_pool_data() {
  if (GetArenaNoVirtual() == nullptr && descriptor_pool_data_ != nullptr) {
    delete descriptor_pool_data_;
  }
  descriptor_pool_data_ = nullptr;
}
inline const ::protobag::BagIndex_DescriptorPoolData& BagIndex::_internal_descriptor_pool_data() const {
  const ::protobag::BagIndex_DescriptorPoolData* p = descriptor_pool_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protobag::BagIndex_DescriptorPoolData*>(
      &::protobag::_BagIndex_DescriptorPoolData_default_instance_);
}
inline const ::protobag::BagIndex_DescriptorPoolData& BagIndex::descriptor_pool_data() const {
  // @@protoc_insertion_point(field_get:protobag.BagIndex.descriptor_pool_data)
  return _internal_descriptor_pool_data();
}
inline ::protobag::BagIndex_DescriptorPoolData* BagIndex::release_descriptor_pool_data() {
  // @@protoc_insertion_point(field_release:protobag.BagIndex.descriptor_pool_data)
  
  ::protobag::BagIndex_DescriptorPoolData* temp = descriptor_pool_data_;
  descriptor_pool_data_ = nullptr;
  return temp;
}
inline ::protobag::BagIndex_DescriptorPoolData* BagIndex::_internal_mutable_descriptor_pool_data() {
  
  if (descriptor_pool_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobag::BagIndex_DescriptorPoolData>(GetArenaNoVirtual());
    descriptor_pool_data_ = p;
  }
  return descriptor_pool_data_;
}
inline ::protobag::BagIndex_DescriptorPoolData* BagIndex::mutable_descriptor_pool_data() {
  // @@protoc_insertion_point(field_mutable:protobag.BagIndex.descriptor_pool_data)
  return _internal_mutable_descriptor_pool_data();
}
inline void BagIndex::set_allocated_descriptor_pool_data(::protobag::BagIndex_DescriptorPoolData* descriptor_pool_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete descriptor_pool_data_;
  }
  if (descriptor_pool_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      descriptor_pool_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, descriptor_pool_data, submessage_arena);
    }
    
  } else {
    
  }
  descriptor_pool_data_ = descriptor_pool_data;
  // @@protoc_insertion_point(field_set_allocated:protobag.BagIndex.descriptor_pool_data)
}

// .google.protobuf.Timestamp start = 2000;
inline bool BagIndex::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool BagIndex::has_start() const {
  return _internal_has_start();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BagIndex::_internal_start() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BagIndex::start() const {
  // @@protoc_insertion_point(field_get:protobag.BagIndex.start)
  return _internal_start();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BagIndex::release_start() {
  // @@protoc_insertion_point(field_release:protobag.BagIndex.start)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BagIndex::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    start_ = p;
  }
  return start_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BagIndex::mutable_start() {
  // @@protoc_insertion_point(field_mutable:protobag.BagIndex.start)
  return _internal_mutable_start();
}
inline void BagIndex::set_allocated_start(PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:protobag.BagIndex.start)
}

// .google.protobuf.Timestamp end = 2001;
inline bool BagIndex::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool BagIndex::has_end() const {
  return _internal_has_end();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BagIndex::_internal_end() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BagIndex::end() const {
  // @@protoc_insertion_point(field_get:protobag.BagIndex.end)
  return _internal_end();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BagIndex::release_end() {
  // @@protoc_insertion_point(field_release:protobag.BagIndex.end)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BagIndex::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_ = p;
  }
  return end_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BagIndex::mutable_end() {
  // @@protoc_insertion_point(field_mutable:protobag.BagIndex.end)
  return _internal_mutable_end();
}
inline void BagIndex::set_allocated_end(PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end)->GetArena();
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:protobag.BagIndex.end)
}

// map<string, .protobag.BagIndex.TopicStats> topic_to_stats = 2020;
inline int BagIndex::_internal_topic_to_stats_size() const {
  return topic_to_stats_.size();
}
inline int BagIndex::topic_to_stats_size() const {
  return _internal_topic_to_stats_size();
}
inline void BagIndex::clear_topic_to_stats() {
  topic_to_stats_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagIndex_TopicStats >&
BagIndex::_internal_topic_to_stats() const {
  return topic_to_stats_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagIndex_TopicStats >&
BagIndex::topic_to_stats() const {
  // @@protoc_insertion_point(field_map:protobag.BagIndex.topic_to_stats)
  return _internal_topic_to_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagIndex_TopicStats >*
BagIndex::_internal_mutable_topic_to_stats() {
  return topic_to_stats_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobag::BagIndex_TopicStats >*
BagIndex::mutable_topic_to_stats() {
  // @@protoc_insertion_point(field_mutable_map:protobag.BagIndex.topic_to_stats)
  return _internal_mutable_topic_to_stats();
}

// repeated .protobag.TopicTime time_ordered_entries = 2030;
inline int BagIndex::_internal_time_ordered_entries_size() const {
  return time_ordered_entries_.size();
}
inline int BagIndex::time_ordered_entries_size() const {
  return _internal_time_ordered_entries_size();
}
inline void BagIndex::clear_time_ordered_entries() {
  time_ordered_entries_.Clear();
}
inline ::protobag::TopicTime* BagIndex::mutable_time_ordered_entries(int index) {
  // @@protoc_insertion_point(field_mutable:protobag.BagIndex.time_ordered_entries)
  return time_ordered_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime >*
BagIndex::mutable_time_ordered_entries() {
  // @@protoc_insertion_point(field_mutable_list:protobag.BagIndex.time_ordered_entries)
  return &time_ordered_entries_;
}
inline const ::protobag::TopicTime& BagIndex::_internal_time_ordered_entries(int index) const {
  return time_ordered_entries_.Get(index);
}
inline const ::protobag::TopicTime& BagIndex::time_ordered_entries(int index) const {
  // @@protoc_insertion_point(field_get:protobag.BagIndex.time_ordered_entries)
  return _internal_time_ordered_entries(index);
}
inline ::protobag::TopicTime* BagIndex::_internal_add_time_ordered_entries() {
  return time_ordered_entries_.Add();
}
inline ::protobag::TopicTime* BagIndex::add_time_ordered_entries() {
  // @@protoc_insertion_point(field_add:protobag.BagIndex.time_ordered_entries)
  return _internal_add_time_ordered_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobag::TopicTime >&
BagIndex::time_ordered_entries() const {
  // @@protoc_insertion_point(field_list:protobag.BagIndex.time_ordered_entries)
  return time_ordered_entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobag

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtobagMsg_2eproto
